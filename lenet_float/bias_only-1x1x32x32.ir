fn (%input: Tensor[(1, 1, 32, 32), float32], %conv1_weight: Tensor[(6, 1, 5, 5), float32], %conv1_bias: Tensor[(6), float32], %conv2_weight: Tensor[(16, 6, 5, 5), float32], %conv2_bias: Tensor[(16), float32], %fc1_weight: Tensor[(120, 400), float32], %fc1_bias: Tensor[(120), float32], %fc2_weight: Tensor[(84, 120), float32], %fc2_bias: Tensor[(84), float32], %fc3_weight: Tensor[(10, 84), float32], %fc3_bias: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(84), float32], Tensor[(120), float32], Tensor[(16), float32], Tensor[(6), float32]) {
  %0 = nn.conv2d(%input, %conv1_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=6, kernel_size=[5, 5]) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %1 = nn.bias_add(%0, %conv1_bias) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %2 = nn.relu(%1) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %3 = nn.conv2d(%2, %conv2_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=16, kernel_size=[5, 5]) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %4 = nn.bias_add(%3, %conv2_bias) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %6 = reshape(%5, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 400, 1, 1), float32] */;
  %7 = squeeze(%6, axis=[2, 3]) /* ty=Tensor[(1, 400), float32] */;
  %8 = nn.dense(%7, %fc1_weight, units=None) /* ty=Tensor[(1, 120), float32] */;
  %9 = nn.bias_add(%8, %fc1_bias, axis=-1) /* ty=Tensor[(1, 120), float32] */;
  %10 = nn.relu(%9) /* ty=Tensor[(1, 120), float32] */;
  %11 = nn.dense(%10, %fc2_weight, units=None) /* ty=Tensor[(1, 84), float32] */;
  %12 = nn.bias_add(%11, %fc2_bias, axis=-1) /* ty=Tensor[(1, 84), float32] */;
  %13 = nn.relu(%12) /* ty=Tensor[(1, 84), float32] */;
  %14 = nn.dense(%13, %fc3_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %15 = nn.bias_add(%14, %fc3_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %16 = nn.log_softmax(%15) /* ty=Tensor[(1, 10), float32] */;
  %17 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %18 = negative(%17) /* ty=float32 */;
  %19 = multiply(%18, %label) /* ty=Tensor[(1, 10), float32] */;
  %20 = sum(%19, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %21 = exp(%16) /* ty=Tensor[(1, 10), float32] */;
  %22 = multiply(%20, %21) /* ty=Tensor[(1, 10), float32] */;
  %23 = subtract(%19, %22) /* ty=Tensor[(1, 10), float32] */;
  %24 = zeros(shape=[1, 84], dtype="float32") /* ty=Tensor[(1, 84), float32] */;
  %25 = less(%12, %24) /* ty=Tensor[(1, 84), bool] */;
  %26 = nn.matmul(%23, %fc3_weight, units=None) /* ty=Tensor[(1, 84), float32] */;
  %27 = where(%25, %24, %26) /* ty=Tensor[(1, 84), float32] */;
  %28 = zeros(shape=[1, 120], dtype="float32") /* ty=Tensor[(1, 120), float32] */;
  %29 = less(%9, %28) /* ty=Tensor[(1, 120), bool] */;
  %30 = nn.matmul(%27, %fc2_weight, units=None) /* ty=Tensor[(1, 120), float32] */;
  %31 = where(%29, %28, %30) /* ty=Tensor[(1, 120), float32] */;
  %32 = zeros(shape=[1, 16, 5, 5], dtype="float32") /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %33 = nn.matmul(%31, %fc1_weight, units=None) /* ty=Tensor[(1, 400), float32] */;
  %34 = less(%4, %32) /* ty=Tensor[(1, 16, 5, 5), bool] */;
  %35 = reshape(%33, newshape=[1, 16, 5, 5]) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %36 = where(%34, %32, %35) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %37 = zeros(shape=[1, 6, 14, 14], dtype="float32") /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %38 = less(%1, %37) /* ty=Tensor[(1, 6, 14, 14), bool] */;
  %39 = nn.conv2d_transpose(%36, %conv2_weight, channels=6, kernel_size=[5, 5], strides=[2, 2], output_padding=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %40 = where(%38, %37, %39) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %41 = nn.cross_entropy_with_logits(%16, %label) /* ty=float32 */;
  %42 = sum(%23, axis=[-1], exclude=True) /* ty=Tensor[(10), float32] */;
  %43 = sum(%27, axis=[-1], exclude=True) /* ty=Tensor[(84), float32] */;
  %44 = sum(%31, axis=[-1], exclude=True) /* ty=Tensor[(120), float32] */;
  %45 = sum(%36, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %46 = sum(%40, axis=[1], exclude=True) /* ty=Tensor[(6), float32] */;
  (%41, %42, %43, %44, %45, %46)
}