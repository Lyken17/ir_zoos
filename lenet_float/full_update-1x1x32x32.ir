fn (%input: Tensor[(1, 1, 32, 32), float32], %conv1_weight: Tensor[(6, 1, 5, 5), float32], %conv1_bias: Tensor[(6), float32], %conv2_weight: Tensor[(16, 6, 5, 5), float32], %conv2_bias: Tensor[(16), float32], %fc1_weight: Tensor[(120, 400), float32], %fc1_bias: Tensor[(120), float32], %fc2_weight: Tensor[(84, 120), float32], %fc2_bias: Tensor[(84), float32], %fc3_weight: Tensor[(10, 84), float32], %fc3_bias: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 84), float32], Tensor[(84), float32], Tensor[(84, 120), float32], Tensor[(120), float32], Tensor[(120, 400), float32], Tensor[(16), float32], Tensor[(16, 6, 5, 5), float32], Tensor[(6), float32], Tensor[(6, 1, 5, 5), float32]) {
  %0 = nn.conv2d(%input, %conv1_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=6, kernel_size=[5, 5]) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %1 = nn.bias_add(%0, %conv1_bias) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %2 = nn.relu(%1) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %3 = nn.conv2d(%2, %conv2_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=16, kernel_size=[5, 5]) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %4 = nn.bias_add(%3, %conv2_bias) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %6 = reshape(%5, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 400, 1, 1), float32] */;
  %7 = squeeze(%6, axis=[2, 3]) /* ty=Tensor[(1, 400), float32] */;
  %8 = nn.dense(%7, %fc1_weight, units=None) /* ty=Tensor[(1, 120), float32] */;
  %9 = nn.bias_add(%8, %fc1_bias, axis=-1) /* ty=Tensor[(1, 120), float32] */;
  %10 = nn.relu(%9) /* ty=Tensor[(1, 120), float32] */;
  %11 = nn.dense(%10, %fc2_weight, units=None) /* ty=Tensor[(1, 84), float32] */;
  %12 = nn.bias_add(%11, %fc2_bias, axis=-1) /* ty=Tensor[(1, 84), float32] */;
  %13 = nn.relu(%12) /* ty=Tensor[(1, 84), float32] */;
  %14 = nn.dense(%13, %fc3_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %15 = nn.bias_add(%14, %fc3_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %16 = nn.log_softmax(%15) /* ty=Tensor[(1, 10), float32] */;
  %17 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %18 = negative(%17) /* ty=float32 */;
  %19 = multiply(%18, %label) /* ty=Tensor[(1, 10), float32] */;
  %20 = sum(%19, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %21 = exp(%16) /* ty=Tensor[(1, 10), float32] */;
  %22 = multiply(%20, %21) /* ty=Tensor[(1, 10), float32] */;
  %23 = subtract(%19, %22) /* ty=Tensor[(1, 10), float32] */;
  %24 = transpose(%23, axes=None) /* ty=Tensor[(10, 1), float32] */;
  %25 = zeros(shape=[1, 84], dtype="float32") /* ty=Tensor[(1, 84), float32] */;
  %26 = less(%12, %25) /* ty=Tensor[(1, 84), bool] */;
  %27 = nn.matmul(%23, %fc3_weight, units=None) /* ty=Tensor[(1, 84), float32] */;
  %28 = where(%26, %25, %27) /* ty=Tensor[(1, 84), float32] */;
  %29 = transpose(%28, axes=None) /* ty=Tensor[(84, 1), float32] */;
  %30 = zeros(shape=[1, 120], dtype="float32") /* ty=Tensor[(1, 120), float32] */;
  %31 = less(%9, %30) /* ty=Tensor[(1, 120), bool] */;
  %32 = nn.matmul(%28, %fc2_weight, units=None) /* ty=Tensor[(1, 120), float32] */;
  %33 = where(%31, %30, %32) /* ty=Tensor[(1, 120), float32] */;
  %34 = transpose(%33, axes=None) /* ty=Tensor[(120, 1), float32] */;
  %35 = zeros(shape=[1, 16, 5, 5], dtype="float32") /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %36 = nn.matmul(%33, %fc1_weight, units=None) /* ty=Tensor[(1, 400), float32] */;
  %37 = less(%4, %35) /* ty=Tensor[(1, 16, 5, 5), bool] */;
  %38 = reshape(%36, newshape=[1, 16, 5, 5]) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %39 = where(%37, %35, %38) /* ty=Tensor[(1, 16, 5, 5), float32] */;
  %40 = tile(%39, reps=[1, 6, 1, 1]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %41 = reshape(%2, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %42 = reshape(%40, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 5, 5), float32] */;
  %43 = nn.conv2d(%41, %42, padding=[0, 0, 0, 0], dilation=[2, 2], groups=6, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 6, 6), float32] */;
  %44 = reshape(%43, newshape=[1, 6, 16, 6, 6]) /* ty=Tensor[(1, 6, 16, 6, 6), float32] */;
  %45 = sum(%44, axis=[0]) /* ty=Tensor[(6, 16, 6, 6), float32] */;
  %46 = transpose(%45, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 6, 6, 6), float32] */;
  %47 = zeros(shape=[1, 6, 14, 14], dtype="float32") /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %48 = less(%1, %47) /* ty=Tensor[(1, 6, 14, 14), bool] */;
  %49 = nn.conv2d_transpose(%39, %conv2_weight, channels=6, kernel_size=[5, 5], strides=[2, 2], output_padding=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %50 = where(%48, %47, %49) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %51 = tile(%50, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 6, 14, 14), float32] */;
  %52 = reshape(%input, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 1, 32, 32), float32] */;
  %53 = reshape(%51, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6, 1, 14, 14), float32] */;
  %54 = nn.conv2d(%52, %53, padding=[0, 0, 0, 0], dilation=[2, 2], channels=6, kernel_size=[14, 14]) /* ty=Tensor[(1, 6, 6, 6), float32] */;
  %55 = reshape(%54, newshape=[1, 1, 6, 6, 6]) /* ty=Tensor[(1, 1, 6, 6, 6), float32] */;
  %56 = sum(%55, axis=[0]) /* ty=Tensor[(1, 6, 6, 6), float32] */;
  %57 = transpose(%56, axes=[1, 0, 2, 3]) /* ty=Tensor[(6, 1, 6, 6), float32] */;
  %58 = nn.cross_entropy_with_logits(%16, %label) /* ty=float32 */;
  %59 = sum(%23, axis=[-1], exclude=True) /* ty=Tensor[(10), float32] */;
  %60 = nn.matmul(%24, %13, units=None) /* ty=Tensor[(10, 84), float32] */;
  %61 = sum(%28, axis=[-1], exclude=True) /* ty=Tensor[(84), float32] */;
  %62 = nn.matmul(%29, %10, units=None) /* ty=Tensor[(84, 120), float32] */;
  %63 = sum(%33, axis=[-1], exclude=True) /* ty=Tensor[(120), float32] */;
  %64 = nn.matmul(%34, %7, units=None) /* ty=Tensor[(120, 400), float32] */;
  %65 = sum(%39, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %66 = strided_slice(%46, begin=[0, 0, 0, 0], end=[16, 6, 5, 5], strides=[1], axes=None) /* ty=Tensor[(16, 6, 5, 5), float32] */;
  %67 = sum(%50, axis=[1], exclude=True) /* ty=Tensor[(6), float32] */;
  %68 = strided_slice(%57, begin=[0, 0, 0, 0], end=[6, 1, 5, 5], strides=[1], axes=None) /* ty=Tensor[(6, 1, 5, 5), float32] */;
  (%58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68)
}