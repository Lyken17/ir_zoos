fn (%input: Tensor[(1, 3, 128, 128), float32], %label: Tensor[(1, 10), float32], %v0_0_0_weight: Tensor[(32, 3, 3, 3), float32], %v0_0_0_bias: Tensor[(32), float32], %v0_1_conv_0_0_weight: Tensor[(32, 1, 3, 3), float32], %v0_1_conv_0_0_bias: Tensor[(32), float32], %v0_1_conv_1_weight: Tensor[(16, 32, 1, 1), float32], %v0_1_conv_1_bias: Tensor[(16), float32], %v0_2_conv_0_0_weight: Tensor[(96, 16, 1, 1), float32], %v0_2_conv_0_0_bias: Tensor[(96), float32], %v0_2_conv_1_0_weight: Tensor[(96, 1, 3, 3), float32], %v0_2_conv_1_0_bias: Tensor[(96), float32], %v0_2_conv_2_weight: Tensor[(24, 96, 1, 1), float32], %v0_2_conv_2_bias: Tensor[(24), float32], %v0_3_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_3_conv_0_0_bias: Tensor[(144), float32], %v0_3_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_3_conv_1_0_bias: Tensor[(144), float32], %v0_3_conv_2_weight: Tensor[(24, 144, 1, 1), float32], %v0_3_conv_2_bias: Tensor[(24), float32], %v0_4_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_4_conv_0_0_bias: Tensor[(144), float32], %v0_4_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_4_conv_1_0_bias: Tensor[(144), float32], %v0_4_conv_2_weight: Tensor[(32, 144, 1, 1), float32], %v0_4_conv_2_bias: Tensor[(32), float32], %v0_5_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_5_conv_0_0_bias: Tensor[(192), float32], %v0_5_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_5_conv_1_0_bias: Tensor[(192), float32], %v0_5_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_5_conv_2_bias: Tensor[(32), float32], %v0_6_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_6_conv_0_0_bias: Tensor[(192), float32], %v0_6_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_6_conv_1_0_bias: Tensor[(192), float32], %v0_6_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_6_conv_2_bias: Tensor[(32), float32], %v0_7_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_7_conv_0_0_bias: Tensor[(192), float32], %v0_7_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_7_conv_1_0_bias: Tensor[(192), float32], %v0_7_conv_2_weight: Tensor[(64, 192, 1, 1), float32], %v0_7_conv_2_bias: Tensor[(64), float32], %v0_8_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_8_conv_0_0_bias: Tensor[(384), float32], %v0_8_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_8_conv_1_0_bias: Tensor[(384), float32], %v0_8_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_8_conv_2_bias: Tensor[(64), float32], %v0_9_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_9_conv_0_0_bias: Tensor[(384), float32], %v0_9_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_9_conv_1_0_bias: Tensor[(384), float32], %v0_9_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_9_conv_2_bias: Tensor[(64), float32], %v0_10_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_10_conv_0_0_bias: Tensor[(384), float32], %v0_10_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_10_conv_1_0_bias: Tensor[(384), float32], %v0_10_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_10_conv_2_bias: Tensor[(64), float32], %v0_11_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_11_conv_0_0_bias: Tensor[(384), float32], %v0_11_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_11_conv_1_0_bias: Tensor[(384), float32], %v0_11_conv_2_weight: Tensor[(96, 384, 1, 1), float32], %v0_11_conv_2_bias: Tensor[(96), float32], %v0_12_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_12_conv_0_0_bias: Tensor[(576), float32], %v0_12_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_12_conv_1_0_bias: Tensor[(576), float32], %v0_12_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_12_conv_2_bias: Tensor[(96), float32], %v0_13_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_13_conv_0_0_bias: Tensor[(576), float32], %v0_13_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_13_conv_1_0_bias: Tensor[(576), float32], %v0_13_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_13_conv_2_bias: Tensor[(96), float32], %v0_14_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_14_conv_0_0_bias: Tensor[(576), float32], %v0_14_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_14_conv_1_0_bias: Tensor[(576), float32], %v0_14_conv_2_weight: Tensor[(160, 576, 1, 1), float32], %v0_14_conv_2_bias: Tensor[(160), float32], %v0_15_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_15_conv_0_0_bias: Tensor[(960), float32], %v0_15_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_15_conv_1_0_bias: Tensor[(960), float32], %v0_15_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_15_conv_2_bias: Tensor[(160), float32], %v0_16_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_16_conv_0_0_bias: Tensor[(960), float32], %v0_16_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_16_conv_1_0_bias: Tensor[(960), float32], %v0_16_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_16_conv_2_bias: Tensor[(160), float32], %v0_17_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_17_conv_0_0_bias: Tensor[(960), float32], %v0_17_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_17_conv_1_0_bias: Tensor[(960), float32], %v0_17_conv_2_weight: Tensor[(320, 960, 1, 1), float32], %v0_17_conv_2_bias: Tensor[(320), float32], %v0_18_0_weight: Tensor[(1280, 320, 1, 1), float32], %v0_18_0_bias: Tensor[(1280), float32], %v2_1_weight: Tensor[(10, 1280), float32], %v2_1_bias: Tensor[(10), float32]) -> float32 {
  %0 = nn.conv2d(%input, %v0_0_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %1 = nn.bias_add(%0, %v0_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %2 = clip(%1, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %3 = nn.conv2d(%2, %v0_1_conv_0_0_weight, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %4 = nn.bias_add(%3, %v0_1_conv_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %5 = clip(%4, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %6 = nn.conv2d(%5, %v0_1_conv_1_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %7 = nn.bias_add(%6, %v0_1_conv_1_bias) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %8 = nn.conv2d(%7, %v0_2_conv_0_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %9 = nn.bias_add(%8, %v0_2_conv_0_0_bias) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %10 = clip(%9, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %11 = nn.conv2d(%10, %v0_2_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %12 = nn.bias_add(%11, %v0_2_conv_1_0_bias) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %13 = clip(%12, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %14 = nn.conv2d(%13, %v0_2_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %15 = nn.bias_add(%14, %v0_2_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %16 = nn.conv2d(%15, %v0_3_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %17 = nn.bias_add(%16, %v0_3_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %18 = clip(%17, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %19 = nn.conv2d(%18, %v0_3_conv_1_0_weight, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %20 = nn.bias_add(%19, %v0_3_conv_1_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %21 = clip(%20, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %22 = nn.conv2d(%21, %v0_3_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %23 = nn.bias_add(%22, %v0_3_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %24 = add(%15, %23) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %25 = nn.conv2d(%24, %v0_4_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %26 = nn.bias_add(%25, %v0_4_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %27 = clip(%26, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %28 = nn.conv2d(%27, %v0_4_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %29 = nn.bias_add(%28, %v0_4_conv_1_0_bias) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %31 = nn.conv2d(%30, %v0_4_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %32 = nn.bias_add(%31, %v0_4_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %33 = nn.conv2d(%32, %v0_5_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %34 = nn.bias_add(%33, %v0_5_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %35 = clip(%34, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %36 = nn.conv2d(%35, %v0_5_conv_1_0_weight, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %37 = nn.bias_add(%36, %v0_5_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %38 = clip(%37, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %39 = nn.conv2d(%38, %v0_5_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %40 = nn.bias_add(%39, %v0_5_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %41 = add(%32, %40) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %42 = nn.conv2d(%41, %v0_6_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %43 = nn.bias_add(%42, %v0_6_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %44 = clip(%43, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %45 = nn.conv2d(%44, %v0_6_conv_1_0_weight, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %46 = nn.bias_add(%45, %v0_6_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %47 = clip(%46, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %48 = nn.conv2d(%47, %v0_6_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %49 = nn.bias_add(%48, %v0_6_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %50 = add(%41, %49) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %51 = nn.conv2d(%50, %v0_7_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %52 = nn.bias_add(%51, %v0_7_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %54 = nn.conv2d(%53, %v0_7_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %55 = nn.bias_add(%54, %v0_7_conv_1_0_bias) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %56 = clip(%55, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %57 = nn.conv2d(%56, %v0_7_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %58 = nn.bias_add(%57, %v0_7_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %59 = nn.conv2d(%58, %v0_8_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %60 = nn.bias_add(%59, %v0_8_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %61 = clip(%60, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %62 = nn.conv2d(%61, %v0_8_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %63 = nn.bias_add(%62, %v0_8_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %64 = clip(%63, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %65 = nn.conv2d(%64, %v0_8_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %66 = nn.bias_add(%65, %v0_8_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %67 = add(%58, %66) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %68 = nn.conv2d(%67, %v0_9_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %69 = nn.bias_add(%68, %v0_9_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %70 = clip(%69, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %71 = nn.conv2d(%70, %v0_9_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %72 = nn.bias_add(%71, %v0_9_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %73 = clip(%72, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %74 = nn.conv2d(%73, %v0_9_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %75 = nn.bias_add(%74, %v0_9_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %76 = add(%67, %75) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %77 = nn.conv2d(%76, %v0_10_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %78 = nn.bias_add(%77, %v0_10_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %79 = clip(%78, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %80 = nn.conv2d(%79, %v0_10_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %81 = nn.bias_add(%80, %v0_10_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %83 = nn.conv2d(%82, %v0_10_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %84 = nn.bias_add(%83, %v0_10_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %85 = add(%76, %84) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %86 = nn.conv2d(%85, %v0_11_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %87 = nn.bias_add(%86, %v0_11_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %89 = nn.conv2d(%88, %v0_11_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %90 = nn.bias_add(%89, %v0_11_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %91 = clip(%90, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %92 = nn.conv2d(%91, %v0_11_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %93 = nn.bias_add(%92, %v0_11_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %94 = nn.conv2d(%93, %v0_12_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %95 = nn.bias_add(%94, %v0_12_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %96 = clip(%95, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %97 = nn.conv2d(%96, %v0_12_conv_1_0_weight, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %98 = nn.bias_add(%97, %v0_12_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %99 = clip(%98, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %100 = nn.conv2d(%99, %v0_12_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %101 = nn.bias_add(%100, %v0_12_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %102 = add(%93, %101) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %103 = nn.conv2d(%102, %v0_13_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %104 = nn.bias_add(%103, %v0_13_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %105 = clip(%104, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %106 = nn.conv2d(%105, %v0_13_conv_1_0_weight, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %107 = nn.bias_add(%106, %v0_13_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %108 = clip(%107, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %109 = nn.conv2d(%108, %v0_13_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %110 = nn.bias_add(%109, %v0_13_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %111 = add(%102, %110) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %112 = nn.conv2d(%111, %v0_14_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %113 = nn.bias_add(%112, %v0_14_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %114 = clip(%113, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %115 = nn.conv2d(%114, %v0_14_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %116 = nn.bias_add(%115, %v0_14_conv_1_0_bias) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %118 = nn.conv2d(%117, %v0_14_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %119 = nn.bias_add(%118, %v0_14_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %120 = nn.conv2d(%119, %v0_15_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %121 = nn.bias_add(%120, %v0_15_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %122 = clip(%121, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %123 = nn.conv2d(%122, %v0_15_conv_1_0_weight, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %124 = nn.bias_add(%123, %v0_15_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %125 = clip(%124, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %126 = nn.conv2d(%125, %v0_15_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %127 = nn.bias_add(%126, %v0_15_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %128 = add(%119, %127) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %129 = nn.conv2d(%128, %v0_16_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %130 = nn.bias_add(%129, %v0_16_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %131 = clip(%130, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %132 = nn.conv2d(%131, %v0_16_conv_1_0_weight, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %133 = nn.bias_add(%132, %v0_16_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %134 = clip(%133, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %135 = nn.conv2d(%134, %v0_16_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %136 = nn.bias_add(%135, %v0_16_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %137 = add(%128, %136) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %138 = nn.conv2d(%137, %v0_17_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %139 = nn.bias_add(%138, %v0_17_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %140 = clip(%139, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %141 = nn.conv2d(%140, %v0_17_conv_1_0_weight, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %142 = nn.bias_add(%141, %v0_17_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %143 = clip(%142, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %144 = nn.conv2d(%143, %v0_17_conv_2_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %145 = nn.bias_add(%144, %v0_17_conv_2_bias) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %146 = nn.conv2d(%145, %v0_18_0_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %147 = nn.bias_add(%146, %v0_18_0_bias) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %148 = clip(%147, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %149 = mean(%148, axis=[-1]) /* ty=Tensor[(1, 1280, 4), float32] */;
  %150 = mean(%149, axis=[-1]) /* ty=Tensor[(1, 1280), float32] */;
  %151 = nn.dense(%150, %v2_1_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %152 = nn.bias_add(%151, %v2_1_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %153 = nn.log_softmax(%152) /* ty=Tensor[(1, 10), float32] */;
  nn.cross_entropy_with_logits(%153, %label) /* ty=float32 */
}