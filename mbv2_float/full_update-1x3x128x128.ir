fn (%input: Tensor[(1, 3, 128, 128), float32], %v0_0_0_weight: Tensor[(32, 3, 3, 3), float32], %v0_0_0_bias: Tensor[(32), float32], %v0_1_conv_0_0_weight: Tensor[(32, 1, 3, 3), float32], %v0_1_conv_0_0_bias: Tensor[(32), float32], %v0_1_conv_1_weight: Tensor[(16, 32, 1, 1), float32], %v0_1_conv_1_bias: Tensor[(16), float32], %v0_2_conv_0_0_weight: Tensor[(96, 16, 1, 1), float32], %v0_2_conv_0_0_bias: Tensor[(96), float32], %v0_2_conv_1_0_weight: Tensor[(96, 1, 3, 3), float32], %v0_2_conv_1_0_bias: Tensor[(96), float32], %v0_2_conv_2_weight: Tensor[(24, 96, 1, 1), float32], %v0_2_conv_2_bias: Tensor[(24), float32], %v0_3_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_3_conv_0_0_bias: Tensor[(144), float32], %v0_3_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_3_conv_1_0_bias: Tensor[(144), float32], %v0_3_conv_2_weight: Tensor[(24, 144, 1, 1), float32], %v0_3_conv_2_bias: Tensor[(24), float32], %v0_4_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_4_conv_0_0_bias: Tensor[(144), float32], %v0_4_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_4_conv_1_0_bias: Tensor[(144), float32], %v0_4_conv_2_weight: Tensor[(32, 144, 1, 1), float32], %v0_4_conv_2_bias: Tensor[(32), float32], %v0_5_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_5_conv_0_0_bias: Tensor[(192), float32], %v0_5_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_5_conv_1_0_bias: Tensor[(192), float32], %v0_5_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_5_conv_2_bias: Tensor[(32), float32], %v0_6_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_6_conv_0_0_bias: Tensor[(192), float32], %v0_6_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_6_conv_1_0_bias: Tensor[(192), float32], %v0_6_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_6_conv_2_bias: Tensor[(32), float32], %v0_7_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_7_conv_0_0_bias: Tensor[(192), float32], %v0_7_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_7_conv_1_0_bias: Tensor[(192), float32], %v0_7_conv_2_weight: Tensor[(64, 192, 1, 1), float32], %v0_7_conv_2_bias: Tensor[(64), float32], %v0_8_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_8_conv_0_0_bias: Tensor[(384), float32], %v0_8_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_8_conv_1_0_bias: Tensor[(384), float32], %v0_8_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_8_conv_2_bias: Tensor[(64), float32], %v0_9_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_9_conv_0_0_bias: Tensor[(384), float32], %v0_9_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_9_conv_1_0_bias: Tensor[(384), float32], %v0_9_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_9_conv_2_bias: Tensor[(64), float32], %v0_10_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_10_conv_0_0_bias: Tensor[(384), float32], %v0_10_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_10_conv_1_0_bias: Tensor[(384), float32], %v0_10_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_10_conv_2_bias: Tensor[(64), float32], %v0_11_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_11_conv_0_0_bias: Tensor[(384), float32], %v0_11_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_11_conv_1_0_bias: Tensor[(384), float32], %v0_11_conv_2_weight: Tensor[(96, 384, 1, 1), float32], %v0_11_conv_2_bias: Tensor[(96), float32], %v0_12_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_12_conv_0_0_bias: Tensor[(576), float32], %v0_12_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_12_conv_1_0_bias: Tensor[(576), float32], %v0_12_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_12_conv_2_bias: Tensor[(96), float32], %v0_13_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_13_conv_0_0_bias: Tensor[(576), float32], %v0_13_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_13_conv_1_0_bias: Tensor[(576), float32], %v0_13_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_13_conv_2_bias: Tensor[(96), float32], %v0_14_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_14_conv_0_0_bias: Tensor[(576), float32], %v0_14_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_14_conv_1_0_bias: Tensor[(576), float32], %v0_14_conv_2_weight: Tensor[(160, 576, 1, 1), float32], %v0_14_conv_2_bias: Tensor[(160), float32], %v0_15_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_15_conv_0_0_bias: Tensor[(960), float32], %v0_15_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_15_conv_1_0_bias: Tensor[(960), float32], %v0_15_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_15_conv_2_bias: Tensor[(160), float32], %v0_16_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_16_conv_0_0_bias: Tensor[(960), float32], %v0_16_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_16_conv_1_0_bias: Tensor[(960), float32], %v0_16_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_16_conv_2_bias: Tensor[(160), float32], %v0_17_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_17_conv_0_0_bias: Tensor[(960), float32], %v0_17_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_17_conv_1_0_bias: Tensor[(960), float32], %v0_17_conv_2_weight: Tensor[(320, 960, 1, 1), float32], %v0_17_conv_2_bias: Tensor[(320), float32], %v0_18_0_weight: Tensor[(1280, 320, 1, 1), float32], %v0_18_0_bias: Tensor[(1280), float32], %v3_1_weight: Tensor[(10, 1280), float32], %v3_1_bias: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 1280), float32], Tensor[(1280), float32], Tensor[(1280, 320, 1, 1), float32], Tensor[(320), float32], Tensor[(320, 960, 1, 1), float32], Tensor[(960), float32], Tensor[(960, 1, 3, 3), float32], Tensor[(960), float32], Tensor[(960, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 960, 1, 1), float32], Tensor[(960), float32], Tensor[(960, 1, 3, 3), float32], Tensor[(960), float32], Tensor[(960, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 960, 1, 1), float32], Tensor[(960), float32], Tensor[(960, 1, 3, 3), float32], Tensor[(960), float32], Tensor[(960, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 3, 3), float32], Tensor[(96), float32], Tensor[(96, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 1, 3, 3), float32], Tensor[(32), float32], Tensor[(32, 3, 3, 3), float32]) {
  %0 = nn.conv2d(%input, %v0_0_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %1 = nn.bias_add(%0, %v0_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %2 = clip(%1, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %3 = reshape(%v0_1_conv_0_0_weight, newshape=[32, 1, 3, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %4 = nn.conv2d(%2, %3, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %5 = nn.bias_add(%4, %v0_1_conv_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %6 = clip(%5, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %7 = nn.conv2d(%6, %v0_1_conv_1_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %8 = nn.bias_add(%7, %v0_1_conv_1_bias) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %9 = nn.conv2d(%8, %v0_2_conv_0_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %10 = nn.bias_add(%9, %v0_2_conv_0_0_bias) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %11 = clip(%10, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %12 = reshape(%v0_2_conv_1_0_weight, newshape=[96, 1, 3, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %13 = nn.conv2d(%11, %12, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %14 = nn.bias_add(%13, %v0_2_conv_1_0_bias) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %15 = clip(%14, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %16 = nn.conv2d(%15, %v0_2_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %17 = nn.bias_add(%16, %v0_2_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %18 = nn.conv2d(%17, %v0_3_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %19 = nn.bias_add(%18, %v0_3_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %20 = clip(%19, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %21 = reshape(%v0_3_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %22 = nn.conv2d(%20, %21, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %23 = nn.bias_add(%22, %v0_3_conv_1_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %24 = clip(%23, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %25 = nn.conv2d(%24, %v0_3_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %26 = nn.bias_add(%25, %v0_3_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %27 = add(%17, %26) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %28 = nn.conv2d(%27, %v0_4_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %29 = nn.bias_add(%28, %v0_4_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %31 = reshape(%v0_4_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %32 = nn.conv2d(%30, %31, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %33 = nn.bias_add(%32, %v0_4_conv_1_0_bias) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %34 = clip(%33, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %35 = nn.conv2d(%34, %v0_4_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %36 = nn.bias_add(%35, %v0_4_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %37 = nn.conv2d(%36, %v0_5_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %38 = nn.bias_add(%37, %v0_5_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %39 = clip(%38, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %40 = reshape(%v0_5_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %41 = nn.conv2d(%39, %40, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %42 = nn.bias_add(%41, %v0_5_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %43 = clip(%42, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %44 = nn.conv2d(%43, %v0_5_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %45 = nn.bias_add(%44, %v0_5_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %46 = add(%36, %45) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %47 = nn.conv2d(%46, %v0_6_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %48 = nn.bias_add(%47, %v0_6_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %49 = clip(%48, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %50 = reshape(%v0_6_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %51 = nn.conv2d(%49, %50, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %52 = nn.bias_add(%51, %v0_6_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %54 = nn.conv2d(%53, %v0_6_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %55 = nn.bias_add(%54, %v0_6_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %56 = add(%46, %55) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %57 = nn.conv2d(%56, %v0_7_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %58 = nn.bias_add(%57, %v0_7_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %59 = clip(%58, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %60 = reshape(%v0_7_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %61 = nn.conv2d(%59, %60, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %62 = nn.bias_add(%61, %v0_7_conv_1_0_bias) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %63 = clip(%62, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %64 = nn.conv2d(%63, %v0_7_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %65 = nn.bias_add(%64, %v0_7_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %66 = nn.conv2d(%65, %v0_8_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %67 = nn.bias_add(%66, %v0_8_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %68 = clip(%67, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %69 = reshape(%v0_8_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %70 = nn.conv2d(%68, %69, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %71 = nn.bias_add(%70, %v0_8_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %72 = clip(%71, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %73 = nn.conv2d(%72, %v0_8_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %74 = nn.bias_add(%73, %v0_8_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %75 = add(%65, %74) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %76 = nn.conv2d(%75, %v0_9_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %77 = nn.bias_add(%76, %v0_9_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %78 = clip(%77, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %79 = reshape(%v0_9_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %80 = nn.conv2d(%78, %79, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %81 = nn.bias_add(%80, %v0_9_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %83 = nn.conv2d(%82, %v0_9_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %84 = nn.bias_add(%83, %v0_9_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %85 = add(%75, %84) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %86 = nn.conv2d(%85, %v0_10_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %87 = nn.bias_add(%86, %v0_10_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %89 = reshape(%v0_10_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %90 = nn.conv2d(%88, %89, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %91 = nn.bias_add(%90, %v0_10_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %92 = clip(%91, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %93 = nn.conv2d(%92, %v0_10_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %94 = nn.bias_add(%93, %v0_10_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %95 = add(%85, %94) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %96 = nn.conv2d(%95, %v0_11_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %97 = nn.bias_add(%96, %v0_11_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %98 = clip(%97, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %99 = reshape(%v0_11_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %100 = nn.conv2d(%98, %99, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %101 = nn.bias_add(%100, %v0_11_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %102 = clip(%101, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %103 = nn.conv2d(%102, %v0_11_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %104 = nn.bias_add(%103, %v0_11_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %105 = nn.conv2d(%104, %v0_12_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %106 = nn.bias_add(%105, %v0_12_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %107 = clip(%106, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %108 = reshape(%v0_12_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %109 = nn.conv2d(%107, %108, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %110 = nn.bias_add(%109, %v0_12_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %111 = clip(%110, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %112 = nn.conv2d(%111, %v0_12_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %113 = nn.bias_add(%112, %v0_12_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %114 = add(%104, %113) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %115 = nn.conv2d(%114, %v0_13_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %116 = nn.bias_add(%115, %v0_13_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %118 = reshape(%v0_13_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %119 = nn.conv2d(%117, %118, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %120 = nn.bias_add(%119, %v0_13_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %121 = clip(%120, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %122 = nn.conv2d(%121, %v0_13_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %123 = nn.bias_add(%122, %v0_13_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %124 = add(%114, %123) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %125 = nn.conv2d(%124, %v0_14_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %126 = nn.bias_add(%125, %v0_14_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %127 = clip(%126, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %128 = reshape(%v0_14_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %129 = nn.conv2d(%127, %128, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %130 = nn.bias_add(%129, %v0_14_conv_1_0_bias) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %131 = clip(%130, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %132 = nn.conv2d(%131, %v0_14_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %133 = nn.bias_add(%132, %v0_14_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %134 = nn.conv2d(%133, %v0_15_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %135 = nn.bias_add(%134, %v0_15_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %136 = clip(%135, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %137 = reshape(%v0_15_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %138 = nn.conv2d(%136, %137, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %139 = nn.bias_add(%138, %v0_15_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %140 = clip(%139, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %141 = nn.conv2d(%140, %v0_15_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = nn.bias_add(%141, %v0_15_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %143 = add(%133, %142) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = nn.conv2d(%143, %v0_16_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %145 = nn.bias_add(%144, %v0_16_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %146 = clip(%145, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %147 = reshape(%v0_16_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %148 = nn.conv2d(%146, %147, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %149 = nn.bias_add(%148, %v0_16_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %150 = clip(%149, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %151 = nn.conv2d(%150, %v0_16_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %152 = nn.bias_add(%151, %v0_16_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %153 = add(%143, %152) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %154 = nn.conv2d(%153, %v0_17_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %155 = nn.bias_add(%154, %v0_17_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %156 = clip(%155, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %157 = reshape(%v0_17_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %158 = nn.conv2d(%156, %157, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %159 = nn.bias_add(%158, %v0_17_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %160 = clip(%159, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %161 = nn.conv2d(%160, %v0_17_conv_2_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %162 = nn.bias_add(%161, %v0_17_conv_2_bias) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %163 = nn.conv2d(%162, %v0_18_0_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %164 = nn.bias_add(%163, %v0_18_0_bias) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %165 = clip(%164, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %166 = mean(%165, axis=[-1]) /* ty=Tensor[(1, 1280, 4), float32] */;
  %167 = mean(%166, axis=[-1]) /* ty=Tensor[(1, 1280), float32] */;
  %168 = reshape(%167, newshape=[0, -1]) /* ty=Tensor[(1, 1280), float32] */;
  %169 = nn.dense(%168, %v3_1_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %170 = nn.bias_add(%169, %v3_1_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %171 = nn.log_softmax(%170) /* ty=Tensor[(1, 10), float32] */;
  %172 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %173 = negative(%172) /* ty=float32 */;
  %174 = multiply(%173, %label) /* ty=Tensor[(1, 10), float32] */;
  %175 = sum(%174, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %176 = exp(%171) /* ty=Tensor[(1, 10), float32] */;
  %177 = multiply(%175, %176) /* ty=Tensor[(1, 10), float32] */;
  %178 = subtract(%174, %177) /* ty=Tensor[(1, 10), float32] */;
  %179 = transpose(%178, axes=None) /* ty=Tensor[(10, 1), float32] */;
  %180 = zeros(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %181 = multiply(%180, 0f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %182 = ones(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %183 = multiply(%182, 6f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %184 = nn.matmul(%178, %v3_1_weight, units=None) /* ty=Tensor[(1, 1280), float32] */;
  %185 = reshape(%184, newshape=[1, 1280]) /* ty=Tensor[(1, 1280), float32] */;
  %186 = expand_dims(%185, axis=2) /* ty=Tensor[(1, 1280, 1), float32] */;
  %187 = multiply(%186, 0.25f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1), float32] */;
  %188 = broadcast_to(%187, shape=[1, 1280, 4]) /* ty=Tensor[(1, 1280, 4), float32] */;
  %189 = expand_dims(%188, axis=3) /* ty=Tensor[(1, 1280, 4, 1), float32] */;
  %190 = multiply(%189, 0.25f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 1), float32] */;
  %191 = less(%183, %164) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %192 = zeros(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %193 = broadcast_to(%190, shape=[1, 1280, 4, 4]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %194 = less(%164, %181) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %195 = where(%191, %192, %193) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %196 = where(%194, %192, %195) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %197 = tile(%196, reps=[1, 320, 1, 1]) /* ty=Tensor[(1, 409600, 4, 4), float32] */;
  %198 = reshape(%162, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %199 = reshape(%197, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(409600, 1, 4, 4), float32] */;
  %200 = nn.conv2d(%198, %199, padding=[0, 0, 0, 0], groups=320, channels=409600, kernel_size=[4, 4]) /* ty=Tensor[(1, 409600, 1, 1), float32] */;
  %201 = reshape(%200, newshape=[1, 320, 1280, 1, 1]) /* ty=Tensor[(1, 320, 1280, 1, 1), float32] */;
  %202 = sum(%201, axis=[0]) /* ty=Tensor[(320, 1280, 1, 1), float32] */;
  %203 = nn.conv2d_transpose(%196, %v0_18_0_weight, channels=320, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %204 = tile(%203, reps=[1, 960, 1, 1]) /* ty=Tensor[(1, 307200, 4, 4), float32] */;
  %205 = reshape(%160, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %206 = reshape(%204, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(307200, 1, 4, 4), float32] */;
  %207 = nn.conv2d(%205, %206, padding=[0, 0, 0, 0], groups=960, channels=307200, kernel_size=[4, 4]) /* ty=Tensor[(1, 307200, 1, 1), float32] */;
  %208 = reshape(%207, newshape=[1, 960, 320, 1, 1]) /* ty=Tensor[(1, 960, 320, 1, 1), float32] */;
  %209 = sum(%208, axis=[0]) /* ty=Tensor[(960, 320, 1, 1), float32] */;
  %210 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %211 = multiply(%210, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %212 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %213 = multiply(%212, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %214 = less(%213, %159) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %215 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %216 = nn.conv2d_transpose(%203, %v0_17_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %217 = less(%159, %211) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %218 = where(%214, %215, %216) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %219 = where(%217, %215, %218) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %220 = tile(%219, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %221 = reshape(%156, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %222 = reshape(%220, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %223 = nn.conv2d(%221, %222, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[4, 4]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %224 = reshape(%223, newshape=[1, 1, 960, 3, 3]) /* ty=Tensor[(1, 1, 960, 3, 3), float32] */;
  %225 = sum(%224, axis=[0]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %226 = transpose(%225, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %227 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %228 = multiply(%227, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %229 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %230 = multiply(%229, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %231 = less(%230, %155) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %232 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %233 = nn.conv2d_transpose(%219, %157, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %234 = less(%155, %228) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %235 = where(%231, %232, %233) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %236 = where(%234, %232, %235) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %237 = tile(%236, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %238 = reshape(%153, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %239 = reshape(%237, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %240 = nn.conv2d(%238, %239, padding=[0, 0, 0, 0], groups=160, channels=153600, kernel_size=[4, 4]) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %241 = reshape(%240, newshape=[1, 160, 960, 1, 1]) /* ty=Tensor[(1, 160, 960, 1, 1), float32] */;
  %242 = sum(%241, axis=[0]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %243 = nn.conv2d_transpose(%236, %v0_17_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %244 = tile(%243, reps=[1, 960, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %245 = reshape(%150, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %246 = reshape(%244, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %247 = nn.conv2d(%245, %246, padding=[0, 0, 0, 0], groups=960, channels=153600, kernel_size=[4, 4]) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %248 = reshape(%247, newshape=[1, 960, 160, 1, 1]) /* ty=Tensor[(1, 960, 160, 1, 1), float32] */;
  %249 = sum(%248, axis=[0]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %250 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %251 = multiply(%250, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %252 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %253 = multiply(%252, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %254 = less(%253, %149) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %255 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %256 = nn.conv2d_transpose(%243, %v0_16_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %257 = less(%149, %251) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %258 = where(%254, %255, %256) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %259 = where(%257, %255, %258) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %260 = tile(%259, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %261 = reshape(%146, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %262 = reshape(%260, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %263 = nn.conv2d(%261, %262, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[4, 4]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %264 = reshape(%263, newshape=[1, 1, 960, 3, 3]) /* ty=Tensor[(1, 1, 960, 3, 3), float32] */;
  %265 = sum(%264, axis=[0]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %266 = transpose(%265, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %267 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %268 = multiply(%267, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %269 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %270 = multiply(%269, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %271 = less(%270, %145) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %272 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %273 = nn.conv2d_transpose(%259, %147, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %274 = less(%145, %268) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %275 = where(%271, %272, %273) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %276 = where(%274, %272, %275) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %277 = tile(%276, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %278 = reshape(%143, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %279 = reshape(%277, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %280 = nn.conv2d(%278, %279, padding=[0, 0, 0, 0], groups=160, channels=153600, kernel_size=[4, 4]) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %281 = reshape(%280, newshape=[1, 160, 960, 1, 1]) /* ty=Tensor[(1, 160, 960, 1, 1), float32] */;
  %282 = sum(%281, axis=[0]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %283 = nn.conv2d_transpose(%276, %v0_16_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %284 = tile(%283, reps=[1, 960, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %285 = reshape(%140, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %286 = reshape(%284, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %287 = nn.conv2d(%285, %286, padding=[0, 0, 0, 0], groups=960, channels=153600, kernel_size=[4, 4]) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %288 = reshape(%287, newshape=[1, 960, 160, 1, 1]) /* ty=Tensor[(1, 960, 160, 1, 1), float32] */;
  %289 = sum(%288, axis=[0]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %290 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %291 = multiply(%290, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %292 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %293 = multiply(%292, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %294 = less(%293, %139) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %295 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %296 = nn.conv2d_transpose(%283, %v0_15_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %297 = less(%139, %291) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %298 = where(%294, %295, %296) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %299 = where(%297, %295, %298) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %300 = tile(%299, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %301 = reshape(%136, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %302 = reshape(%300, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %303 = nn.conv2d(%301, %302, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[4, 4]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %304 = reshape(%303, newshape=[1, 1, 960, 3, 3]) /* ty=Tensor[(1, 1, 960, 3, 3), float32] */;
  %305 = sum(%304, axis=[0]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %306 = transpose(%305, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %307 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %308 = multiply(%307, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %309 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %310 = multiply(%309, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %311 = less(%310, %135) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %312 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %313 = nn.conv2d_transpose(%299, %137, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %314 = less(%135, %308) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %315 = where(%311, %312, %313) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %316 = where(%314, %312, %315) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %317 = tile(%316, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %318 = reshape(%133, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %319 = reshape(%317, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %320 = nn.conv2d(%318, %319, padding=[0, 0, 0, 0], groups=160, channels=153600, kernel_size=[4, 4]) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %321 = reshape(%320, newshape=[1, 160, 960, 1, 1]) /* ty=Tensor[(1, 160, 960, 1, 1), float32] */;
  %322 = sum(%321, axis=[0]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %323 = nn.conv2d_transpose(%316, %v0_15_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %324 = tile(%323, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 92160, 4, 4), float32] */;
  %325 = reshape(%131, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %326 = reshape(%324, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(92160, 1, 4, 4), float32] */;
  %327 = nn.conv2d(%325, %326, padding=[0, 0, 0, 0], groups=576, channels=92160, kernel_size=[4, 4]) /* ty=Tensor[(1, 92160, 1, 1), float32] */;
  %328 = reshape(%327, newshape=[1, 576, 160, 1, 1]) /* ty=Tensor[(1, 576, 160, 1, 1), float32] */;
  %329 = sum(%328, axis=[0]) /* ty=Tensor[(576, 160, 1, 1), float32] */;
  %330 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %331 = multiply(%330, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %332 = ones(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %333 = multiply(%332, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %334 = less(%333, %130) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %335 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %336 = nn.conv2d_transpose(%323, %v0_14_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %337 = less(%130, %331) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %338 = where(%334, %335, %336) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %339 = where(%337, %335, %338) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %340 = tile(%339, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %341 = reshape(%127, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %342 = reshape(%340, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 4, 4), float32] */;
  %343 = nn.conv2d(%341, %342, padding=[1, 1, 1, 1], dilation=[2, 2], groups=576, channels=576, kernel_size=[4, 4]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %344 = reshape(%343, newshape=[1, 1, 576, 4, 4]) /* ty=Tensor[(1, 1, 576, 4, 4), float32] */;
  %345 = sum(%344, axis=[0]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %346 = transpose(%345, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 4, 4), float32] */;
  %347 = strided_slice(%346, begin=[0, 0, 0, 0], end=[576, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %348 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %349 = multiply(%348, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %350 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %351 = multiply(%350, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %352 = less(%351, %126) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %353 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %354 = nn.conv2d_transpose(%339, %128, channels=576, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %355 = less(%126, %349) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %356 = where(%352, %353, %354) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %357 = where(%355, %353, %356) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %358 = tile(%357, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %359 = reshape(%124, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %360 = reshape(%358, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %361 = nn.conv2d(%359, %360, padding=[0, 0, 0, 0], groups=96, channels=55296, kernel_size=[8, 8]) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %362 = reshape(%361, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %363 = sum(%362, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %364 = nn.conv2d_transpose(%357, %v0_14_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %365 = tile(%364, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %366 = reshape(%121, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %367 = reshape(%365, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %368 = nn.conv2d(%366, %367, padding=[0, 0, 0, 0], groups=576, channels=55296, kernel_size=[8, 8]) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %369 = reshape(%368, newshape=[1, 576, 96, 1, 1]) /* ty=Tensor[(1, 576, 96, 1, 1), float32] */;
  %370 = sum(%369, axis=[0]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %371 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %372 = multiply(%371, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %373 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %374 = multiply(%373, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %375 = less(%374, %120) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %376 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %377 = nn.conv2d_transpose(%364, %v0_13_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %378 = less(%120, %372) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %379 = where(%375, %376, %377) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %380 = where(%378, %376, %379) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %381 = tile(%380, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %382 = reshape(%117, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %383 = reshape(%381, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %384 = nn.conv2d(%382, %383, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[8, 8]) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %385 = reshape(%384, newshape=[1, 1, 576, 3, 3]) /* ty=Tensor[(1, 1, 576, 3, 3), float32] */;
  %386 = sum(%385, axis=[0]) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %387 = transpose(%386, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %388 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %389 = multiply(%388, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %390 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %391 = multiply(%390, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %392 = less(%391, %116) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %393 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %394 = nn.conv2d_transpose(%380, %118, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %395 = less(%116, %389) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %396 = where(%392, %393, %394) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %397 = where(%395, %393, %396) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %398 = tile(%397, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %399 = reshape(%114, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %400 = reshape(%398, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %401 = nn.conv2d(%399, %400, padding=[0, 0, 0, 0], groups=96, channels=55296, kernel_size=[8, 8]) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %402 = reshape(%401, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %403 = sum(%402, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %404 = nn.conv2d_transpose(%397, %v0_13_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %405 = tile(%404, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %406 = reshape(%111, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %407 = reshape(%405, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %408 = nn.conv2d(%406, %407, padding=[0, 0, 0, 0], groups=576, channels=55296, kernel_size=[8, 8]) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %409 = reshape(%408, newshape=[1, 576, 96, 1, 1]) /* ty=Tensor[(1, 576, 96, 1, 1), float32] */;
  %410 = sum(%409, axis=[0]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %411 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %412 = multiply(%411, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %413 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %414 = multiply(%413, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %415 = less(%414, %110) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %416 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %417 = nn.conv2d_transpose(%404, %v0_12_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %418 = less(%110, %412) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %419 = where(%415, %416, %417) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %420 = where(%418, %416, %419) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %421 = tile(%420, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %422 = reshape(%107, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %423 = reshape(%421, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %424 = nn.conv2d(%422, %423, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[8, 8]) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %425 = reshape(%424, newshape=[1, 1, 576, 3, 3]) /* ty=Tensor[(1, 1, 576, 3, 3), float32] */;
  %426 = sum(%425, axis=[0]) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %427 = transpose(%426, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %428 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %429 = multiply(%428, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %430 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %431 = multiply(%430, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %432 = less(%431, %106) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %433 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %434 = nn.conv2d_transpose(%420, %108, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %435 = less(%106, %429) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %436 = where(%432, %433, %434) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %437 = where(%435, %433, %436) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %438 = tile(%437, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %439 = reshape(%104, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %440 = reshape(%438, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %441 = nn.conv2d(%439, %440, padding=[0, 0, 0, 0], groups=96, channels=55296, kernel_size=[8, 8]) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %442 = reshape(%441, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %443 = sum(%442, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %444 = nn.conv2d_transpose(%437, %v0_12_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %445 = tile(%444, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 36864, 8, 8), float32] */;
  %446 = reshape(%102, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %447 = reshape(%445, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 8, 8), float32] */;
  %448 = nn.conv2d(%446, %447, padding=[0, 0, 0, 0], groups=384, channels=36864, kernel_size=[8, 8]) /* ty=Tensor[(1, 36864, 1, 1), float32] */;
  %449 = reshape(%448, newshape=[1, 384, 96, 1, 1]) /* ty=Tensor[(1, 384, 96, 1, 1), float32] */;
  %450 = sum(%449, axis=[0]) /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %451 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %452 = multiply(%451, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %453 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %454 = multiply(%453, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %455 = less(%454, %101) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %456 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %457 = nn.conv2d_transpose(%444, %v0_11_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %458 = less(%101, %452) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %459 = where(%455, %456, %457) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %460 = where(%458, %456, %459) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %461 = tile(%460, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %462 = reshape(%98, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %463 = reshape(%461, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %464 = nn.conv2d(%462, %463, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[8, 8]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %465 = reshape(%464, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %466 = sum(%465, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %467 = transpose(%466, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %468 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %469 = multiply(%468, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %470 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %471 = multiply(%470, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %472 = less(%471, %97) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %473 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %474 = nn.conv2d_transpose(%460, %99, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %475 = less(%97, %469) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %476 = where(%472, %473, %474) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %477 = where(%475, %473, %476) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %478 = tile(%477, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %479 = reshape(%95, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %480 = reshape(%478, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %481 = nn.conv2d(%479, %480, padding=[0, 0, 0, 0], groups=64, channels=24576, kernel_size=[8, 8]) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %482 = reshape(%481, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %483 = sum(%482, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %484 = nn.conv2d_transpose(%477, %v0_11_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %485 = tile(%484, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %486 = reshape(%92, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %487 = reshape(%485, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %488 = nn.conv2d(%486, %487, padding=[0, 0, 0, 0], groups=384, channels=24576, kernel_size=[8, 8]) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %489 = reshape(%488, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %490 = sum(%489, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %491 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %492 = multiply(%491, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %493 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %494 = multiply(%493, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %495 = less(%494, %91) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %496 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %497 = nn.conv2d_transpose(%484, %v0_10_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %498 = less(%91, %492) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %499 = where(%495, %496, %497) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %500 = where(%498, %496, %499) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %501 = tile(%500, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %502 = reshape(%88, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %503 = reshape(%501, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %504 = nn.conv2d(%502, %503, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[8, 8]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %505 = reshape(%504, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %506 = sum(%505, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %507 = transpose(%506, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %508 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %509 = multiply(%508, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %510 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %511 = multiply(%510, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %512 = less(%511, %87) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %513 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %514 = nn.conv2d_transpose(%500, %89, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %515 = less(%87, %509) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %516 = where(%512, %513, %514) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %517 = where(%515, %513, %516) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %518 = tile(%517, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %519 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %520 = reshape(%518, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %521 = nn.conv2d(%519, %520, padding=[0, 0, 0, 0], groups=64, channels=24576, kernel_size=[8, 8]) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %522 = reshape(%521, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %523 = sum(%522, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %524 = nn.conv2d_transpose(%517, %v0_10_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %525 = tile(%524, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %526 = reshape(%82, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %527 = reshape(%525, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %528 = nn.conv2d(%526, %527, padding=[0, 0, 0, 0], groups=384, channels=24576, kernel_size=[8, 8]) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %529 = reshape(%528, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %530 = sum(%529, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %531 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %532 = multiply(%531, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %533 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %534 = multiply(%533, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %535 = less(%534, %81) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %536 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %537 = nn.conv2d_transpose(%524, %v0_9_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %538 = less(%81, %532) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %539 = where(%535, %536, %537) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %540 = where(%538, %536, %539) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %541 = tile(%540, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %542 = reshape(%78, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %543 = reshape(%541, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %544 = nn.conv2d(%542, %543, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[8, 8]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %545 = reshape(%544, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %546 = sum(%545, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %547 = transpose(%546, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %548 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %549 = multiply(%548, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %550 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %551 = multiply(%550, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %552 = less(%551, %77) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %553 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %554 = nn.conv2d_transpose(%540, %79, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %555 = less(%77, %549) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %556 = where(%552, %553, %554) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %557 = where(%555, %553, %556) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %558 = tile(%557, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %559 = reshape(%75, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %560 = reshape(%558, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %561 = nn.conv2d(%559, %560, padding=[0, 0, 0, 0], groups=64, channels=24576, kernel_size=[8, 8]) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %562 = reshape(%561, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %563 = sum(%562, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %564 = nn.conv2d_transpose(%557, %v0_9_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %565 = tile(%564, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %566 = reshape(%72, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %567 = reshape(%565, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %568 = nn.conv2d(%566, %567, padding=[0, 0, 0, 0], groups=384, channels=24576, kernel_size=[8, 8]) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %569 = reshape(%568, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %570 = sum(%569, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %571 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %572 = multiply(%571, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %573 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %574 = multiply(%573, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %575 = less(%574, %71) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %576 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %577 = nn.conv2d_transpose(%564, %v0_8_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %578 = less(%71, %572) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %579 = where(%575, %576, %577) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %580 = where(%578, %576, %579) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %581 = tile(%580, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %582 = reshape(%68, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %583 = reshape(%581, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %584 = nn.conv2d(%582, %583, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[8, 8]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %585 = reshape(%584, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %586 = sum(%585, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %587 = transpose(%586, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %588 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %589 = multiply(%588, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %590 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %591 = multiply(%590, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %592 = less(%591, %67) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %593 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %594 = nn.conv2d_transpose(%580, %69, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %595 = less(%67, %589) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %596 = where(%592, %593, %594) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %597 = where(%595, %593, %596) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %598 = tile(%597, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %599 = reshape(%65, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %600 = reshape(%598, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %601 = nn.conv2d(%599, %600, padding=[0, 0, 0, 0], groups=64, channels=24576, kernel_size=[8, 8]) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %602 = reshape(%601, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %603 = sum(%602, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %604 = nn.conv2d_transpose(%597, %v0_8_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %605 = tile(%604, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 12288, 8, 8), float32] */;
  %606 = reshape(%63, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %607 = reshape(%605, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 8, 8), float32] */;
  %608 = nn.conv2d(%606, %607, padding=[0, 0, 0, 0], groups=192, channels=12288, kernel_size=[8, 8]) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %609 = reshape(%608, newshape=[1, 192, 64, 1, 1]) /* ty=Tensor[(1, 192, 64, 1, 1), float32] */;
  %610 = sum(%609, axis=[0]) /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %611 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %612 = multiply(%611, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %613 = ones(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %614 = multiply(%613, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %615 = less(%614, %62) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %616 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %617 = nn.conv2d_transpose(%604, %v0_7_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %618 = less(%62, %612) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %619 = where(%615, %616, %617) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %620 = where(%618, %616, %619) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %621 = tile(%620, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %622 = reshape(%59, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %623 = reshape(%621, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 8, 8), float32] */;
  %624 = nn.conv2d(%622, %623, padding=[1, 1, 1, 1], dilation=[2, 2], groups=192, channels=192, kernel_size=[8, 8]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %625 = reshape(%624, newshape=[1, 1, 192, 4, 4]) /* ty=Tensor[(1, 1, 192, 4, 4), float32] */;
  %626 = sum(%625, axis=[0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %627 = transpose(%626, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 4, 4), float32] */;
  %628 = strided_slice(%627, begin=[0, 0, 0, 0], end=[192, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %629 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %630 = multiply(%629, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %631 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %632 = multiply(%631, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %633 = less(%632, %58) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %634 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %635 = nn.conv2d_transpose(%620, %60, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %636 = less(%58, %630) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %637 = where(%633, %634, %635) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %638 = where(%636, %634, %637) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %639 = tile(%638, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %640 = reshape(%56, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %641 = reshape(%639, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %642 = nn.conv2d(%640, %641, padding=[0, 0, 0, 0], groups=32, channels=6144, kernel_size=[16, 16]) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %643 = reshape(%642, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %644 = sum(%643, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %645 = nn.conv2d_transpose(%638, %v0_7_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %646 = tile(%645, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %647 = reshape(%53, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %648 = reshape(%646, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %649 = nn.conv2d(%647, %648, padding=[0, 0, 0, 0], groups=192, channels=6144, kernel_size=[16, 16]) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %650 = reshape(%649, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), float32] */;
  %651 = sum(%650, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %652 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %653 = multiply(%652, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %654 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %655 = multiply(%654, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %656 = less(%655, %52) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %657 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %658 = nn.conv2d_transpose(%645, %v0_6_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %659 = less(%52, %653) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %660 = where(%656, %657, %658) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %661 = where(%659, %657, %660) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %662 = tile(%661, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %663 = reshape(%49, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %664 = reshape(%662, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 16, 16), float32] */;
  %665 = nn.conv2d(%663, %664, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[16, 16]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %666 = reshape(%665, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), float32] */;
  %667 = sum(%666, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %668 = transpose(%667, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %669 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %670 = multiply(%669, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %671 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %672 = multiply(%671, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %673 = less(%672, %48) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %674 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %675 = nn.conv2d_transpose(%661, %50, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %676 = less(%48, %670) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %677 = where(%673, %674, %675) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %678 = where(%676, %674, %677) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %679 = tile(%678, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %680 = reshape(%46, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %681 = reshape(%679, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %682 = nn.conv2d(%680, %681, padding=[0, 0, 0, 0], groups=32, channels=6144, kernel_size=[16, 16]) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %683 = reshape(%682, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %684 = sum(%683, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %685 = nn.conv2d_transpose(%678, %v0_6_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %686 = tile(%685, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %687 = reshape(%43, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %688 = reshape(%686, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %689 = nn.conv2d(%687, %688, padding=[0, 0, 0, 0], groups=192, channels=6144, kernel_size=[16, 16]) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %690 = reshape(%689, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), float32] */;
  %691 = sum(%690, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %692 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %693 = multiply(%692, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %694 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %695 = multiply(%694, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %696 = less(%695, %42) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %697 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %698 = nn.conv2d_transpose(%685, %v0_5_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %699 = less(%42, %693) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %700 = where(%696, %697, %698) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %701 = where(%699, %697, %700) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %702 = tile(%701, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %703 = reshape(%39, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %704 = reshape(%702, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 16, 16), float32] */;
  %705 = nn.conv2d(%703, %704, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[16, 16]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %706 = reshape(%705, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), float32] */;
  %707 = sum(%706, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %708 = transpose(%707, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %709 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %710 = multiply(%709, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %711 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %712 = multiply(%711, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %713 = less(%712, %38) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %714 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %715 = nn.conv2d_transpose(%701, %40, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %716 = less(%38, %710) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %717 = where(%713, %714, %715) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %718 = where(%716, %714, %717) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %719 = tile(%718, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %720 = reshape(%36, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %721 = reshape(%719, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %722 = nn.conv2d(%720, %721, padding=[0, 0, 0, 0], groups=32, channels=6144, kernel_size=[16, 16]) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %723 = reshape(%722, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %724 = sum(%723, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %725 = nn.conv2d_transpose(%718, %v0_5_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %726 = tile(%725, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 4608, 16, 16), float32] */;
  %727 = reshape(%34, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %728 = reshape(%726, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4608, 1, 16, 16), float32] */;
  %729 = nn.conv2d(%727, %728, padding=[0, 0, 0, 0], groups=144, channels=4608, kernel_size=[16, 16]) /* ty=Tensor[(1, 4608, 1, 1), float32] */;
  %730 = reshape(%729, newshape=[1, 144, 32, 1, 1]) /* ty=Tensor[(1, 144, 32, 1, 1), float32] */;
  %731 = sum(%730, axis=[0]) /* ty=Tensor[(144, 32, 1, 1), float32] */;
  %732 = zeros(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %733 = multiply(%732, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %734 = ones(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %735 = multiply(%734, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %736 = less(%735, %33) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %737 = zeros(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %738 = nn.conv2d_transpose(%725, %v0_4_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %739 = less(%33, %733) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %740 = where(%736, %737, %738) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %741 = where(%739, %737, %740) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %742 = tile(%741, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %743 = reshape(%30, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %744 = reshape(%742, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 16, 16), float32] */;
  %745 = nn.conv2d(%743, %744, padding=[1, 1, 1, 1], dilation=[2, 2], groups=144, channels=144, kernel_size=[16, 16]) /* ty=Tensor[(1, 144, 4, 4), float32] */;
  %746 = reshape(%745, newshape=[1, 1, 144, 4, 4]) /* ty=Tensor[(1, 1, 144, 4, 4), float32] */;
  %747 = sum(%746, axis=[0]) /* ty=Tensor[(1, 144, 4, 4), float32] */;
  %748 = transpose(%747, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 4, 4), float32] */;
  %749 = strided_slice(%748, begin=[0, 0, 0, 0], end=[144, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %750 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %751 = multiply(%750, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %752 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %753 = multiply(%752, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %754 = less(%753, %29) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %755 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %756 = nn.conv2d_transpose(%741, %31, channels=144, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %757 = less(%29, %751) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %758 = where(%754, %755, %756) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %759 = where(%757, %755, %758) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %760 = tile(%759, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 32, 32), float32] */;
  %761 = reshape(%27, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %762 = reshape(%760, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 32, 32), float32] */;
  %763 = nn.conv2d(%761, %762, padding=[0, 0, 0, 0], groups=24, channels=3456, kernel_size=[32, 32]) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %764 = reshape(%763, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %765 = sum(%764, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %766 = nn.conv2d_transpose(%759, %v0_4_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %767 = tile(%766, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 3456, 32, 32), float32] */;
  %768 = reshape(%24, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %769 = reshape(%767, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 32, 32), float32] */;
  %770 = nn.conv2d(%768, %769, padding=[0, 0, 0, 0], groups=144, channels=3456, kernel_size=[32, 32]) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %771 = reshape(%770, newshape=[1, 144, 24, 1, 1]) /* ty=Tensor[(1, 144, 24, 1, 1), float32] */;
  %772 = sum(%771, axis=[0]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %773 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %774 = multiply(%773, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %775 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %776 = multiply(%775, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %777 = less(%776, %23) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %778 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %779 = nn.conv2d_transpose(%766, %v0_3_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %780 = less(%23, %774) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %781 = where(%777, %778, %779) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %782 = where(%780, %778, %781) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %783 = tile(%782, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %784 = reshape(%20, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %785 = reshape(%783, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 32, 32), float32] */;
  %786 = nn.conv2d(%784, %785, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[32, 32]) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %787 = reshape(%786, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), float32] */;
  %788 = sum(%787, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %789 = transpose(%788, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %790 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %791 = multiply(%790, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %792 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %793 = multiply(%792, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %794 = less(%793, %19) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %795 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %796 = nn.conv2d_transpose(%782, %21, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %797 = less(%19, %791) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %798 = where(%794, %795, %796) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %799 = where(%797, %795, %798) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %800 = tile(%799, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 32, 32), float32] */;
  %801 = reshape(%17, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %802 = reshape(%800, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 32, 32), float32] */;
  %803 = nn.conv2d(%801, %802, padding=[0, 0, 0, 0], groups=24, channels=3456, kernel_size=[32, 32]) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %804 = reshape(%803, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %805 = sum(%804, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %806 = nn.conv2d_transpose(%799, %v0_3_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %807 = tile(%806, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 2304, 32, 32), float32] */;
  %808 = reshape(%15, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %809 = reshape(%807, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2304, 1, 32, 32), float32] */;
  %810 = nn.conv2d(%808, %809, padding=[0, 0, 0, 0], groups=96, channels=2304, kernel_size=[32, 32]) /* ty=Tensor[(1, 2304, 1, 1), float32] */;
  %811 = reshape(%810, newshape=[1, 96, 24, 1, 1]) /* ty=Tensor[(1, 96, 24, 1, 1), float32] */;
  %812 = sum(%811, axis=[0]) /* ty=Tensor[(96, 24, 1, 1), float32] */;
  %813 = zeros(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %814 = multiply(%813, 0f /* ty=float32 */) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %815 = ones(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %816 = multiply(%815, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %817 = less(%816, %14) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %818 = zeros(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %819 = nn.conv2d_transpose(%806, %v0_2_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %820 = less(%14, %814) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %821 = where(%817, %818, %819) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %822 = where(%820, %818, %821) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %823 = tile(%822, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %824 = reshape(%11, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %825 = reshape(%823, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 32, 32), float32] */;
  %826 = nn.conv2d(%824, %825, padding=[1, 1, 1, 1], dilation=[2, 2], groups=96, channels=96, kernel_size=[32, 32]) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %827 = reshape(%826, newshape=[1, 1, 96, 4, 4]) /* ty=Tensor[(1, 1, 96, 4, 4), float32] */;
  %828 = sum(%827, axis=[0]) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %829 = transpose(%828, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 4, 4), float32] */;
  %830 = strided_slice(%829, begin=[0, 0, 0, 0], end=[96, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %831 = zeros(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %832 = multiply(%831, 0f /* ty=float32 */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %833 = ones(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %834 = multiply(%833, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %835 = less(%834, %10) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %836 = zeros(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %837 = nn.conv2d_transpose(%822, %12, channels=96, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %838 = less(%10, %832) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %839 = where(%835, %836, %837) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %840 = where(%838, %836, %839) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %841 = tile(%840, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 64, 64), float32] */;
  %842 = reshape(%8, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %843 = reshape(%841, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 64, 64), float32] */;
  %844 = nn.conv2d(%842, %843, padding=[0, 0, 0, 0], groups=16, channels=1536, kernel_size=[64, 64]) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %845 = reshape(%844, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), float32] */;
  %846 = sum(%845, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %847 = nn.conv2d_transpose(%840, %v0_2_conv_0_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %848 = tile(%847, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 512, 64, 64), float32] */;
  %849 = reshape(%6, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %850 = reshape(%848, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(512, 1, 64, 64), float32] */;
  %851 = nn.conv2d(%849, %850, padding=[0, 0, 0, 0], groups=32, channels=512, kernel_size=[64, 64]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %852 = reshape(%851, newshape=[1, 32, 16, 1, 1]) /* ty=Tensor[(1, 32, 16, 1, 1), float32] */;
  %853 = sum(%852, axis=[0]) /* ty=Tensor[(32, 16, 1, 1), float32] */;
  %854 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %855 = multiply(%854, 0f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %856 = ones(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %857 = multiply(%856, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %858 = less(%857, %5) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %859 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %860 = nn.conv2d_transpose(%847, %v0_1_conv_1_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %861 = less(%5, %855) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %862 = where(%858, %859, %860) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %863 = where(%861, %859, %862) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %864 = tile(%863, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %865 = reshape(%2, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %866 = reshape(%864, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(32, 1, 64, 64), float32] */;
  %867 = nn.conv2d(%865, %866, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[64, 64]) /* ty=Tensor[(1, 32, 3, 3), float32] */;
  %868 = reshape(%867, newshape=[1, 1, 32, 3, 3]) /* ty=Tensor[(1, 1, 32, 3, 3), float32] */;
  %869 = sum(%868, axis=[0]) /* ty=Tensor[(1, 32, 3, 3), float32] */;
  %870 = transpose(%869, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %871 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %872 = multiply(%871, 0f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %873 = ones(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %874 = multiply(%873, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %875 = less(%874, %1) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %876 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %877 = nn.conv2d_transpose(%863, %3, channels=32, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=32, kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %878 = less(%1, %872) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %879 = where(%875, %876, %877) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %880 = where(%878, %876, %879) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %881 = tile(%880, reps=[1, 3, 1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %882 = reshape(%input, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %883 = reshape(%881, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 64, 64), float32] */;
  %884 = nn.conv2d(%882, %883, padding=[1, 1, 1, 1], dilation=[2, 2], groups=3, channels=96, kernel_size=[64, 64]) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %885 = reshape(%884, newshape=[1, 3, 32, 4, 4]) /* ty=Tensor[(1, 3, 32, 4, 4), float32] */;
  %886 = sum(%885, axis=[0]) /* ty=Tensor[(3, 32, 4, 4), float32] */;
  %887 = transpose(%886, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 3, 4, 4), float32] */;
  %888 = nn.cross_entropy_with_logits(%171, %label) /* ty=float32 */;
  %889 = sum(%178, axis=[-1], exclude=True) /* ty=Tensor[(10), float32] */;
  %890 = nn.matmul(%179, %168, units=None) /* ty=Tensor[(10, 1280), float32] */;
  %891 = sum(%196, axis=[1], exclude=True) /* ty=Tensor[(1280), float32] */;
  %892 = transpose(%202, axes=[1, 0, 2, 3]) /* ty=Tensor[(1280, 320, 1, 1), float32] */;
  %893 = sum(%203, axis=[1], exclude=True) /* ty=Tensor[(320), float32] */;
  %894 = transpose(%209, axes=[1, 0, 2, 3]) /* ty=Tensor[(320, 960, 1, 1), float32] */;
  %895 = sum(%219, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %896 = reshape(%226, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %897 = sum(%236, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %898 = transpose(%242, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %899 = sum(%243, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %900 = transpose(%249, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %901 = sum(%259, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %902 = reshape(%266, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %903 = sum(%276, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %904 = transpose(%282, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %905 = sum(%283, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %906 = transpose(%289, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %907 = sum(%299, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %908 = reshape(%306, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %909 = sum(%316, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %910 = transpose(%322, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %911 = sum(%323, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %912 = transpose(%329, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %913 = sum(%339, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %914 = reshape(%347, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %915 = sum(%357, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %916 = transpose(%363, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %917 = sum(%364, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %918 = transpose(%370, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %919 = sum(%380, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %920 = reshape(%387, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %921 = sum(%397, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %922 = transpose(%403, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %923 = sum(%404, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %924 = transpose(%410, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %925 = sum(%420, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %926 = reshape(%427, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %927 = sum(%437, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %928 = transpose(%443, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %929 = sum(%444, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %930 = transpose(%450, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %931 = sum(%460, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %932 = reshape(%467, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %933 = sum(%477, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %934 = transpose(%483, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %935 = sum(%484, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %936 = transpose(%490, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %937 = sum(%500, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %938 = reshape(%507, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %939 = sum(%517, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %940 = transpose(%523, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %941 = sum(%524, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %942 = transpose(%530, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %943 = sum(%540, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %944 = reshape(%547, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %945 = sum(%557, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %946 = transpose(%563, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %947 = sum(%564, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %948 = transpose(%570, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %949 = sum(%580, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %950 = reshape(%587, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %951 = sum(%597, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %952 = transpose(%603, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %953 = sum(%604, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %954 = transpose(%610, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %955 = sum(%620, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %956 = reshape(%628, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %957 = sum(%638, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %958 = transpose(%644, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %959 = sum(%645, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %960 = transpose(%651, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %961 = sum(%661, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %962 = reshape(%668, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %963 = sum(%678, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %964 = transpose(%684, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %965 = sum(%685, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %966 = transpose(%691, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %967 = sum(%701, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %968 = reshape(%708, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %969 = sum(%718, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %970 = transpose(%724, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %971 = sum(%725, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %972 = transpose(%731, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %973 = sum(%741, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %974 = reshape(%749, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %975 = sum(%759, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %976 = transpose(%765, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %977 = sum(%766, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %978 = transpose(%772, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %979 = sum(%782, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %980 = reshape(%789, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %981 = sum(%799, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %982 = transpose(%805, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %983 = sum(%806, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %984 = transpose(%812, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 96, 1, 1), float32] */;
  %985 = sum(%822, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %986 = reshape(%830, newshape=[96, 1, 3, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %987 = sum(%840, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %988 = transpose(%846, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %989 = sum(%847, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %990 = transpose(%853, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 32, 1, 1), float32] */;
  %991 = sum(%863, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %992 = reshape(%870, newshape=[32, 1, 3, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %993 = sum(%880, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %994 = strided_slice(%887, begin=[0, 0, 0, 0], end=[32, 3, 3, 3], strides=[1], axes=None) /* ty=Tensor[(32, 3, 3, 3), float32] */;

}