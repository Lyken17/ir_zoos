fn (%input: Tensor[(1, 3, 128, 128), float32], %v0_0_0_weight: Tensor[(32, 3, 3, 3), float32], %v0_0_0_bias: Tensor[(32), float32], %v0_1_conv_0_0_weight: Tensor[(32, 1, 3, 3), float32], %v0_1_conv_0_0_bias: Tensor[(32), float32], %v0_1_conv_1_weight: Tensor[(16, 32, 1, 1), float32], %v0_1_conv_1_bias: Tensor[(16), float32], %v0_2_conv_0_0_weight: Tensor[(96, 16, 1, 1), float32], %v0_2_conv_0_0_bias: Tensor[(96), float32], %v0_2_conv_1_0_weight: Tensor[(96, 1, 3, 3), float32], %v0_2_conv_1_0_bias: Tensor[(96), float32], %v0_2_conv_2_weight: Tensor[(24, 96, 1, 1), float32], %v0_2_conv_2_bias: Tensor[(24), float32], %v0_3_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_3_conv_0_0_bias: Tensor[(144), float32], %v0_3_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_3_conv_1_0_bias: Tensor[(144), float32], %v0_3_conv_2_weight: Tensor[(24, 144, 1, 1), float32], %v0_3_conv_2_bias: Tensor[(24), float32], %v0_4_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_4_conv_0_0_bias: Tensor[(144), float32], %v0_4_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_4_conv_1_0_bias: Tensor[(144), float32], %v0_4_conv_2_weight: Tensor[(32, 144, 1, 1), float32], %v0_4_conv_2_bias: Tensor[(32), float32], %v0_5_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_5_conv_0_0_bias: Tensor[(192), float32], %v0_5_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_5_conv_1_0_bias: Tensor[(192), float32], %v0_5_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_5_conv_2_bias: Tensor[(32), float32], %v0_6_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_6_conv_0_0_bias: Tensor[(192), float32], %v0_6_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_6_conv_1_0_bias: Tensor[(192), float32], %v0_6_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_6_conv_2_bias: Tensor[(32), float32], %v0_7_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_7_conv_0_0_bias: Tensor[(192), float32], %v0_7_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_7_conv_1_0_bias: Tensor[(192), float32], %v0_7_conv_2_weight: Tensor[(64, 192, 1, 1), float32], %v0_7_conv_2_bias: Tensor[(64), float32], %v0_8_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_8_conv_0_0_bias: Tensor[(384), float32], %v0_8_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_8_conv_1_0_bias: Tensor[(384), float32], %v0_8_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_8_conv_2_bias: Tensor[(64), float32], %v0_9_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_9_conv_0_0_bias: Tensor[(384), float32], %v0_9_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_9_conv_1_0_bias: Tensor[(384), float32], %v0_9_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_9_conv_2_bias: Tensor[(64), float32], %v0_10_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_10_conv_0_0_bias: Tensor[(384), float32], %v0_10_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_10_conv_1_0_bias: Tensor[(384), float32], %v0_10_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_10_conv_2_bias: Tensor[(64), float32], %v0_11_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_11_conv_0_0_bias: Tensor[(384), float32], %v0_11_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_11_conv_1_0_bias: Tensor[(384), float32], %v0_11_conv_2_weight: Tensor[(96, 384, 1, 1), float32], %v0_11_conv_2_bias: Tensor[(96), float32], %v0_12_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_12_conv_0_0_bias: Tensor[(576), float32], %v0_12_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_12_conv_1_0_bias: Tensor[(576), float32], %v0_12_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_12_conv_2_bias: Tensor[(96), float32], %v0_13_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_13_conv_0_0_bias: Tensor[(576), float32], %v0_13_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_13_conv_1_0_bias: Tensor[(576), float32], %v0_13_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_13_conv_2_bias: Tensor[(96), float32], %v0_14_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_14_conv_0_0_bias: Tensor[(576), float32], %v0_14_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_14_conv_1_0_bias: Tensor[(576), float32], %v0_14_conv_2_weight: Tensor[(160, 576, 1, 1), float32], %v0_14_conv_2_bias: Tensor[(160), float32], %v0_15_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_15_conv_0_0_bias: Tensor[(960), float32], %v0_15_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_15_conv_1_0_bias: Tensor[(960), float32], %v0_15_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_15_conv_2_bias: Tensor[(160), float32], %v0_16_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_16_conv_0_0_bias: Tensor[(960), float32], %v0_16_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_16_conv_1_0_bias: Tensor[(960), float32], %v0_16_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_16_conv_2_bias: Tensor[(160), float32], %v0_17_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_17_conv_0_0_bias: Tensor[(960), float32], %v0_17_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_17_conv_1_0_bias: Tensor[(960), float32], %v0_17_conv_2_weight: Tensor[(320, 960, 1, 1), float32], %v0_17_conv_2_bias: Tensor[(320), float32], %v0_18_0_weight: Tensor[(1280, 320, 1, 1), float32], %v0_18_0_bias: Tensor[(1280), float32], %v3_1_weight: Tensor[(10, 1280), float32], %v3_1_bias: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 1280), float32], Tensor[(1280), float32], Tensor[(1280, 320, 1, 1), float32], Tensor[(320), float32], Tensor[(320, 960, 1, 1), float32], Tensor[(960), float32], Tensor[(960, 1, 3, 3), float32], Tensor[(960), float32], Tensor[(960, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 960, 1, 1), float32], Tensor[(960), float32], Tensor[(960, 1, 3, 3), float32], Tensor[(960), float32], Tensor[(960, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 960, 1, 1), float32], Tensor[(960), float32], Tensor[(960, 1, 3, 3), float32], Tensor[(960), float32], Tensor[(960, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 3, 3), float32], Tensor[(96), float32], Tensor[(96, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 1, 3, 3), float32], Tensor[(32), float32], Tensor[(32, 3, 3, 3), float32]) {
  %0 = nn.conv2d(%input, %v0_0_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %1 = nn.bias_add(%0, %v0_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %2 = clip(%1, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %3 = reshape(%v0_1_conv_0_0_weight, newshape=[32, 1, 3, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %4 = nn.conv2d(%2, %3, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %5 = nn.bias_add(%4, %v0_1_conv_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %6 = clip(%5, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %7 = nn.conv2d(%6, %v0_1_conv_1_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %8 = nn.bias_add(%7, %v0_1_conv_1_bias) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %9 = nn.conv2d(%8, %v0_2_conv_0_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %10 = nn.bias_add(%9, %v0_2_conv_0_0_bias) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %11 = clip(%10, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %12 = reshape(%v0_2_conv_1_0_weight, newshape=[96, 1, 3, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %13 = nn.conv2d(%11, %12, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %14 = nn.bias_add(%13, %v0_2_conv_1_0_bias) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %15 = clip(%14, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %16 = nn.conv2d(%15, %v0_2_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %17 = nn.bias_add(%16, %v0_2_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %18 = nn.conv2d(%17, %v0_3_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %19 = nn.bias_add(%18, %v0_3_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %20 = clip(%19, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %21 = reshape(%v0_3_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %22 = nn.conv2d(%20, %21, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %23 = nn.bias_add(%22, %v0_3_conv_1_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %24 = clip(%23, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %25 = nn.conv2d(%24, %v0_3_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %26 = nn.bias_add(%25, %v0_3_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %27 = add(%17, %26) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %28 = nn.conv2d(%27, %v0_4_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %29 = nn.bias_add(%28, %v0_4_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %31 = reshape(%v0_4_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %32 = nn.conv2d(%30, %31, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %33 = nn.bias_add(%32, %v0_4_conv_1_0_bias) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %34 = clip(%33, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %35 = nn.conv2d(%34, %v0_4_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %36 = nn.bias_add(%35, %v0_4_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %37 = nn.conv2d(%36, %v0_5_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %38 = nn.bias_add(%37, %v0_5_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %39 = clip(%38, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %40 = reshape(%v0_5_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %41 = nn.conv2d(%39, %40, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %42 = nn.bias_add(%41, %v0_5_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %43 = clip(%42, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %44 = nn.conv2d(%43, %v0_5_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %45 = nn.bias_add(%44, %v0_5_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %46 = add(%36, %45) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %47 = nn.conv2d(%46, %v0_6_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %48 = nn.bias_add(%47, %v0_6_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %49 = clip(%48, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %50 = reshape(%v0_6_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %51 = nn.conv2d(%49, %50, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %52 = nn.bias_add(%51, %v0_6_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %54 = nn.conv2d(%53, %v0_6_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %55 = nn.bias_add(%54, %v0_6_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %56 = add(%46, %55) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %57 = nn.conv2d(%56, %v0_7_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %58 = nn.bias_add(%57, %v0_7_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %59 = clip(%58, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %60 = reshape(%v0_7_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %61 = nn.conv2d(%59, %60, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %62 = nn.bias_add(%61, %v0_7_conv_1_0_bias) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %63 = clip(%62, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %64 = nn.conv2d(%63, %v0_7_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %65 = nn.bias_add(%64, %v0_7_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %66 = nn.conv2d(%65, %v0_8_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %67 = nn.bias_add(%66, %v0_8_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %68 = clip(%67, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %69 = reshape(%v0_8_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %70 = nn.conv2d(%68, %69, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %71 = nn.bias_add(%70, %v0_8_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %72 = clip(%71, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %73 = nn.conv2d(%72, %v0_8_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %74 = nn.bias_add(%73, %v0_8_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %75 = add(%65, %74) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %76 = nn.conv2d(%75, %v0_9_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %77 = nn.bias_add(%76, %v0_9_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %78 = clip(%77, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %79 = reshape(%v0_9_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %80 = nn.conv2d(%78, %79, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %81 = nn.bias_add(%80, %v0_9_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %83 = nn.conv2d(%82, %v0_9_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %84 = nn.bias_add(%83, %v0_9_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %85 = add(%75, %84) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %86 = nn.conv2d(%85, %v0_10_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %87 = nn.bias_add(%86, %v0_10_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %89 = reshape(%v0_10_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %90 = nn.conv2d(%88, %89, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %91 = nn.bias_add(%90, %v0_10_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %92 = clip(%91, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %93 = nn.conv2d(%92, %v0_10_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %94 = nn.bias_add(%93, %v0_10_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %95 = add(%85, %94) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %96 = nn.conv2d(%95, %v0_11_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %97 = nn.bias_add(%96, %v0_11_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %98 = clip(%97, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %99 = reshape(%v0_11_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %100 = nn.conv2d(%98, %99, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %101 = nn.bias_add(%100, %v0_11_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %102 = clip(%101, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %103 = nn.conv2d(%102, %v0_11_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %104 = nn.bias_add(%103, %v0_11_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %105 = nn.conv2d(%104, %v0_12_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %106 = nn.bias_add(%105, %v0_12_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %107 = clip(%106, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %108 = reshape(%v0_12_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %109 = nn.conv2d(%107, %108, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %110 = nn.bias_add(%109, %v0_12_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %111 = clip(%110, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %112 = nn.conv2d(%111, %v0_12_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %113 = nn.bias_add(%112, %v0_12_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %114 = add(%104, %113) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %115 = nn.conv2d(%114, %v0_13_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %116 = nn.bias_add(%115, %v0_13_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %118 = reshape(%v0_13_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %119 = nn.conv2d(%117, %118, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %120 = nn.bias_add(%119, %v0_13_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %121 = clip(%120, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %122 = nn.conv2d(%121, %v0_13_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %123 = nn.bias_add(%122, %v0_13_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %124 = add(%114, %123) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %125 = nn.conv2d(%124, %v0_14_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %126 = nn.bias_add(%125, %v0_14_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %127 = clip(%126, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %128 = reshape(%v0_14_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %129 = nn.conv2d(%127, %128, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %130 = nn.bias_add(%129, %v0_14_conv_1_0_bias) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %131 = clip(%130, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %132 = nn.conv2d(%131, %v0_14_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %133 = nn.bias_add(%132, %v0_14_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %134 = nn.conv2d(%133, %v0_15_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %135 = nn.bias_add(%134, %v0_15_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %136 = clip(%135, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %137 = reshape(%v0_15_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %138 = nn.conv2d(%136, %137, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %139 = nn.bias_add(%138, %v0_15_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %140 = clip(%139, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %141 = nn.conv2d(%140, %v0_15_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = nn.bias_add(%141, %v0_15_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %143 = add(%133, %142) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = nn.conv2d(%143, %v0_16_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %145 = nn.bias_add(%144, %v0_16_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %146 = clip(%145, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %147 = reshape(%v0_16_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %148 = nn.conv2d(%146, %147, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %149 = nn.bias_add(%148, %v0_16_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %150 = clip(%149, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %151 = nn.conv2d(%150, %v0_16_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %152 = nn.bias_add(%151, %v0_16_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %153 = add(%143, %152) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %154 = nn.conv2d(%153, %v0_17_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %155 = nn.bias_add(%154, %v0_17_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %156 = clip(%155, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %157 = reshape(%v0_17_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %158 = nn.conv2d(%156, %157, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %159 = nn.bias_add(%158, %v0_17_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %160 = clip(%159, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %161 = nn.conv2d(%160, %v0_17_conv_2_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %162 = nn.bias_add(%161, %v0_17_conv_2_bias) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %163 = nn.conv2d(%162, %v0_18_0_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %164 = nn.bias_add(%163, %v0_18_0_bias) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %165 = clip(%164, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %166 = nn.adaptive_avg_pool2d(%165, output_size=[1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %167 = reshape(%166, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %168 = squeeze(%167, axis=[2, 3]) /* ty=Tensor[(1, 1280), float32] */;
  %169 = nn.dense(%168, %v3_1_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %170 = nn.bias_add(%169, %v3_1_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %171 = nn.log_softmax(%170) /* ty=Tensor[(1, 10), float32] */;
  %172 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %173 = negative(%172) /* ty=float32 */;
  %174 = multiply(%173, %label) /* ty=Tensor[(1, 10), float32] */;
  %175 = sum(%174, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %176 = exp(%171) /* ty=Tensor[(1, 10), float32] */;
  %177 = multiply(%175, %176) /* ty=Tensor[(1, 10), float32] */;
  %178 = subtract(%174, %177) /* ty=Tensor[(1, 10), float32] */;
  %179 = transpose(%178, axes=None) /* ty=Tensor[(10, 1), float32] */;
  %180 = zeros(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %181 = multiply(%180, 0f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %182 = ones(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %183 = multiply(%182, 6f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %184 = nn.matmul(%178, %v3_1_weight, units=None) /* ty=Tensor[(1, 1280), float32] */;
  %185 = reshape(%184, newshape=[1, 1280, 1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %186 = less(%183, %164) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %187 = zeros(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %188 = nn.avg_pool2d_grad(%185, %165, pool_size=[4, 4], dilation=[]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %189 = less(%164, %181) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %190 = where(%186, %187, %188) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %191 = where(%189, %187, %190) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %192 = tile(%191, reps=[1, 320, 1, 1]) /* ty=Tensor[(1, 409600, 4, 4), float32] */;
  %193 = reshape(%162, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %194 = reshape(%192, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(409600, 1, 4, 4), float32] */;
  %195 = nn.conv2d(%193, %194, padding=[0, 0, 0, 0], groups=320) /* ty=Tensor[(1, 409600, 1, 1), float32] */;
  %196 = reshape(%195, newshape=[1, 320, 1280, 1, 1]) /* ty=Tensor[(1, 320, 1280, 1, 1), float32] */;
  %197 = sum(%196, axis=[0]) /* ty=Tensor[(320, 1280, 1, 1), float32] */;
  %198 = nn.conv2d_transpose(%191, %v0_18_0_weight, channels=320, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %199 = tile(%198, reps=[1, 960, 1, 1]) /* ty=Tensor[(1, 307200, 4, 4), float32] */;
  %200 = reshape(%160, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %201 = reshape(%199, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(307200, 1, 4, 4), float32] */;
  %202 = nn.conv2d(%200, %201, padding=[0, 0, 0, 0], groups=960) /* ty=Tensor[(1, 307200, 1, 1), float32] */;
  %203 = reshape(%202, newshape=[1, 960, 320, 1, 1]) /* ty=Tensor[(1, 960, 320, 1, 1), float32] */;
  %204 = sum(%203, axis=[0]) /* ty=Tensor[(960, 320, 1, 1), float32] */;
  %205 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %206 = multiply(%205, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %207 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %208 = multiply(%207, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %209 = less(%208, %159) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %210 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %211 = nn.conv2d_transpose(%198, %v0_17_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %212 = less(%159, %206) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %213 = where(%209, %210, %211) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %214 = where(%212, %210, %213) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %215 = tile(%214, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %216 = reshape(%156, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %217 = reshape(%215, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %218 = nn.conv2d(%216, %217, padding=[1, 1, 1, 1], groups=960) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %219 = reshape(%218, newshape=[1, 1, 960, 3, 3]) /* ty=Tensor[(1, 1, 960, 3, 3), float32] */;
  %220 = sum(%219, axis=[0]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %221 = transpose(%220, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %222 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %223 = multiply(%222, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %224 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %225 = multiply(%224, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %226 = less(%225, %155) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %227 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %228 = nn.conv2d_transpose(%214, %157, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %229 = less(%155, %223) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %230 = where(%226, %227, %228) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %231 = where(%229, %227, %230) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %232 = tile(%231, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %233 = reshape(%153, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %234 = reshape(%232, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %235 = nn.conv2d(%233, %234, padding=[0, 0, 0, 0], groups=160) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %236 = reshape(%235, newshape=[1, 160, 960, 1, 1]) /* ty=Tensor[(1, 160, 960, 1, 1), float32] */;
  %237 = sum(%236, axis=[0]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %238 = nn.conv2d_transpose(%231, %v0_17_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %239 = tile(%238, reps=[1, 960, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %240 = reshape(%150, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %241 = reshape(%239, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %242 = nn.conv2d(%240, %241, padding=[0, 0, 0, 0], groups=960) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %243 = reshape(%242, newshape=[1, 960, 160, 1, 1]) /* ty=Tensor[(1, 960, 160, 1, 1), float32] */;
  %244 = sum(%243, axis=[0]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %245 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %246 = multiply(%245, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %247 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %248 = multiply(%247, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %249 = less(%248, %149) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %250 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %251 = nn.conv2d_transpose(%238, %v0_16_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %252 = less(%149, %246) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %253 = where(%249, %250, %251) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %254 = where(%252, %250, %253) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %255 = tile(%254, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %256 = reshape(%146, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %257 = reshape(%255, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %258 = nn.conv2d(%256, %257, padding=[1, 1, 1, 1], groups=960) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %259 = reshape(%258, newshape=[1, 1, 960, 3, 3]) /* ty=Tensor[(1, 1, 960, 3, 3), float32] */;
  %260 = sum(%259, axis=[0]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %261 = transpose(%260, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %262 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %263 = multiply(%262, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %264 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %265 = multiply(%264, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %266 = less(%265, %145) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %267 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %268 = nn.conv2d_transpose(%254, %147, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %269 = less(%145, %263) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %270 = where(%266, %267, %268) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %271 = where(%269, %267, %270) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %272 = tile(%271, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %273 = reshape(%143, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %274 = reshape(%272, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %275 = nn.conv2d(%273, %274, padding=[0, 0, 0, 0], groups=160) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %276 = reshape(%275, newshape=[1, 160, 960, 1, 1]) /* ty=Tensor[(1, 160, 960, 1, 1), float32] */;
  %277 = sum(%276, axis=[0]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %278 = nn.conv2d_transpose(%271, %v0_16_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %279 = tile(%278, reps=[1, 960, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %280 = reshape(%140, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %281 = reshape(%279, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %282 = nn.conv2d(%280, %281, padding=[0, 0, 0, 0], groups=960) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %283 = reshape(%282, newshape=[1, 960, 160, 1, 1]) /* ty=Tensor[(1, 960, 160, 1, 1), float32] */;
  %284 = sum(%283, axis=[0]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %285 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %286 = multiply(%285, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %287 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %288 = multiply(%287, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %289 = less(%288, %139) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %290 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %291 = nn.conv2d_transpose(%278, %v0_15_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %292 = less(%139, %286) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %293 = where(%289, %290, %291) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %294 = where(%292, %290, %293) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %295 = tile(%294, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %296 = reshape(%136, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %297 = reshape(%295, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %298 = nn.conv2d(%296, %297, padding=[1, 1, 1, 1], groups=960) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %299 = reshape(%298, newshape=[1, 1, 960, 3, 3]) /* ty=Tensor[(1, 1, 960, 3, 3), float32] */;
  %300 = sum(%299, axis=[0]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %301 = transpose(%300, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %302 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %303 = multiply(%302, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %304 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %305 = multiply(%304, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %306 = less(%305, %135) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %307 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %308 = nn.conv2d_transpose(%294, %137, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %309 = less(%135, %303) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %310 = where(%306, %307, %308) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %311 = where(%309, %307, %310) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %312 = tile(%311, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %313 = reshape(%133, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %314 = reshape(%312, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %315 = nn.conv2d(%313, %314, padding=[0, 0, 0, 0], groups=160) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %316 = reshape(%315, newshape=[1, 160, 960, 1, 1]) /* ty=Tensor[(1, 160, 960, 1, 1), float32] */;
  %317 = sum(%316, axis=[0]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %318 = nn.conv2d_transpose(%311, %v0_15_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %319 = tile(%318, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 92160, 4, 4), float32] */;
  %320 = reshape(%131, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %321 = reshape(%319, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(92160, 1, 4, 4), float32] */;
  %322 = nn.conv2d(%320, %321, padding=[0, 0, 0, 0], groups=576) /* ty=Tensor[(1, 92160, 1, 1), float32] */;
  %323 = reshape(%322, newshape=[1, 576, 160, 1, 1]) /* ty=Tensor[(1, 576, 160, 1, 1), float32] */;
  %324 = sum(%323, axis=[0]) /* ty=Tensor[(576, 160, 1, 1), float32] */;
  %325 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %326 = multiply(%325, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %327 = ones(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %328 = multiply(%327, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %329 = less(%328, %130) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %330 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %331 = nn.conv2d_transpose(%318, %v0_14_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %332 = less(%130, %326) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %333 = where(%329, %330, %331) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %334 = where(%332, %330, %333) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %335 = tile(%334, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %336 = reshape(%127, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %337 = reshape(%335, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 4, 4), float32] */;
  %338 = nn.conv2d(%336, %337, padding=[1, 1, 1, 1], dilation=[2, 2], groups=576) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %339 = reshape(%338, newshape=[1, 1, 576, 4, 4]) /* ty=Tensor[(1, 1, 576, 4, 4), float32] */;
  %340 = sum(%339, axis=[0]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %341 = transpose(%340, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 4, 4), float32] */;
  %342 = strided_slice(%341, begin=[0, 0, 0, 0], end=[576, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %343 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %344 = multiply(%343, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %345 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %346 = multiply(%345, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %347 = less(%346, %126) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %348 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %349 = nn.conv2d_transpose(%334, %128, channels=576, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %350 = less(%126, %344) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %351 = where(%347, %348, %349) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %352 = where(%350, %348, %351) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %353 = tile(%352, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %354 = reshape(%124, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %355 = reshape(%353, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %356 = nn.conv2d(%354, %355, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %357 = reshape(%356, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %358 = sum(%357, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %359 = nn.conv2d_transpose(%352, %v0_14_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %360 = tile(%359, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %361 = reshape(%121, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %362 = reshape(%360, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %363 = nn.conv2d(%361, %362, padding=[0, 0, 0, 0], groups=576) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %364 = reshape(%363, newshape=[1, 576, 96, 1, 1]) /* ty=Tensor[(1, 576, 96, 1, 1), float32] */;
  %365 = sum(%364, axis=[0]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %366 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %367 = multiply(%366, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %368 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %369 = multiply(%368, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %370 = less(%369, %120) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %371 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %372 = nn.conv2d_transpose(%359, %v0_13_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %373 = less(%120, %367) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %374 = where(%370, %371, %372) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %375 = where(%373, %371, %374) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %376 = tile(%375, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %377 = reshape(%117, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %378 = reshape(%376, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %379 = nn.conv2d(%377, %378, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %380 = reshape(%379, newshape=[1, 1, 576, 3, 3]) /* ty=Tensor[(1, 1, 576, 3, 3), float32] */;
  %381 = sum(%380, axis=[0]) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %382 = transpose(%381, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %383 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %384 = multiply(%383, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %385 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %386 = multiply(%385, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %387 = less(%386, %116) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %388 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %389 = nn.conv2d_transpose(%375, %118, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %390 = less(%116, %384) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %391 = where(%387, %388, %389) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %392 = where(%390, %388, %391) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %393 = tile(%392, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %394 = reshape(%114, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %395 = reshape(%393, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %396 = nn.conv2d(%394, %395, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %397 = reshape(%396, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %398 = sum(%397, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %399 = nn.conv2d_transpose(%392, %v0_13_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %400 = tile(%399, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %401 = reshape(%111, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %402 = reshape(%400, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %403 = nn.conv2d(%401, %402, padding=[0, 0, 0, 0], groups=576) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %404 = reshape(%403, newshape=[1, 576, 96, 1, 1]) /* ty=Tensor[(1, 576, 96, 1, 1), float32] */;
  %405 = sum(%404, axis=[0]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %406 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %407 = multiply(%406, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %408 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %409 = multiply(%408, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %410 = less(%409, %110) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %411 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %412 = nn.conv2d_transpose(%399, %v0_12_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %413 = less(%110, %407) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %414 = where(%410, %411, %412) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %415 = where(%413, %411, %414) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %416 = tile(%415, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %417 = reshape(%107, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %418 = reshape(%416, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %419 = nn.conv2d(%417, %418, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %420 = reshape(%419, newshape=[1, 1, 576, 3, 3]) /* ty=Tensor[(1, 1, 576, 3, 3), float32] */;
  %421 = sum(%420, axis=[0]) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %422 = transpose(%421, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %423 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %424 = multiply(%423, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %425 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %426 = multiply(%425, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %427 = less(%426, %106) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %428 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %429 = nn.conv2d_transpose(%415, %108, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %430 = less(%106, %424) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %431 = where(%427, %428, %429) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %432 = where(%430, %428, %431) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %433 = tile(%432, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %434 = reshape(%104, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %435 = reshape(%433, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %436 = nn.conv2d(%434, %435, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %437 = reshape(%436, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %438 = sum(%437, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %439 = nn.conv2d_transpose(%432, %v0_12_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %440 = tile(%439, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 36864, 8, 8), float32] */;
  %441 = reshape(%102, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %442 = reshape(%440, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 8, 8), float32] */;
  %443 = nn.conv2d(%441, %442, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 36864, 1, 1), float32] */;
  %444 = reshape(%443, newshape=[1, 384, 96, 1, 1]) /* ty=Tensor[(1, 384, 96, 1, 1), float32] */;
  %445 = sum(%444, axis=[0]) /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %446 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %447 = multiply(%446, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %448 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %449 = multiply(%448, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %450 = less(%449, %101) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %451 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %452 = nn.conv2d_transpose(%439, %v0_11_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %453 = less(%101, %447) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %454 = where(%450, %451, %452) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %455 = where(%453, %451, %454) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %456 = tile(%455, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %457 = reshape(%98, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %458 = reshape(%456, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %459 = nn.conv2d(%457, %458, padding=[1, 1, 1, 1], groups=384) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %460 = reshape(%459, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %461 = sum(%460, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %462 = transpose(%461, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %463 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %464 = multiply(%463, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %465 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %466 = multiply(%465, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %467 = less(%466, %97) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %468 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %469 = nn.conv2d_transpose(%455, %99, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %470 = less(%97, %464) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %471 = where(%467, %468, %469) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %472 = where(%470, %468, %471) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %473 = tile(%472, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %474 = reshape(%95, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %475 = reshape(%473, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %476 = nn.conv2d(%474, %475, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %477 = reshape(%476, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %478 = sum(%477, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %479 = nn.conv2d_transpose(%472, %v0_11_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %480 = tile(%479, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %481 = reshape(%92, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %482 = reshape(%480, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %483 = nn.conv2d(%481, %482, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %484 = reshape(%483, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %485 = sum(%484, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %486 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %487 = multiply(%486, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %488 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %489 = multiply(%488, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %490 = less(%489, %91) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %491 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %492 = nn.conv2d_transpose(%479, %v0_10_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %493 = less(%91, %487) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %494 = where(%490, %491, %492) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %495 = where(%493, %491, %494) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %496 = tile(%495, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %497 = reshape(%88, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %498 = reshape(%496, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %499 = nn.conv2d(%497, %498, padding=[1, 1, 1, 1], groups=384) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %500 = reshape(%499, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %501 = sum(%500, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %502 = transpose(%501, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %503 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %504 = multiply(%503, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %505 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %506 = multiply(%505, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %507 = less(%506, %87) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %508 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %509 = nn.conv2d_transpose(%495, %89, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %510 = less(%87, %504) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %511 = where(%507, %508, %509) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %512 = where(%510, %508, %511) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %513 = tile(%512, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %514 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %515 = reshape(%513, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %516 = nn.conv2d(%514, %515, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %517 = reshape(%516, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %518 = sum(%517, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %519 = nn.conv2d_transpose(%512, %v0_10_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %520 = tile(%519, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %521 = reshape(%82, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %522 = reshape(%520, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %523 = nn.conv2d(%521, %522, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %524 = reshape(%523, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %525 = sum(%524, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %526 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %527 = multiply(%526, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %528 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %529 = multiply(%528, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %530 = less(%529, %81) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %531 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %532 = nn.conv2d_transpose(%519, %v0_9_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %533 = less(%81, %527) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %534 = where(%530, %531, %532) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %535 = where(%533, %531, %534) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %536 = tile(%535, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %537 = reshape(%78, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %538 = reshape(%536, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %539 = nn.conv2d(%537, %538, padding=[1, 1, 1, 1], groups=384) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %540 = reshape(%539, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %541 = sum(%540, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %542 = transpose(%541, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %543 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %544 = multiply(%543, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %545 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %546 = multiply(%545, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %547 = less(%546, %77) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %548 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %549 = nn.conv2d_transpose(%535, %79, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %550 = less(%77, %544) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %551 = where(%547, %548, %549) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %552 = where(%550, %548, %551) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %553 = tile(%552, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %554 = reshape(%75, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %555 = reshape(%553, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %556 = nn.conv2d(%554, %555, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %557 = reshape(%556, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %558 = sum(%557, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %559 = nn.conv2d_transpose(%552, %v0_9_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %560 = tile(%559, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %561 = reshape(%72, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %562 = reshape(%560, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %563 = nn.conv2d(%561, %562, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %564 = reshape(%563, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %565 = sum(%564, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %566 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %567 = multiply(%566, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %568 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %569 = multiply(%568, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %570 = less(%569, %71) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %571 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %572 = nn.conv2d_transpose(%559, %v0_8_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %573 = less(%71, %567) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %574 = where(%570, %571, %572) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %575 = where(%573, %571, %574) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %576 = tile(%575, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %577 = reshape(%68, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %578 = reshape(%576, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %579 = nn.conv2d(%577, %578, padding=[1, 1, 1, 1], groups=384) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %580 = reshape(%579, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %581 = sum(%580, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %582 = transpose(%581, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %583 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %584 = multiply(%583, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %585 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %586 = multiply(%585, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %587 = less(%586, %67) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %588 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %589 = nn.conv2d_transpose(%575, %69, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %590 = less(%67, %584) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %591 = where(%587, %588, %589) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %592 = where(%590, %588, %591) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %593 = tile(%592, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %594 = reshape(%65, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %595 = reshape(%593, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %596 = nn.conv2d(%594, %595, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %597 = reshape(%596, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %598 = sum(%597, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %599 = nn.conv2d_transpose(%592, %v0_8_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %600 = tile(%599, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 12288, 8, 8), float32] */;
  %601 = reshape(%63, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %602 = reshape(%600, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 8, 8), float32] */;
  %603 = nn.conv2d(%601, %602, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %604 = reshape(%603, newshape=[1, 192, 64, 1, 1]) /* ty=Tensor[(1, 192, 64, 1, 1), float32] */;
  %605 = sum(%604, axis=[0]) /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %606 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %607 = multiply(%606, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %608 = ones(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %609 = multiply(%608, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %610 = less(%609, %62) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %611 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %612 = nn.conv2d_transpose(%599, %v0_7_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %613 = less(%62, %607) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %614 = where(%610, %611, %612) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %615 = where(%613, %611, %614) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %616 = tile(%615, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %617 = reshape(%59, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %618 = reshape(%616, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 8, 8), float32] */;
  %619 = nn.conv2d(%617, %618, padding=[1, 1, 1, 1], dilation=[2, 2], groups=192) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %620 = reshape(%619, newshape=[1, 1, 192, 4, 4]) /* ty=Tensor[(1, 1, 192, 4, 4), float32] */;
  %621 = sum(%620, axis=[0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %622 = transpose(%621, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 4, 4), float32] */;
  %623 = strided_slice(%622, begin=[0, 0, 0, 0], end=[192, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %624 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %625 = multiply(%624, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %626 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %627 = multiply(%626, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %628 = less(%627, %58) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %629 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %630 = nn.conv2d_transpose(%615, %60, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %631 = less(%58, %625) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %632 = where(%628, %629, %630) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %633 = where(%631, %629, %632) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %634 = tile(%633, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %635 = reshape(%56, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %636 = reshape(%634, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %637 = nn.conv2d(%635, %636, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %638 = reshape(%637, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %639 = sum(%638, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %640 = nn.conv2d_transpose(%633, %v0_7_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %641 = tile(%640, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %642 = reshape(%53, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %643 = reshape(%641, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %644 = nn.conv2d(%642, %643, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %645 = reshape(%644, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), float32] */;
  %646 = sum(%645, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %647 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %648 = multiply(%647, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %649 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %650 = multiply(%649, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %651 = less(%650, %52) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %652 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %653 = nn.conv2d_transpose(%640, %v0_6_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %654 = less(%52, %648) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %655 = where(%651, %652, %653) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %656 = where(%654, %652, %655) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %657 = tile(%656, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %658 = reshape(%49, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %659 = reshape(%657, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 16, 16), float32] */;
  %660 = nn.conv2d(%658, %659, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %661 = reshape(%660, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), float32] */;
  %662 = sum(%661, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %663 = transpose(%662, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %664 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %665 = multiply(%664, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %666 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %667 = multiply(%666, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %668 = less(%667, %48) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %669 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %670 = nn.conv2d_transpose(%656, %50, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %671 = less(%48, %665) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %672 = where(%668, %669, %670) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %673 = where(%671, %669, %672) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %674 = tile(%673, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %675 = reshape(%46, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %676 = reshape(%674, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %677 = nn.conv2d(%675, %676, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %678 = reshape(%677, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %679 = sum(%678, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %680 = nn.conv2d_transpose(%673, %v0_6_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %681 = tile(%680, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %682 = reshape(%43, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %683 = reshape(%681, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %684 = nn.conv2d(%682, %683, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %685 = reshape(%684, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), float32] */;
  %686 = sum(%685, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %687 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %688 = multiply(%687, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %689 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %690 = multiply(%689, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %691 = less(%690, %42) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %692 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %693 = nn.conv2d_transpose(%680, %v0_5_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %694 = less(%42, %688) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %695 = where(%691, %692, %693) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %696 = where(%694, %692, %695) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %697 = tile(%696, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %698 = reshape(%39, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %699 = reshape(%697, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 16, 16), float32] */;
  %700 = nn.conv2d(%698, %699, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %701 = reshape(%700, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), float32] */;
  %702 = sum(%701, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %703 = transpose(%702, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %704 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %705 = multiply(%704, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %706 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %707 = multiply(%706, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %708 = less(%707, %38) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %709 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %710 = nn.conv2d_transpose(%696, %40, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %711 = less(%38, %705) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %712 = where(%708, %709, %710) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %713 = where(%711, %709, %712) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %714 = tile(%713, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %715 = reshape(%36, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %716 = reshape(%714, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %717 = nn.conv2d(%715, %716, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %718 = reshape(%717, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %719 = sum(%718, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %720 = nn.conv2d_transpose(%713, %v0_5_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %721 = tile(%720, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 4608, 16, 16), float32] */;
  %722 = reshape(%34, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %723 = reshape(%721, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4608, 1, 16, 16), float32] */;
  %724 = nn.conv2d(%722, %723, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 4608, 1, 1), float32] */;
  %725 = reshape(%724, newshape=[1, 144, 32, 1, 1]) /* ty=Tensor[(1, 144, 32, 1, 1), float32] */;
  %726 = sum(%725, axis=[0]) /* ty=Tensor[(144, 32, 1, 1), float32] */;
  %727 = zeros(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %728 = multiply(%727, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %729 = ones(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %730 = multiply(%729, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %731 = less(%730, %33) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %732 = zeros(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %733 = nn.conv2d_transpose(%720, %v0_4_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %734 = less(%33, %728) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %735 = where(%731, %732, %733) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %736 = where(%734, %732, %735) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %737 = tile(%736, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %738 = reshape(%30, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %739 = reshape(%737, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 16, 16), float32] */;
  %740 = nn.conv2d(%738, %739, padding=[1, 1, 1, 1], dilation=[2, 2], groups=144) /* ty=Tensor[(1, 144, 4, 4), float32] */;
  %741 = reshape(%740, newshape=[1, 1, 144, 4, 4]) /* ty=Tensor[(1, 1, 144, 4, 4), float32] */;
  %742 = sum(%741, axis=[0]) /* ty=Tensor[(1, 144, 4, 4), float32] */;
  %743 = transpose(%742, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 4, 4), float32] */;
  %744 = strided_slice(%743, begin=[0, 0, 0, 0], end=[144, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %745 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %746 = multiply(%745, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %747 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %748 = multiply(%747, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %749 = less(%748, %29) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %750 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %751 = nn.conv2d_transpose(%736, %31, channels=144, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %752 = less(%29, %746) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %753 = where(%749, %750, %751) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %754 = where(%752, %750, %753) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %755 = tile(%754, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 32, 32), float32] */;
  %756 = reshape(%27, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %757 = reshape(%755, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 32, 32), float32] */;
  %758 = nn.conv2d(%756, %757, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %759 = reshape(%758, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %760 = sum(%759, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %761 = nn.conv2d_transpose(%754, %v0_4_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %762 = tile(%761, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 3456, 32, 32), float32] */;
  %763 = reshape(%24, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %764 = reshape(%762, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 32, 32), float32] */;
  %765 = nn.conv2d(%763, %764, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %766 = reshape(%765, newshape=[1, 144, 24, 1, 1]) /* ty=Tensor[(1, 144, 24, 1, 1), float32] */;
  %767 = sum(%766, axis=[0]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %768 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %769 = multiply(%768, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %770 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %771 = multiply(%770, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %772 = less(%771, %23) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %773 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %774 = nn.conv2d_transpose(%761, %v0_3_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %775 = less(%23, %769) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %776 = where(%772, %773, %774) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %777 = where(%775, %773, %776) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %778 = tile(%777, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %779 = reshape(%20, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %780 = reshape(%778, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 32, 32), float32] */;
  %781 = nn.conv2d(%779, %780, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %782 = reshape(%781, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), float32] */;
  %783 = sum(%782, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %784 = transpose(%783, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %785 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %786 = multiply(%785, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %787 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %788 = multiply(%787, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %789 = less(%788, %19) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %790 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %791 = nn.conv2d_transpose(%777, %21, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %792 = less(%19, %786) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %793 = where(%789, %790, %791) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %794 = where(%792, %790, %793) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %795 = tile(%794, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 32, 32), float32] */;
  %796 = reshape(%17, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %797 = reshape(%795, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 32, 32), float32] */;
  %798 = nn.conv2d(%796, %797, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %799 = reshape(%798, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %800 = sum(%799, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %801 = nn.conv2d_transpose(%794, %v0_3_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %802 = tile(%801, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 2304, 32, 32), float32] */;
  %803 = reshape(%15, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %804 = reshape(%802, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2304, 1, 32, 32), float32] */;
  %805 = nn.conv2d(%803, %804, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 2304, 1, 1), float32] */;
  %806 = reshape(%805, newshape=[1, 96, 24, 1, 1]) /* ty=Tensor[(1, 96, 24, 1, 1), float32] */;
  %807 = sum(%806, axis=[0]) /* ty=Tensor[(96, 24, 1, 1), float32] */;
  %808 = zeros(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %809 = multiply(%808, 0f /* ty=float32 */) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %810 = ones(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %811 = multiply(%810, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %812 = less(%811, %14) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %813 = zeros(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %814 = nn.conv2d_transpose(%801, %v0_2_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %815 = less(%14, %809) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %816 = where(%812, %813, %814) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %817 = where(%815, %813, %816) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %818 = tile(%817, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %819 = reshape(%11, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %820 = reshape(%818, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 32, 32), float32] */;
  %821 = nn.conv2d(%819, %820, padding=[1, 1, 1, 1], dilation=[2, 2], groups=96) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %822 = reshape(%821, newshape=[1, 1, 96, 4, 4]) /* ty=Tensor[(1, 1, 96, 4, 4), float32] */;
  %823 = sum(%822, axis=[0]) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %824 = transpose(%823, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 4, 4), float32] */;
  %825 = strided_slice(%824, begin=[0, 0, 0, 0], end=[96, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %826 = zeros(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %827 = multiply(%826, 0f /* ty=float32 */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %828 = ones(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %829 = multiply(%828, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %830 = less(%829, %10) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %831 = zeros(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %832 = nn.conv2d_transpose(%817, %12, channels=96, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %833 = less(%10, %827) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %834 = where(%830, %831, %832) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %835 = where(%833, %831, %834) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %836 = tile(%835, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 64, 64), float32] */;
  %837 = reshape(%8, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %838 = reshape(%836, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 64, 64), float32] */;
  %839 = nn.conv2d(%837, %838, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %840 = reshape(%839, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), float32] */;
  %841 = sum(%840, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %842 = nn.conv2d_transpose(%835, %v0_2_conv_0_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %843 = tile(%842, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 512, 64, 64), float32] */;
  %844 = reshape(%6, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %845 = reshape(%843, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(512, 1, 64, 64), float32] */;
  %846 = nn.conv2d(%844, %845, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %847 = reshape(%846, newshape=[1, 32, 16, 1, 1]) /* ty=Tensor[(1, 32, 16, 1, 1), float32] */;
  %848 = sum(%847, axis=[0]) /* ty=Tensor[(32, 16, 1, 1), float32] */;
  %849 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %850 = multiply(%849, 0f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %851 = ones(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %852 = multiply(%851, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %853 = less(%852, %5) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %854 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %855 = nn.conv2d_transpose(%842, %v0_1_conv_1_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %856 = less(%5, %850) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %857 = where(%853, %854, %855) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %858 = where(%856, %854, %857) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %859 = tile(%858, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %860 = reshape(%2, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %861 = reshape(%859, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(32, 1, 64, 64), float32] */;
  %862 = nn.conv2d(%860, %861, padding=[1, 1, 1, 1], groups=32) /* ty=Tensor[(1, 32, 3, 3), float32] */;
  %863 = reshape(%862, newshape=[1, 1, 32, 3, 3]) /* ty=Tensor[(1, 1, 32, 3, 3), float32] */;
  %864 = sum(%863, axis=[0]) /* ty=Tensor[(1, 32, 3, 3), float32] */;
  %865 = transpose(%864, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %866 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %867 = multiply(%866, 0f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %868 = ones(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %869 = multiply(%868, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %870 = less(%869, %1) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %871 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %872 = nn.conv2d_transpose(%858, %3, channels=32, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=32, kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %873 = less(%1, %867) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %874 = where(%870, %871, %872) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %875 = where(%873, %871, %874) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %876 = tile(%875, reps=[1, 3, 1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %877 = reshape(%input, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %878 = reshape(%876, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 64, 64), float32] */;
  %879 = nn.conv2d(%877, %878, padding=[1, 1, 1, 1], dilation=[2, 2], groups=3) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %880 = reshape(%879, newshape=[1, 3, 32, 4, 4]) /* ty=Tensor[(1, 3, 32, 4, 4), float32] */;
  %881 = sum(%880, axis=[0]) /* ty=Tensor[(3, 32, 4, 4), float32] */;
  %882 = transpose(%881, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 3, 4, 4), float32] */;
  %883 = nn.cross_entropy_with_logits(%171, %label) /* ty=float32 */;
  %884 = sum(%178, axis=[-1], exclude=True) /* ty=Tensor[(10), float32] */;
  %885 = nn.matmul(%179, %168, units=None) /* ty=Tensor[(10, 1280), float32] */;
  %886 = sum(%191, axis=[1], exclude=True) /* ty=Tensor[(1280), float32] */;
  %887 = transpose(%197, axes=[1, 0, 2, 3]) /* ty=Tensor[(1280, 320, 1, 1), float32] */;
  %888 = sum(%198, axis=[1], exclude=True) /* ty=Tensor[(320), float32] */;
  %889 = transpose(%204, axes=[1, 0, 2, 3]) /* ty=Tensor[(320, 960, 1, 1), float32] */;
  %890 = sum(%214, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %891 = reshape(%221, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %892 = sum(%231, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %893 = transpose(%237, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %894 = sum(%238, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %895 = transpose(%244, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %896 = sum(%254, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %897 = reshape(%261, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %898 = sum(%271, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %899 = transpose(%277, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %900 = sum(%278, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %901 = transpose(%284, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %902 = sum(%294, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %903 = reshape(%301, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %904 = sum(%311, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %905 = transpose(%317, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %906 = sum(%318, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %907 = transpose(%324, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %908 = sum(%334, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %909 = reshape(%342, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %910 = sum(%352, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %911 = transpose(%358, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %912 = sum(%359, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %913 = transpose(%365, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %914 = sum(%375, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %915 = reshape(%382, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %916 = sum(%392, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %917 = transpose(%398, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %918 = sum(%399, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %919 = transpose(%405, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %920 = sum(%415, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %921 = reshape(%422, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %922 = sum(%432, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %923 = transpose(%438, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %924 = sum(%439, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %925 = transpose(%445, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %926 = sum(%455, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %927 = reshape(%462, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %928 = sum(%472, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %929 = transpose(%478, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %930 = sum(%479, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %931 = transpose(%485, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %932 = sum(%495, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %933 = reshape(%502, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %934 = sum(%512, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %935 = transpose(%518, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %936 = sum(%519, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %937 = transpose(%525, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %938 = sum(%535, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %939 = reshape(%542, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %940 = sum(%552, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %941 = transpose(%558, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %942 = sum(%559, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %943 = transpose(%565, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %944 = sum(%575, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %945 = reshape(%582, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %946 = sum(%592, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %947 = transpose(%598, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %948 = sum(%599, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %949 = transpose(%605, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %950 = sum(%615, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %951 = reshape(%623, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %952 = sum(%633, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %953 = transpose(%639, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %954 = sum(%640, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %955 = transpose(%646, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %956 = sum(%656, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %957 = reshape(%663, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %958 = sum(%673, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %959 = transpose(%679, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %960 = sum(%680, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %961 = transpose(%686, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %962 = sum(%696, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %963 = reshape(%703, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %964 = sum(%713, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %965 = transpose(%719, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %966 = sum(%720, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %967 = transpose(%726, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %968 = sum(%736, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %969 = reshape(%744, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %970 = sum(%754, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %971 = transpose(%760, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %972 = sum(%761, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %973 = transpose(%767, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %974 = sum(%777, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %975 = reshape(%784, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %976 = sum(%794, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %977 = transpose(%800, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %978 = sum(%801, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %979 = transpose(%807, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 96, 1, 1), float32] */;
  %980 = sum(%817, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %981 = reshape(%825, newshape=[96, 1, 3, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %982 = sum(%835, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %983 = transpose(%841, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %984 = sum(%842, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %985 = transpose(%848, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 32, 1, 1), float32] */;
  %986 = sum(%858, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %987 = reshape(%865, newshape=[32, 1, 3, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %988 = sum(%875, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %989 = strided_slice(%882, begin=[0, 0, 0, 0], end=[32, 3, 3, 3], strides=[1], axes=None) /* ty=Tensor[(32, 3, 3, 3), float32] */;

}