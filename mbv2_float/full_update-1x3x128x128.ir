fn (%input: Tensor[(1, 3, 128, 128), float32], %v0_0_0_weight: Tensor[(32, 3, 3, 3), float32], %v0_0_0_bias: Tensor[(32), float32], %v0_1_conv_0_0_weight: Tensor[(32, 1, 3, 3), float32], %v0_1_conv_0_0_bias: Tensor[(32), float32], %v0_1_conv_1_weight: Tensor[(16, 32, 1, 1), float32], %v0_1_conv_1_bias: Tensor[(16), float32], %v0_2_conv_0_0_weight: Tensor[(96, 16, 1, 1), float32], %v0_2_conv_0_0_bias: Tensor[(96), float32], %v0_2_conv_1_0_weight: Tensor[(96, 1, 3, 3), float32], %v0_2_conv_1_0_bias: Tensor[(96), float32], %v0_2_conv_2_weight: Tensor[(24, 96, 1, 1), float32], %v0_2_conv_2_bias: Tensor[(24), float32], %v0_3_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_3_conv_0_0_bias: Tensor[(144), float32], %v0_3_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_3_conv_1_0_bias: Tensor[(144), float32], %v0_3_conv_2_weight: Tensor[(24, 144, 1, 1), float32], %v0_3_conv_2_bias: Tensor[(24), float32], %v0_4_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_4_conv_0_0_bias: Tensor[(144), float32], %v0_4_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_4_conv_1_0_bias: Tensor[(144), float32], %v0_4_conv_2_weight: Tensor[(32, 144, 1, 1), float32], %v0_4_conv_2_bias: Tensor[(32), float32], %v0_5_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_5_conv_0_0_bias: Tensor[(192), float32], %v0_5_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_5_conv_1_0_bias: Tensor[(192), float32], %v0_5_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_5_conv_2_bias: Tensor[(32), float32], %v0_6_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_6_conv_0_0_bias: Tensor[(192), float32], %v0_6_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_6_conv_1_0_bias: Tensor[(192), float32], %v0_6_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_6_conv_2_bias: Tensor[(32), float32], %v0_7_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_7_conv_0_0_bias: Tensor[(192), float32], %v0_7_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_7_conv_1_0_bias: Tensor[(192), float32], %v0_7_conv_2_weight: Tensor[(64, 192, 1, 1), float32], %v0_7_conv_2_bias: Tensor[(64), float32], %v0_8_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_8_conv_0_0_bias: Tensor[(384), float32], %v0_8_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_8_conv_1_0_bias: Tensor[(384), float32], %v0_8_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_8_conv_2_bias: Tensor[(64), float32], %v0_9_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_9_conv_0_0_bias: Tensor[(384), float32], %v0_9_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_9_conv_1_0_bias: Tensor[(384), float32], %v0_9_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_9_conv_2_bias: Tensor[(64), float32], %v0_10_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_10_conv_0_0_bias: Tensor[(384), float32], %v0_10_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_10_conv_1_0_bias: Tensor[(384), float32], %v0_10_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_10_conv_2_bias: Tensor[(64), float32], %v0_11_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_11_conv_0_0_bias: Tensor[(384), float32], %v0_11_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_11_conv_1_0_bias: Tensor[(384), float32], %v0_11_conv_2_weight: Tensor[(96, 384, 1, 1), float32], %v0_11_conv_2_bias: Tensor[(96), float32], %v0_12_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_12_conv_0_0_bias: Tensor[(576), float32], %v0_12_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_12_conv_1_0_bias: Tensor[(576), float32], %v0_12_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_12_conv_2_bias: Tensor[(96), float32], %v0_13_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_13_conv_0_0_bias: Tensor[(576), float32], %v0_13_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_13_conv_1_0_bias: Tensor[(576), float32], %v0_13_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_13_conv_2_bias: Tensor[(96), float32], %v0_14_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_14_conv_0_0_bias: Tensor[(576), float32], %v0_14_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_14_conv_1_0_bias: Tensor[(576), float32], %v0_14_conv_2_weight: Tensor[(160, 576, 1, 1), float32], %v0_14_conv_2_bias: Tensor[(160), float32], %v0_15_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_15_conv_0_0_bias: Tensor[(960), float32], %v0_15_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_15_conv_1_0_bias: Tensor[(960), float32], %v0_15_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_15_conv_2_bias: Tensor[(160), float32], %v0_16_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_16_conv_0_0_bias: Tensor[(960), float32], %v0_16_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_16_conv_1_0_bias: Tensor[(960), float32], %v0_16_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_16_conv_2_bias: Tensor[(160), float32], %v0_17_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_17_conv_0_0_bias: Tensor[(960), float32], %v0_17_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_17_conv_1_0_bias: Tensor[(960), float32], %v0_17_conv_2_weight: Tensor[(320, 960, 1, 1), float32], %v0_17_conv_2_bias: Tensor[(320), float32], %v0_18_0_weight: Tensor[(1280, 320, 1, 1), float32], %v0_18_0_bias: Tensor[(1280), float32], %v2_1_weight: Tensor[(10, 1280), float32], %v2_1_bias: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 1280), float32], Tensor[(1280), float32], Tensor[(1280, 320, 1, 1), float32], Tensor[(320), float32], Tensor[(320, 960, 1, 1), float32], Tensor[(960), float32], Tensor[(960, 1, 3, 3), float32], Tensor[(960), float32], Tensor[(960, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 960, 1, 1), float32], Tensor[(960), float32], Tensor[(960, 1, 3, 3), float32], Tensor[(960), float32], Tensor[(960, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 960, 1, 1), float32], Tensor[(960), float32], Tensor[(960, 1, 3, 3), float32], Tensor[(960), float32], Tensor[(960, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 3, 3), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 3, 3), float32], Tensor[(96), float32], Tensor[(96, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 1, 3, 3), float32], Tensor[(32), float32], Tensor[(32, 3, 3, 3), float32]) {
  %0 = nn.conv2d(%input, %v0_0_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %1 = nn.bias_add(%0, %v0_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %2 = clip(%1, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %3 = nn.conv2d(%2, %v0_1_conv_0_0_weight, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %4 = nn.bias_add(%3, %v0_1_conv_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %5 = clip(%4, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %6 = nn.conv2d(%5, %v0_1_conv_1_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %7 = nn.bias_add(%6, %v0_1_conv_1_bias) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %8 = nn.conv2d(%7, %v0_2_conv_0_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %9 = nn.bias_add(%8, %v0_2_conv_0_0_bias) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %10 = clip(%9, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %11 = nn.conv2d(%10, %v0_2_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %12 = nn.bias_add(%11, %v0_2_conv_1_0_bias) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %13 = clip(%12, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %14 = nn.conv2d(%13, %v0_2_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %15 = nn.bias_add(%14, %v0_2_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %16 = nn.conv2d(%15, %v0_3_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %17 = nn.bias_add(%16, %v0_3_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %18 = clip(%17, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %19 = nn.conv2d(%18, %v0_3_conv_1_0_weight, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %20 = nn.bias_add(%19, %v0_3_conv_1_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %21 = clip(%20, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %22 = nn.conv2d(%21, %v0_3_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %23 = nn.bias_add(%22, %v0_3_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %24 = add(%15, %23) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %25 = nn.conv2d(%24, %v0_4_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %26 = nn.bias_add(%25, %v0_4_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %27 = clip(%26, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %28 = nn.conv2d(%27, %v0_4_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %29 = nn.bias_add(%28, %v0_4_conv_1_0_bias) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %31 = nn.conv2d(%30, %v0_4_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %32 = nn.bias_add(%31, %v0_4_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %33 = nn.conv2d(%32, %v0_5_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %34 = nn.bias_add(%33, %v0_5_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %35 = clip(%34, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %36 = nn.conv2d(%35, %v0_5_conv_1_0_weight, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %37 = nn.bias_add(%36, %v0_5_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %38 = clip(%37, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %39 = nn.conv2d(%38, %v0_5_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %40 = nn.bias_add(%39, %v0_5_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %41 = add(%32, %40) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %42 = nn.conv2d(%41, %v0_6_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %43 = nn.bias_add(%42, %v0_6_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %44 = clip(%43, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %45 = nn.conv2d(%44, %v0_6_conv_1_0_weight, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %46 = nn.bias_add(%45, %v0_6_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %47 = clip(%46, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %48 = nn.conv2d(%47, %v0_6_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %49 = nn.bias_add(%48, %v0_6_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %50 = add(%41, %49) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %51 = nn.conv2d(%50, %v0_7_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %52 = nn.bias_add(%51, %v0_7_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %54 = nn.conv2d(%53, %v0_7_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %55 = nn.bias_add(%54, %v0_7_conv_1_0_bias) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %56 = clip(%55, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %57 = nn.conv2d(%56, %v0_7_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %58 = nn.bias_add(%57, %v0_7_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %59 = nn.conv2d(%58, %v0_8_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %60 = nn.bias_add(%59, %v0_8_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %61 = clip(%60, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %62 = nn.conv2d(%61, %v0_8_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %63 = nn.bias_add(%62, %v0_8_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %64 = clip(%63, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %65 = nn.conv2d(%64, %v0_8_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %66 = nn.bias_add(%65, %v0_8_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %67 = add(%58, %66) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %68 = nn.conv2d(%67, %v0_9_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %69 = nn.bias_add(%68, %v0_9_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %70 = clip(%69, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %71 = nn.conv2d(%70, %v0_9_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %72 = nn.bias_add(%71, %v0_9_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %73 = clip(%72, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %74 = nn.conv2d(%73, %v0_9_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %75 = nn.bias_add(%74, %v0_9_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %76 = add(%67, %75) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %77 = nn.conv2d(%76, %v0_10_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %78 = nn.bias_add(%77, %v0_10_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %79 = clip(%78, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %80 = nn.conv2d(%79, %v0_10_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %81 = nn.bias_add(%80, %v0_10_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %83 = nn.conv2d(%82, %v0_10_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %84 = nn.bias_add(%83, %v0_10_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %85 = add(%76, %84) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %86 = nn.conv2d(%85, %v0_11_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %87 = nn.bias_add(%86, %v0_11_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %89 = nn.conv2d(%88, %v0_11_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %90 = nn.bias_add(%89, %v0_11_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %91 = clip(%90, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %92 = nn.conv2d(%91, %v0_11_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %93 = nn.bias_add(%92, %v0_11_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %94 = nn.conv2d(%93, %v0_12_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %95 = nn.bias_add(%94, %v0_12_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %96 = clip(%95, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %97 = nn.conv2d(%96, %v0_12_conv_1_0_weight, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %98 = nn.bias_add(%97, %v0_12_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %99 = clip(%98, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %100 = nn.conv2d(%99, %v0_12_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %101 = nn.bias_add(%100, %v0_12_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %102 = add(%93, %101) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %103 = nn.conv2d(%102, %v0_13_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %104 = nn.bias_add(%103, %v0_13_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %105 = clip(%104, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %106 = nn.conv2d(%105, %v0_13_conv_1_0_weight, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %107 = nn.bias_add(%106, %v0_13_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %108 = clip(%107, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %109 = nn.conv2d(%108, %v0_13_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %110 = nn.bias_add(%109, %v0_13_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %111 = add(%102, %110) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %112 = nn.conv2d(%111, %v0_14_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %113 = nn.bias_add(%112, %v0_14_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %114 = clip(%113, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %115 = nn.conv2d(%114, %v0_14_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %116 = nn.bias_add(%115, %v0_14_conv_1_0_bias) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %118 = nn.conv2d(%117, %v0_14_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %119 = nn.bias_add(%118, %v0_14_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %120 = nn.conv2d(%119, %v0_15_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %121 = nn.bias_add(%120, %v0_15_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %122 = clip(%121, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %123 = nn.conv2d(%122, %v0_15_conv_1_0_weight, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %124 = nn.bias_add(%123, %v0_15_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %125 = clip(%124, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %126 = nn.conv2d(%125, %v0_15_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %127 = nn.bias_add(%126, %v0_15_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %128 = add(%119, %127) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %129 = nn.conv2d(%128, %v0_16_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %130 = nn.bias_add(%129, %v0_16_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %131 = clip(%130, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %132 = nn.conv2d(%131, %v0_16_conv_1_0_weight, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %133 = nn.bias_add(%132, %v0_16_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %134 = clip(%133, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %135 = nn.conv2d(%134, %v0_16_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %136 = nn.bias_add(%135, %v0_16_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %137 = add(%128, %136) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %138 = nn.conv2d(%137, %v0_17_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %139 = nn.bias_add(%138, %v0_17_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %140 = clip(%139, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %141 = nn.conv2d(%140, %v0_17_conv_1_0_weight, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %142 = nn.bias_add(%141, %v0_17_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %143 = clip(%142, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %144 = nn.conv2d(%143, %v0_17_conv_2_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %145 = nn.bias_add(%144, %v0_17_conv_2_bias) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %146 = nn.conv2d(%145, %v0_18_0_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %147 = nn.bias_add(%146, %v0_18_0_bias) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %148 = clip(%147, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %149 = mean(%148, axis=[-1]) /* ty=Tensor[(1, 1280, 4), float32] */;
  %150 = mean(%149, axis=[-1]) /* ty=Tensor[(1, 1280), float32] */;
  %151 = nn.dense(%150, %v2_1_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %152 = nn.bias_add(%151, %v2_1_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %153 = nn.log_softmax(%152) /* ty=Tensor[(1, 10), float32] */;
  %154 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %155 = negative(%154) /* ty=float32 */;
  %156 = multiply(%155, %label) /* ty=Tensor[(1, 10), float32] */;
  %157 = sum(%156, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %158 = exp(%153) /* ty=Tensor[(1, 10), float32] */;
  %159 = multiply(%157, %158) /* ty=Tensor[(1, 10), float32] */;
  %160 = subtract(%156, %159) /* ty=Tensor[(1, 10), float32] */;
  %161 = transpose(%160, axes=None) /* ty=Tensor[(10, 1), float32] */;
  %162 = broadcast_to(0f /* ty=float32 */, shape=[1, 1280, 4, 4]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %163 = broadcast_to(6f /* ty=float32 */, shape=[1, 1280, 4, 4]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %164 = nn.matmul(%160, %v2_1_weight, units=None) /* ty=Tensor[(1, 1280), float32] */;
  %165 = expand_dims(%164, axis=2) /* ty=Tensor[(1, 1280, 1), float32] */;
  %166 = multiply(%165, 0.25f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1), float32] */;
  %167 = broadcast_to(%166, shape=[1, 1280, 4]) /* ty=Tensor[(1, 1280, 4), float32] */;
  %168 = expand_dims(%167, axis=3) /* ty=Tensor[(1, 1280, 4, 1), float32] */;
  %169 = multiply(%168, 0.25f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 1), float32] */;
  %170 = less(%163, %147) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %171 = zeros(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %172 = broadcast_to(%169, shape=[1, 1280, 4, 4]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %173 = less(%147, %162) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %174 = where(%170, %171, %172) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %175 = where(%173, %171, %174) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %176 = tile(%175, reps=[1, 320, 1, 1]) /* ty=Tensor[(1, 409600, 4, 4), float32] */;
  %177 = reshape(%145, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %178 = reshape(%176, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(409600, 1, 4, 4), float32] */;
  %179 = nn.conv2d(%177, %178, padding=[0, 0, 0, 0], groups=320) /* ty=Tensor[(1, 409600, 1, 1), float32] */;
  %180 = reshape(%179, newshape=[1, 320, 1280, 1, 1]) /* ty=Tensor[(1, 320, 1280, 1, 1), float32] */;
  %181 = sum(%180, axis=[0]) /* ty=Tensor[(320, 1280, 1, 1), float32] */;
  %182 = nn.conv2d_transpose(%175, %v0_18_0_weight, channels=320, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %183 = tile(%182, reps=[1, 960, 1, 1]) /* ty=Tensor[(1, 307200, 4, 4), float32] */;
  %184 = reshape(%143, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %185 = reshape(%183, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(307200, 1, 4, 4), float32] */;
  %186 = nn.conv2d(%184, %185, padding=[0, 0, 0, 0], groups=960) /* ty=Tensor[(1, 307200, 1, 1), float32] */;
  %187 = reshape(%186, newshape=[1, 960, 320, 1, 1]) /* ty=Tensor[(1, 960, 320, 1, 1), float32] */;
  %188 = sum(%187, axis=[0]) /* ty=Tensor[(960, 320, 1, 1), float32] */;
  %189 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %190 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %191 = less(%190, %142) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %192 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %193 = nn.conv2d_transpose(%182, %v0_17_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %194 = less(%142, %189) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %195 = where(%191, %192, %193) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %196 = where(%194, %192, %195) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %197 = tile(%196, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %198 = reshape(%140, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %199 = reshape(%197, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %200 = nn.conv2d(%198, %199, padding=[1, 1, 1, 1], groups=960) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %201 = reshape(%200, newshape=[1, 1, 960, 3, 3]) /* ty=Tensor[(1, 1, 960, 3, 3), float32] */;
  %202 = sum(%201, axis=[0]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %203 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %204 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %205 = less(%204, %139) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %206 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %207 = nn.conv2d_transpose(%196, %v0_17_conv_1_0_weight, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %208 = less(%139, %203) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %209 = where(%205, %206, %207) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %210 = where(%208, %206, %209) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %211 = tile(%210, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %212 = reshape(%137, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %213 = reshape(%211, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %214 = nn.conv2d(%212, %213, padding=[0, 0, 0, 0], groups=160) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %215 = reshape(%214, newshape=[1, 160, 960, 1, 1]) /* ty=Tensor[(1, 160, 960, 1, 1), float32] */;
  %216 = sum(%215, axis=[0]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %217 = nn.conv2d_transpose(%210, %v0_17_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %218 = tile(%217, reps=[1, 960, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %219 = reshape(%134, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %220 = reshape(%218, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %221 = nn.conv2d(%219, %220, padding=[0, 0, 0, 0], groups=960) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %222 = reshape(%221, newshape=[1, 960, 160, 1, 1]) /* ty=Tensor[(1, 960, 160, 1, 1), float32] */;
  %223 = sum(%222, axis=[0]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %224 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %225 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %226 = less(%225, %133) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %227 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %228 = nn.conv2d_transpose(%217, %v0_16_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %229 = less(%133, %224) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %230 = where(%226, %227, %228) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %231 = where(%229, %227, %230) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %232 = tile(%231, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %233 = reshape(%131, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %234 = reshape(%232, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %235 = nn.conv2d(%233, %234, padding=[1, 1, 1, 1], groups=960) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %236 = reshape(%235, newshape=[1, 1, 960, 3, 3]) /* ty=Tensor[(1, 1, 960, 3, 3), float32] */;
  %237 = sum(%236, axis=[0]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %238 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %239 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %240 = less(%239, %130) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %241 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %242 = nn.conv2d_transpose(%231, %v0_16_conv_1_0_weight, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %243 = less(%130, %238) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %244 = where(%240, %241, %242) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %245 = where(%243, %241, %244) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %246 = tile(%245, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %247 = reshape(%128, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %248 = reshape(%246, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %249 = nn.conv2d(%247, %248, padding=[0, 0, 0, 0], groups=160) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %250 = reshape(%249, newshape=[1, 160, 960, 1, 1]) /* ty=Tensor[(1, 160, 960, 1, 1), float32] */;
  %251 = sum(%250, axis=[0]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %252 = nn.conv2d_transpose(%245, %v0_16_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %253 = tile(%252, reps=[1, 960, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %254 = reshape(%125, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %255 = reshape(%253, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %256 = nn.conv2d(%254, %255, padding=[0, 0, 0, 0], groups=960) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %257 = reshape(%256, newshape=[1, 960, 160, 1, 1]) /* ty=Tensor[(1, 960, 160, 1, 1), float32] */;
  %258 = sum(%257, axis=[0]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %259 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %260 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %261 = less(%260, %124) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %262 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %263 = nn.conv2d_transpose(%252, %v0_15_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %264 = less(%124, %259) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %265 = where(%261, %262, %263) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %266 = where(%264, %262, %265) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %267 = tile(%266, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %268 = reshape(%122, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %269 = reshape(%267, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %270 = nn.conv2d(%268, %269, padding=[1, 1, 1, 1], groups=960) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %271 = reshape(%270, newshape=[1, 1, 960, 3, 3]) /* ty=Tensor[(1, 1, 960, 3, 3), float32] */;
  %272 = sum(%271, axis=[0]) /* ty=Tensor[(1, 960, 3, 3), float32] */;
  %273 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %274 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 4, 4]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %275 = less(%274, %121) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %276 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %277 = nn.conv2d_transpose(%266, %v0_15_conv_1_0_weight, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %278 = less(%121, %273) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %279 = where(%275, %276, %277) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %280 = where(%278, %276, %279) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %281 = tile(%280, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 153600, 4, 4), float32] */;
  %282 = reshape(%119, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %283 = reshape(%281, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(153600, 1, 4, 4), float32] */;
  %284 = nn.conv2d(%282, %283, padding=[0, 0, 0, 0], groups=160) /* ty=Tensor[(1, 153600, 1, 1), float32] */;
  %285 = reshape(%284, newshape=[1, 160, 960, 1, 1]) /* ty=Tensor[(1, 160, 960, 1, 1), float32] */;
  %286 = sum(%285, axis=[0]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %287 = nn.conv2d_transpose(%280, %v0_15_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %288 = tile(%287, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 92160, 4, 4), float32] */;
  %289 = reshape(%117, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %290 = reshape(%288, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(92160, 1, 4, 4), float32] */;
  %291 = nn.conv2d(%289, %290, padding=[0, 0, 0, 0], groups=576) /* ty=Tensor[(1, 92160, 1, 1), float32] */;
  %292 = reshape(%291, newshape=[1, 576, 160, 1, 1]) /* ty=Tensor[(1, 576, 160, 1, 1), float32] */;
  %293 = sum(%292, axis=[0]) /* ty=Tensor[(576, 160, 1, 1), float32] */;
  %294 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 4, 4]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %295 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 4, 4]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %296 = less(%295, %116) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %297 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %298 = nn.conv2d_transpose(%287, %v0_14_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %299 = less(%116, %294) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %300 = where(%296, %297, %298) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %301 = where(%299, %297, %300) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %302 = tile(%301, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %303 = reshape(%114, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %304 = reshape(%302, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 4, 4), float32] */;
  %305 = nn.conv2d(%303, %304, padding=[1, 1, 1, 1], dilation=[2, 2], groups=576) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %306 = reshape(%305, newshape=[1, 1, 576, 4, 4]) /* ty=Tensor[(1, 1, 576, 4, 4), float32] */;
  %307 = sum(%306, axis=[0]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %308 = transpose(%307, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 4, 4), float32] */;
  %309 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %310 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %311 = less(%310, %113) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %312 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %313 = nn.conv2d_transpose(%301, %v0_14_conv_1_0_weight, channels=576, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %314 = less(%113, %309) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %315 = where(%311, %312, %313) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %316 = where(%314, %312, %315) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %317 = tile(%316, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %318 = reshape(%111, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %319 = reshape(%317, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %320 = nn.conv2d(%318, %319, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %321 = reshape(%320, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %322 = sum(%321, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %323 = nn.conv2d_transpose(%316, %v0_14_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %324 = tile(%323, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %325 = reshape(%108, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %326 = reshape(%324, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %327 = nn.conv2d(%325, %326, padding=[0, 0, 0, 0], groups=576) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %328 = reshape(%327, newshape=[1, 576, 96, 1, 1]) /* ty=Tensor[(1, 576, 96, 1, 1), float32] */;
  %329 = sum(%328, axis=[0]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %330 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %331 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %332 = less(%331, %107) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %333 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %334 = nn.conv2d_transpose(%323, %v0_13_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %335 = less(%107, %330) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %336 = where(%332, %333, %334) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %337 = where(%335, %333, %336) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %338 = tile(%337, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %339 = reshape(%105, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %340 = reshape(%338, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %341 = nn.conv2d(%339, %340, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %342 = reshape(%341, newshape=[1, 1, 576, 3, 3]) /* ty=Tensor[(1, 1, 576, 3, 3), float32] */;
  %343 = sum(%342, axis=[0]) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %344 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %345 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %346 = less(%345, %104) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %347 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %348 = nn.conv2d_transpose(%337, %v0_13_conv_1_0_weight, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %349 = less(%104, %344) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %350 = where(%346, %347, %348) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %351 = where(%349, %347, %350) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %352 = tile(%351, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %353 = reshape(%102, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %354 = reshape(%352, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %355 = nn.conv2d(%353, %354, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %356 = reshape(%355, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %357 = sum(%356, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %358 = nn.conv2d_transpose(%351, %v0_13_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %359 = tile(%358, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %360 = reshape(%99, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %361 = reshape(%359, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %362 = nn.conv2d(%360, %361, padding=[0, 0, 0, 0], groups=576) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %363 = reshape(%362, newshape=[1, 576, 96, 1, 1]) /* ty=Tensor[(1, 576, 96, 1, 1), float32] */;
  %364 = sum(%363, axis=[0]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %365 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %366 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %367 = less(%366, %98) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %368 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %369 = nn.conv2d_transpose(%358, %v0_12_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %370 = less(%98, %365) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %371 = where(%367, %368, %369) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %372 = where(%370, %368, %371) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %373 = tile(%372, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %374 = reshape(%96, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %375 = reshape(%373, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %376 = nn.conv2d(%374, %375, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %377 = reshape(%376, newshape=[1, 1, 576, 3, 3]) /* ty=Tensor[(1, 1, 576, 3, 3), float32] */;
  %378 = sum(%377, axis=[0]) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %379 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %380 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 8, 8]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %381 = less(%380, %95) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %382 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %383 = nn.conv2d_transpose(%372, %v0_12_conv_1_0_weight, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %384 = less(%95, %379) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %385 = where(%381, %382, %383) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %386 = where(%384, %382, %385) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %387 = tile(%386, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 8, 8), float32] */;
  %388 = reshape(%93, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %389 = reshape(%387, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 8, 8), float32] */;
  %390 = nn.conv2d(%388, %389, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %391 = reshape(%390, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %392 = sum(%391, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %393 = nn.conv2d_transpose(%386, %v0_12_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %394 = tile(%393, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 36864, 8, 8), float32] */;
  %395 = reshape(%91, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %396 = reshape(%394, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 8, 8), float32] */;
  %397 = nn.conv2d(%395, %396, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 36864, 1, 1), float32] */;
  %398 = reshape(%397, newshape=[1, 384, 96, 1, 1]) /* ty=Tensor[(1, 384, 96, 1, 1), float32] */;
  %399 = sum(%398, axis=[0]) /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %400 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %401 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %402 = less(%401, %90) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %403 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %404 = nn.conv2d_transpose(%393, %v0_11_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %405 = less(%90, %400) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %406 = where(%402, %403, %404) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %407 = where(%405, %403, %406) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %408 = tile(%407, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %409 = reshape(%88, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %410 = reshape(%408, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %411 = nn.conv2d(%409, %410, padding=[1, 1, 1, 1], groups=384) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %412 = reshape(%411, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %413 = sum(%412, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %414 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %415 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %416 = less(%415, %87) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %417 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %418 = nn.conv2d_transpose(%407, %v0_11_conv_1_0_weight, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %419 = less(%87, %414) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %420 = where(%416, %417, %418) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %421 = where(%419, %417, %420) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %422 = tile(%421, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %423 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %424 = reshape(%422, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %425 = nn.conv2d(%423, %424, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %426 = reshape(%425, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %427 = sum(%426, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %428 = nn.conv2d_transpose(%421, %v0_11_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %429 = tile(%428, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %430 = reshape(%82, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %431 = reshape(%429, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %432 = nn.conv2d(%430, %431, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %433 = reshape(%432, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %434 = sum(%433, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %435 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %436 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %437 = less(%436, %81) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %438 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %439 = nn.conv2d_transpose(%428, %v0_10_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %440 = less(%81, %435) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %441 = where(%437, %438, %439) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %442 = where(%440, %438, %441) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %443 = tile(%442, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %444 = reshape(%79, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %445 = reshape(%443, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %446 = nn.conv2d(%444, %445, padding=[1, 1, 1, 1], groups=384) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %447 = reshape(%446, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %448 = sum(%447, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %449 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %450 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %451 = less(%450, %78) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %452 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %453 = nn.conv2d_transpose(%442, %v0_10_conv_1_0_weight, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %454 = less(%78, %449) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %455 = where(%451, %452, %453) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %456 = where(%454, %452, %455) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %457 = tile(%456, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %458 = reshape(%76, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %459 = reshape(%457, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %460 = nn.conv2d(%458, %459, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %461 = reshape(%460, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %462 = sum(%461, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %463 = nn.conv2d_transpose(%456, %v0_10_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %464 = tile(%463, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %465 = reshape(%73, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %466 = reshape(%464, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %467 = nn.conv2d(%465, %466, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %468 = reshape(%467, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %469 = sum(%468, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %470 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %471 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %472 = less(%471, %72) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %473 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %474 = nn.conv2d_transpose(%463, %v0_9_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %475 = less(%72, %470) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %476 = where(%472, %473, %474) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %477 = where(%475, %473, %476) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %478 = tile(%477, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %479 = reshape(%70, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %480 = reshape(%478, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %481 = nn.conv2d(%479, %480, padding=[1, 1, 1, 1], groups=384) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %482 = reshape(%481, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %483 = sum(%482, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %484 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %485 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %486 = less(%485, %69) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %487 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %488 = nn.conv2d_transpose(%477, %v0_9_conv_1_0_weight, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %489 = less(%69, %484) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %490 = where(%486, %487, %488) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %491 = where(%489, %487, %490) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %492 = tile(%491, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %493 = reshape(%67, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %494 = reshape(%492, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %495 = nn.conv2d(%493, %494, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %496 = reshape(%495, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %497 = sum(%496, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %498 = nn.conv2d_transpose(%491, %v0_9_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %499 = tile(%498, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %500 = reshape(%64, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %501 = reshape(%499, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %502 = nn.conv2d(%500, %501, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %503 = reshape(%502, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %504 = sum(%503, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %505 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %506 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %507 = less(%506, %63) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %508 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %509 = nn.conv2d_transpose(%498, %v0_8_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %510 = less(%63, %505) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %511 = where(%507, %508, %509) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %512 = where(%510, %508, %511) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %513 = tile(%512, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %514 = reshape(%61, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %515 = reshape(%513, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %516 = nn.conv2d(%514, %515, padding=[1, 1, 1, 1], groups=384) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %517 = reshape(%516, newshape=[1, 1, 384, 3, 3]) /* ty=Tensor[(1, 1, 384, 3, 3), float32] */;
  %518 = sum(%517, axis=[0]) /* ty=Tensor[(1, 384, 3, 3), float32] */;
  %519 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %520 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 8, 8]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %521 = less(%520, %60) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %522 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %523 = nn.conv2d_transpose(%512, %v0_8_conv_1_0_weight, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %524 = less(%60, %519) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %525 = where(%521, %522, %523) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %526 = where(%524, %522, %525) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %527 = tile(%526, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 8, 8), float32] */;
  %528 = reshape(%58, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %529 = reshape(%527, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 8, 8), float32] */;
  %530 = nn.conv2d(%528, %529, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %531 = reshape(%530, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %532 = sum(%531, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %533 = nn.conv2d_transpose(%526, %v0_8_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %534 = tile(%533, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 12288, 8, 8), float32] */;
  %535 = reshape(%56, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %536 = reshape(%534, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 8, 8), float32] */;
  %537 = nn.conv2d(%535, %536, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %538 = reshape(%537, newshape=[1, 192, 64, 1, 1]) /* ty=Tensor[(1, 192, 64, 1, 1), float32] */;
  %539 = sum(%538, axis=[0]) /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %540 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 8, 8]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %541 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 8, 8]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %542 = less(%541, %55) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %543 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %544 = nn.conv2d_transpose(%533, %v0_7_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %545 = less(%55, %540) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %546 = where(%542, %543, %544) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %547 = where(%545, %543, %546) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %548 = tile(%547, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %549 = reshape(%53, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %550 = reshape(%548, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 8, 8), float32] */;
  %551 = nn.conv2d(%549, %550, padding=[1, 1, 1, 1], dilation=[2, 2], groups=192) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %552 = reshape(%551, newshape=[1, 1, 192, 4, 4]) /* ty=Tensor[(1, 1, 192, 4, 4), float32] */;
  %553 = sum(%552, axis=[0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %554 = transpose(%553, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 4, 4), float32] */;
  %555 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %556 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %557 = less(%556, %52) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %558 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %559 = nn.conv2d_transpose(%547, %v0_7_conv_1_0_weight, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %560 = less(%52, %555) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %561 = where(%557, %558, %559) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %562 = where(%560, %558, %561) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %563 = tile(%562, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %564 = reshape(%50, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %565 = reshape(%563, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %566 = nn.conv2d(%564, %565, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %567 = reshape(%566, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %568 = sum(%567, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %569 = nn.conv2d_transpose(%562, %v0_7_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %570 = tile(%569, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %571 = reshape(%47, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %572 = reshape(%570, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %573 = nn.conv2d(%571, %572, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %574 = reshape(%573, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), float32] */;
  %575 = sum(%574, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %576 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %577 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %578 = less(%577, %46) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %579 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %580 = nn.conv2d_transpose(%569, %v0_6_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %581 = less(%46, %576) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %582 = where(%578, %579, %580) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %583 = where(%581, %579, %582) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %584 = tile(%583, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %585 = reshape(%44, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %586 = reshape(%584, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 16, 16), float32] */;
  %587 = nn.conv2d(%585, %586, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %588 = reshape(%587, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), float32] */;
  %589 = sum(%588, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %590 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %591 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %592 = less(%591, %43) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %593 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %594 = nn.conv2d_transpose(%583, %v0_6_conv_1_0_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %595 = less(%43, %590) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %596 = where(%592, %593, %594) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %597 = where(%595, %593, %596) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %598 = tile(%597, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %599 = reshape(%41, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %600 = reshape(%598, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %601 = nn.conv2d(%599, %600, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %602 = reshape(%601, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %603 = sum(%602, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %604 = nn.conv2d_transpose(%597, %v0_6_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %605 = tile(%604, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %606 = reshape(%38, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %607 = reshape(%605, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %608 = nn.conv2d(%606, %607, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %609 = reshape(%608, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), float32] */;
  %610 = sum(%609, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %611 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %612 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %613 = less(%612, %37) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %614 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %615 = nn.conv2d_transpose(%604, %v0_5_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %616 = less(%37, %611) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %617 = where(%613, %614, %615) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %618 = where(%616, %614, %617) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %619 = tile(%618, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %620 = reshape(%35, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %621 = reshape(%619, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 16, 16), float32] */;
  %622 = nn.conv2d(%620, %621, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %623 = reshape(%622, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), float32] */;
  %624 = sum(%623, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %625 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %626 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 16, 16]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %627 = less(%626, %34) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %628 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %629 = nn.conv2d_transpose(%618, %v0_5_conv_1_0_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %630 = less(%34, %625) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %631 = where(%627, %628, %629) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %632 = where(%630, %628, %631) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %633 = tile(%632, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 16, 16), float32] */;
  %634 = reshape(%32, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %635 = reshape(%633, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 16, 16), float32] */;
  %636 = nn.conv2d(%634, %635, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %637 = reshape(%636, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %638 = sum(%637, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %639 = nn.conv2d_transpose(%632, %v0_5_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %640 = tile(%639, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 4608, 16, 16), float32] */;
  %641 = reshape(%30, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %642 = reshape(%640, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4608, 1, 16, 16), float32] */;
  %643 = nn.conv2d(%641, %642, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 4608, 1, 1), float32] */;
  %644 = reshape(%643, newshape=[1, 144, 32, 1, 1]) /* ty=Tensor[(1, 144, 32, 1, 1), float32] */;
  %645 = sum(%644, axis=[0]) /* ty=Tensor[(144, 32, 1, 1), float32] */;
  %646 = broadcast_to(0f /* ty=float32 */, shape=[1, 144, 16, 16]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %647 = broadcast_to(6f /* ty=float32 */, shape=[1, 144, 16, 16]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %648 = less(%647, %29) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %649 = zeros(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %650 = nn.conv2d_transpose(%639, %v0_4_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %651 = less(%29, %646) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %652 = where(%648, %649, %650) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %653 = where(%651, %649, %652) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %654 = tile(%653, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %655 = reshape(%27, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %656 = reshape(%654, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 16, 16), float32] */;
  %657 = nn.conv2d(%655, %656, padding=[1, 1, 1, 1], dilation=[2, 2], groups=144) /* ty=Tensor[(1, 144, 4, 4), float32] */;
  %658 = reshape(%657, newshape=[1, 1, 144, 4, 4]) /* ty=Tensor[(1, 1, 144, 4, 4), float32] */;
  %659 = sum(%658, axis=[0]) /* ty=Tensor[(1, 144, 4, 4), float32] */;
  %660 = transpose(%659, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 4, 4), float32] */;
  %661 = broadcast_to(0f /* ty=float32 */, shape=[1, 144, 32, 32]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %662 = broadcast_to(6f /* ty=float32 */, shape=[1, 144, 32, 32]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %663 = less(%662, %26) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %664 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %665 = nn.conv2d_transpose(%653, %v0_4_conv_1_0_weight, channels=144, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %666 = less(%26, %661) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %667 = where(%663, %664, %665) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %668 = where(%666, %664, %667) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %669 = tile(%668, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 32, 32), float32] */;
  %670 = reshape(%24, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %671 = reshape(%669, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 32, 32), float32] */;
  %672 = nn.conv2d(%670, %671, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %673 = reshape(%672, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %674 = sum(%673, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %675 = nn.conv2d_transpose(%668, %v0_4_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %676 = tile(%675, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 3456, 32, 32), float32] */;
  %677 = reshape(%21, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %678 = reshape(%676, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 32, 32), float32] */;
  %679 = nn.conv2d(%677, %678, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %680 = reshape(%679, newshape=[1, 144, 24, 1, 1]) /* ty=Tensor[(1, 144, 24, 1, 1), float32] */;
  %681 = sum(%680, axis=[0]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %682 = broadcast_to(0f /* ty=float32 */, shape=[1, 144, 32, 32]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %683 = broadcast_to(6f /* ty=float32 */, shape=[1, 144, 32, 32]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %684 = less(%683, %20) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %685 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %686 = nn.conv2d_transpose(%675, %v0_3_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %687 = less(%20, %682) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %688 = where(%684, %685, %686) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %689 = where(%687, %685, %688) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %690 = tile(%689, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %691 = reshape(%18, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %692 = reshape(%690, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 32, 32), float32] */;
  %693 = nn.conv2d(%691, %692, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %694 = reshape(%693, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), float32] */;
  %695 = sum(%694, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %696 = broadcast_to(0f /* ty=float32 */, shape=[1, 144, 32, 32]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %697 = broadcast_to(6f /* ty=float32 */, shape=[1, 144, 32, 32]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %698 = less(%697, %17) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %699 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %700 = nn.conv2d_transpose(%689, %v0_3_conv_1_0_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %701 = less(%17, %696) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %702 = where(%698, %699, %700) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %703 = where(%701, %699, %702) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %704 = tile(%703, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 32, 32), float32] */;
  %705 = reshape(%15, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %706 = reshape(%704, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 32, 32), float32] */;
  %707 = nn.conv2d(%705, %706, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %708 = reshape(%707, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %709 = sum(%708, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %710 = nn.conv2d_transpose(%703, %v0_3_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %711 = tile(%710, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 2304, 32, 32), float32] */;
  %712 = reshape(%13, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %713 = reshape(%711, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2304, 1, 32, 32), float32] */;
  %714 = nn.conv2d(%712, %713, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 2304, 1, 1), float32] */;
  %715 = reshape(%714, newshape=[1, 96, 24, 1, 1]) /* ty=Tensor[(1, 96, 24, 1, 1), float32] */;
  %716 = sum(%715, axis=[0]) /* ty=Tensor[(96, 24, 1, 1), float32] */;
  %717 = broadcast_to(0f /* ty=float32 */, shape=[1, 96, 32, 32]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %718 = broadcast_to(6f /* ty=float32 */, shape=[1, 96, 32, 32]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %719 = less(%718, %12) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %720 = zeros(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %721 = nn.conv2d_transpose(%710, %v0_2_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %722 = less(%12, %717) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %723 = where(%719, %720, %721) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %724 = where(%722, %720, %723) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %725 = tile(%724, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %726 = reshape(%10, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %727 = reshape(%725, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 32, 32), float32] */;
  %728 = nn.conv2d(%726, %727, padding=[1, 1, 1, 1], dilation=[2, 2], groups=96) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %729 = reshape(%728, newshape=[1, 1, 96, 4, 4]) /* ty=Tensor[(1, 1, 96, 4, 4), float32] */;
  %730 = sum(%729, axis=[0]) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %731 = transpose(%730, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 4, 4), float32] */;
  %732 = broadcast_to(0f /* ty=float32 */, shape=[1, 96, 64, 64]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %733 = broadcast_to(6f /* ty=float32 */, shape=[1, 96, 64, 64]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %734 = less(%733, %9) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %735 = zeros(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %736 = nn.conv2d_transpose(%724, %v0_2_conv_1_0_weight, channels=96, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %737 = less(%9, %732) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %738 = where(%734, %735, %736) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %739 = where(%737, %735, %738) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %740 = tile(%739, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 64, 64), float32] */;
  %741 = reshape(%7, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %742 = reshape(%740, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 64, 64), float32] */;
  %743 = nn.conv2d(%741, %742, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %744 = reshape(%743, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), float32] */;
  %745 = sum(%744, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %746 = nn.conv2d_transpose(%739, %v0_2_conv_0_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %747 = tile(%746, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 512, 64, 64), float32] */;
  %748 = reshape(%5, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %749 = reshape(%747, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(512, 1, 64, 64), float32] */;
  %750 = nn.conv2d(%748, %749, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %751 = reshape(%750, newshape=[1, 32, 16, 1, 1]) /* ty=Tensor[(1, 32, 16, 1, 1), float32] */;
  %752 = sum(%751, axis=[0]) /* ty=Tensor[(32, 16, 1, 1), float32] */;
  %753 = broadcast_to(0f /* ty=float32 */, shape=[1, 32, 64, 64]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %754 = broadcast_to(6f /* ty=float32 */, shape=[1, 32, 64, 64]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %755 = less(%754, %4) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %756 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %757 = nn.conv2d_transpose(%746, %v0_1_conv_1_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %758 = less(%4, %753) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %759 = where(%755, %756, %757) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %760 = where(%758, %756, %759) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %761 = tile(%760, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %762 = reshape(%2, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %763 = reshape(%761, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(32, 1, 64, 64), float32] */;
  %764 = nn.conv2d(%762, %763, padding=[1, 1, 1, 1], groups=32) /* ty=Tensor[(1, 32, 3, 3), float32] */;
  %765 = reshape(%764, newshape=[1, 1, 32, 3, 3]) /* ty=Tensor[(1, 1, 32, 3, 3), float32] */;
  %766 = sum(%765, axis=[0]) /* ty=Tensor[(1, 32, 3, 3), float32] */;
  %767 = broadcast_to(0f /* ty=float32 */, shape=[1, 32, 64, 64]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %768 = broadcast_to(6f /* ty=float32 */, shape=[1, 32, 64, 64]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %769 = less(%768, %1) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %770 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %771 = nn.conv2d_transpose(%760, %v0_1_conv_0_0_weight, channels=32, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=32, kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %772 = less(%1, %767) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %773 = where(%769, %770, %771) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %774 = where(%772, %770, %773) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %775 = tile(%774, reps=[1, 3, 1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %776 = reshape(%input, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %777 = reshape(%775, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 64, 64), float32] */;
  %778 = nn.conv2d(%776, %777, padding=[1, 1, 1, 1], dilation=[2, 2], groups=3) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %779 = reshape(%778, newshape=[1, 3, 32, 4, 4]) /* ty=Tensor[(1, 3, 32, 4, 4), float32] */;
  %780 = sum(%779, axis=[0]) /* ty=Tensor[(3, 32, 4, 4), float32] */;
  %781 = transpose(%780, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 3, 4, 4), float32] */;
  %782 = nn.cross_entropy_with_logits(%153, %label) /* ty=float32 */;
  %783 = sum(%160, axis=[-1], exclude=True) /* ty=Tensor[(10), float32] */;
  %784 = nn.matmul(%161, %150, units=None) /* ty=Tensor[(10, 1280), float32] */;
  %785 = sum(%175, axis=[1], exclude=True) /* ty=Tensor[(1280), float32] */;
  %786 = transpose(%181, axes=[1, 0, 2, 3]) /* ty=Tensor[(1280, 320, 1, 1), float32] */;
  %787 = sum(%182, axis=[1], exclude=True) /* ty=Tensor[(320), float32] */;
  %788 = transpose(%188, axes=[1, 0, 2, 3]) /* ty=Tensor[(320, 960, 1, 1), float32] */;
  %789 = sum(%196, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %790 = transpose(%202, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %791 = sum(%210, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %792 = transpose(%216, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %793 = sum(%217, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %794 = transpose(%223, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %795 = sum(%231, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %796 = transpose(%237, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %797 = sum(%245, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %798 = transpose(%251, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %799 = sum(%252, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %800 = transpose(%258, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 960, 1, 1), float32] */;
  %801 = sum(%266, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %802 = transpose(%272, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %803 = sum(%280, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %804 = transpose(%286, axes=[1, 0, 2, 3]) /* ty=Tensor[(960, 160, 1, 1), float32] */;
  %805 = sum(%287, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %806 = transpose(%293, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %807 = sum(%301, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %808 = strided_slice(%308, begin=[0, 0, 0, 0], end=[576, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %809 = sum(%316, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %810 = transpose(%322, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %811 = sum(%323, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %812 = transpose(%329, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %813 = sum(%337, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %814 = transpose(%343, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %815 = sum(%351, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %816 = transpose(%357, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %817 = sum(%358, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %818 = transpose(%364, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %819 = sum(%372, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %820 = transpose(%378, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %821 = sum(%386, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %822 = transpose(%392, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %823 = sum(%393, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %824 = transpose(%399, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %825 = sum(%407, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %826 = transpose(%413, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %827 = sum(%421, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %828 = transpose(%427, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %829 = sum(%428, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %830 = transpose(%434, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %831 = sum(%442, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %832 = transpose(%448, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %833 = sum(%456, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %834 = transpose(%462, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %835 = sum(%463, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %836 = transpose(%469, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %837 = sum(%477, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %838 = transpose(%483, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %839 = sum(%491, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %840 = transpose(%497, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %841 = sum(%498, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %842 = transpose(%504, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %843 = sum(%512, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %844 = transpose(%518, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %845 = sum(%526, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %846 = transpose(%532, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %847 = sum(%533, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %848 = transpose(%539, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %849 = sum(%547, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %850 = strided_slice(%554, begin=[0, 0, 0, 0], end=[192, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %851 = sum(%562, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %852 = transpose(%568, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %853 = sum(%569, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %854 = transpose(%575, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %855 = sum(%583, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %856 = transpose(%589, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %857 = sum(%597, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %858 = transpose(%603, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %859 = sum(%604, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %860 = transpose(%610, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %861 = sum(%618, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %862 = transpose(%624, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %863 = sum(%632, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %864 = transpose(%638, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %865 = sum(%639, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %866 = transpose(%645, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %867 = sum(%653, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %868 = strided_slice(%660, begin=[0, 0, 0, 0], end=[144, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %869 = sum(%668, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %870 = transpose(%674, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %871 = sum(%675, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %872 = transpose(%681, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %873 = sum(%689, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %874 = transpose(%695, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %875 = sum(%703, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %876 = transpose(%709, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %877 = sum(%710, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %878 = transpose(%716, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 96, 1, 1), float32] */;
  %879 = sum(%724, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %880 = strided_slice(%731, begin=[0, 0, 0, 0], end=[96, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %881 = sum(%739, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %882 = transpose(%745, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %883 = sum(%746, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %884 = transpose(%752, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 32, 1, 1), float32] */;
  %885 = sum(%760, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %886 = transpose(%766, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %887 = sum(%774, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %888 = strided_slice(%781, begin=[0, 0, 0, 0], end=[32, 3, 3, 3], strides=[1], axes=None) /* ty=Tensor[(32, 3, 3, 3), float32] */;

}