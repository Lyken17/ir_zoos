fn (%input: Tensor[(1, 3, 128, 128), float32], %v0_0_0_weight: Tensor[(32, 3, 3, 3), float32], %v0_0_0_bias: Tensor[(32), float32], %v0_1_conv_0_0_weight: Tensor[(32, 1, 3, 3), float32], %v0_1_conv_0_0_bias: Tensor[(32), float32], %v0_1_conv_1_weight: Tensor[(16, 32, 1, 1), float32], %v0_1_conv_1_bias: Tensor[(16), float32], %v0_2_conv_0_0_weight: Tensor[(96, 16, 1, 1), float32], %v0_2_conv_0_0_bias: Tensor[(96), float32], %v0_2_conv_1_0_weight: Tensor[(96, 1, 3, 3), float32], %v0_2_conv_1_0_bias: Tensor[(96), float32], %v0_2_conv_2_weight: Tensor[(24, 96, 1, 1), float32], %v0_2_conv_2_bias: Tensor[(24), float32], %v0_3_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_3_conv_0_0_bias: Tensor[(144), float32], %v0_3_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_3_conv_1_0_bias: Tensor[(144), float32], %v0_3_conv_2_weight: Tensor[(24, 144, 1, 1), float32], %v0_3_conv_2_bias: Tensor[(24), float32], %v0_4_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_4_conv_0_0_bias: Tensor[(144), float32], %v0_4_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_4_conv_1_0_bias: Tensor[(144), float32], %v0_4_conv_2_weight: Tensor[(32, 144, 1, 1), float32], %v0_4_conv_2_bias: Tensor[(32), float32], %v0_5_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_5_conv_0_0_bias: Tensor[(192), float32], %v0_5_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_5_conv_1_0_bias: Tensor[(192), float32], %v0_5_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_5_conv_2_bias: Tensor[(32), float32], %v0_6_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_6_conv_0_0_bias: Tensor[(192), float32], %v0_6_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_6_conv_1_0_bias: Tensor[(192), float32], %v0_6_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_6_conv_2_bias: Tensor[(32), float32], %v0_7_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_7_conv_0_0_bias: Tensor[(192), float32], %v0_7_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_7_conv_1_0_bias: Tensor[(192), float32], %v0_7_conv_2_weight: Tensor[(64, 192, 1, 1), float32], %v0_7_conv_2_bias: Tensor[(64), float32], %v0_8_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_8_conv_0_0_bias: Tensor[(384), float32], %v0_8_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_8_conv_1_0_bias: Tensor[(384), float32], %v0_8_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_8_conv_2_bias: Tensor[(64), float32], %v0_9_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_9_conv_0_0_bias: Tensor[(384), float32], %v0_9_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_9_conv_1_0_bias: Tensor[(384), float32], %v0_9_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_9_conv_2_bias: Tensor[(64), float32], %v0_10_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_10_conv_0_0_bias: Tensor[(384), float32], %v0_10_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_10_conv_1_0_bias: Tensor[(384), float32], %v0_10_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_10_conv_2_bias: Tensor[(64), float32], %v0_11_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_11_conv_0_0_bias: Tensor[(384), float32], %v0_11_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_11_conv_1_0_bias: Tensor[(384), float32], %v0_11_conv_2_weight: Tensor[(96, 384, 1, 1), float32], %v0_11_conv_2_bias: Tensor[(96), float32], %v0_12_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_12_conv_0_0_bias: Tensor[(576), float32], %v0_12_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_12_conv_1_0_bias: Tensor[(576), float32], %v0_12_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_12_conv_2_bias: Tensor[(96), float32], %v0_13_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_13_conv_0_0_bias: Tensor[(576), float32], %v0_13_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_13_conv_1_0_bias: Tensor[(576), float32], %v0_13_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_13_conv_2_bias: Tensor[(96), float32], %v0_14_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_14_conv_0_0_bias: Tensor[(576), float32], %v0_14_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_14_conv_1_0_bias: Tensor[(576), float32], %v0_14_conv_2_weight: Tensor[(160, 576, 1, 1), float32], %v0_14_conv_2_bias: Tensor[(160), float32], %v0_15_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_15_conv_0_0_bias: Tensor[(960), float32], %v0_15_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_15_conv_1_0_bias: Tensor[(960), float32], %v0_15_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_15_conv_2_bias: Tensor[(160), float32], %v0_16_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_16_conv_0_0_bias: Tensor[(960), float32], %v0_16_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_16_conv_1_0_bias: Tensor[(960), float32], %v0_16_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_16_conv_2_bias: Tensor[(160), float32], %v0_17_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_17_conv_0_0_bias: Tensor[(960), float32], %v0_17_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_17_conv_1_0_bias: Tensor[(960), float32], %v0_17_conv_2_weight: Tensor[(320, 960, 1, 1), float32], %v0_17_conv_2_bias: Tensor[(320), float32], %v0_18_0_weight: Tensor[(1280, 320, 1, 1), float32], %v0_18_0_bias: Tensor[(1280), float32], %v3_1_weight: Tensor[(10, 1280), float32], %v3_1_bias: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32,) {
  %0 = nn.conv2d(%input, %v0_0_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %1 = nn.bias_add(%0, %v0_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %2 = clip(%1, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %3 = reshape(%v0_1_conv_0_0_weight, newshape=[32, 1, 3, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %4 = nn.conv2d(%2, %3, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %5 = nn.bias_add(%4, %v0_1_conv_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %6 = clip(%5, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %7 = nn.conv2d(%6, %v0_1_conv_1_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %8 = nn.bias_add(%7, %v0_1_conv_1_bias) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %9 = nn.conv2d(%8, %v0_2_conv_0_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %10 = nn.bias_add(%9, %v0_2_conv_0_0_bias) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %11 = clip(%10, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %12 = reshape(%v0_2_conv_1_0_weight, newshape=[96, 1, 3, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %13 = nn.conv2d(%11, %12, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %14 = nn.bias_add(%13, %v0_2_conv_1_0_bias) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %15 = clip(%14, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %16 = nn.conv2d(%15, %v0_2_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %17 = nn.bias_add(%16, %v0_2_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %18 = nn.conv2d(%17, %v0_3_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %19 = nn.bias_add(%18, %v0_3_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %20 = clip(%19, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %21 = reshape(%v0_3_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %22 = nn.conv2d(%20, %21, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %23 = nn.bias_add(%22, %v0_3_conv_1_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %24 = clip(%23, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %25 = nn.conv2d(%24, %v0_3_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %26 = nn.bias_add(%25, %v0_3_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %27 = add(%17, %26) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %28 = nn.conv2d(%27, %v0_4_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %29 = nn.bias_add(%28, %v0_4_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %31 = reshape(%v0_4_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %32 = nn.conv2d(%30, %31, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %33 = nn.bias_add(%32, %v0_4_conv_1_0_bias) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %34 = clip(%33, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %35 = nn.conv2d(%34, %v0_4_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %36 = nn.bias_add(%35, %v0_4_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %37 = nn.conv2d(%36, %v0_5_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %38 = nn.bias_add(%37, %v0_5_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %39 = clip(%38, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %40 = reshape(%v0_5_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %41 = nn.conv2d(%39, %40, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %42 = nn.bias_add(%41, %v0_5_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %43 = clip(%42, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %44 = nn.conv2d(%43, %v0_5_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %45 = nn.bias_add(%44, %v0_5_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %46 = add(%36, %45) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %47 = nn.conv2d(%46, %v0_6_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %48 = nn.bias_add(%47, %v0_6_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %49 = clip(%48, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %50 = reshape(%v0_6_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %51 = nn.conv2d(%49, %50, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %52 = nn.bias_add(%51, %v0_6_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %54 = nn.conv2d(%53, %v0_6_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %55 = nn.bias_add(%54, %v0_6_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %56 = add(%46, %55) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %57 = nn.conv2d(%56, %v0_7_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %58 = nn.bias_add(%57, %v0_7_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %59 = clip(%58, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %60 = reshape(%v0_7_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %61 = nn.conv2d(%59, %60, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %62 = nn.bias_add(%61, %v0_7_conv_1_0_bias) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %63 = clip(%62, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %64 = nn.conv2d(%63, %v0_7_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %65 = nn.bias_add(%64, %v0_7_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %66 = nn.conv2d(%65, %v0_8_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %67 = nn.bias_add(%66, %v0_8_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %68 = clip(%67, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %69 = reshape(%v0_8_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %70 = nn.conv2d(%68, %69, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %71 = nn.bias_add(%70, %v0_8_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %72 = clip(%71, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %73 = nn.conv2d(%72, %v0_8_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %74 = nn.bias_add(%73, %v0_8_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %75 = add(%65, %74) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %76 = nn.conv2d(%75, %v0_9_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %77 = nn.bias_add(%76, %v0_9_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %78 = clip(%77, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %79 = reshape(%v0_9_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %80 = nn.conv2d(%78, %79, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %81 = nn.bias_add(%80, %v0_9_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %83 = nn.conv2d(%82, %v0_9_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %84 = nn.bias_add(%83, %v0_9_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %85 = add(%75, %84) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %86 = nn.conv2d(%85, %v0_10_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %87 = nn.bias_add(%86, %v0_10_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %89 = reshape(%v0_10_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %90 = nn.conv2d(%88, %89, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %91 = nn.bias_add(%90, %v0_10_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %92 = clip(%91, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %93 = nn.conv2d(%92, %v0_10_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %94 = nn.bias_add(%93, %v0_10_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %95 = add(%85, %94) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %96 = nn.conv2d(%95, %v0_11_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %97 = nn.bias_add(%96, %v0_11_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %98 = clip(%97, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %99 = reshape(%v0_11_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %100 = nn.conv2d(%98, %99, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %101 = nn.bias_add(%100, %v0_11_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %102 = clip(%101, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %103 = nn.conv2d(%102, %v0_11_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %104 = nn.bias_add(%103, %v0_11_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %105 = nn.conv2d(%104, %v0_12_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %106 = nn.bias_add(%105, %v0_12_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %107 = clip(%106, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %108 = reshape(%v0_12_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %109 = nn.conv2d(%107, %108, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %110 = nn.bias_add(%109, %v0_12_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %111 = clip(%110, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %112 = nn.conv2d(%111, %v0_12_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %113 = nn.bias_add(%112, %v0_12_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %114 = add(%104, %113) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %115 = nn.conv2d(%114, %v0_13_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %116 = nn.bias_add(%115, %v0_13_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %118 = reshape(%v0_13_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %119 = nn.conv2d(%117, %118, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %120 = nn.bias_add(%119, %v0_13_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %121 = clip(%120, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %122 = nn.conv2d(%121, %v0_13_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %123 = nn.bias_add(%122, %v0_13_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %124 = add(%114, %123) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %125 = nn.conv2d(%124, %v0_14_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %126 = nn.bias_add(%125, %v0_14_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %127 = clip(%126, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %128 = reshape(%v0_14_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %129 = nn.conv2d(%127, %128, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %130 = nn.bias_add(%129, %v0_14_conv_1_0_bias) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %131 = clip(%130, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %132 = nn.conv2d(%131, %v0_14_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %133 = nn.bias_add(%132, %v0_14_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %134 = nn.conv2d(%133, %v0_15_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %135 = nn.bias_add(%134, %v0_15_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %136 = clip(%135, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %137 = reshape(%v0_15_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %138 = nn.conv2d(%136, %137, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %139 = nn.bias_add(%138, %v0_15_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %140 = clip(%139, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %141 = nn.conv2d(%140, %v0_15_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = nn.bias_add(%141, %v0_15_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %143 = add(%133, %142) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = nn.conv2d(%143, %v0_16_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %145 = nn.bias_add(%144, %v0_16_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %146 = clip(%145, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %147 = reshape(%v0_16_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %148 = nn.conv2d(%146, %147, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %149 = nn.bias_add(%148, %v0_16_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %150 = clip(%149, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %151 = nn.conv2d(%150, %v0_16_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %152 = nn.bias_add(%151, %v0_16_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %153 = add(%143, %152) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %154 = nn.conv2d(%153, %v0_17_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %155 = nn.bias_add(%154, %v0_17_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %156 = clip(%155, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %157 = reshape(%v0_17_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %158 = nn.conv2d(%156, %157, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %159 = nn.bias_add(%158, %v0_17_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %160 = clip(%159, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %161 = nn.conv2d(%160, %v0_17_conv_2_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %162 = nn.bias_add(%161, %v0_17_conv_2_bias) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %163 = nn.conv2d(%162, %v0_18_0_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %164 = nn.bias_add(%163, %v0_18_0_bias) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %165 = clip(%164, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %166 = nn.adaptive_avg_pool2d(%165, output_size=[1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %167 = reshape(%166, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %168 = squeeze(%167, axis=[2, 3]) /* ty=Tensor[(1, 1280), float32] */;
  %169 = nn.dense(%168, %v3_1_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %170 = nn.bias_add(%169, %v3_1_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %171 = nn.log_softmax(%170) /* ty=Tensor[(1, 10), float32] */;
  %172 = nn.cross_entropy_with_logits(%171, %label) /* ty=float32 */;
  (%172,)
}