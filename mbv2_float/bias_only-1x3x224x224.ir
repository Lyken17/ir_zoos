fn (%input: Tensor[(1, 3, 224, 224), float32], %v0_0_0_weight: Tensor[(32, 3, 3, 3), float32], %v0_0_0_bias: Tensor[(32), float32], %v0_1_conv_0_0_weight: Tensor[(32, 1, 3, 3), float32], %v0_1_conv_0_0_bias: Tensor[(32), float32], %v0_1_conv_1_weight: Tensor[(16, 32, 1, 1), float32], %v0_1_conv_1_bias: Tensor[(16), float32], %v0_2_conv_0_0_weight: Tensor[(96, 16, 1, 1), float32], %v0_2_conv_0_0_bias: Tensor[(96), float32], %v0_2_conv_1_0_weight: Tensor[(96, 1, 3, 3), float32], %v0_2_conv_1_0_bias: Tensor[(96), float32], %v0_2_conv_2_weight: Tensor[(24, 96, 1, 1), float32], %v0_2_conv_2_bias: Tensor[(24), float32], %v0_3_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_3_conv_0_0_bias: Tensor[(144), float32], %v0_3_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_3_conv_1_0_bias: Tensor[(144), float32], %v0_3_conv_2_weight: Tensor[(24, 144, 1, 1), float32], %v0_3_conv_2_bias: Tensor[(24), float32], %v0_4_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_4_conv_0_0_bias: Tensor[(144), float32], %v0_4_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_4_conv_1_0_bias: Tensor[(144), float32], %v0_4_conv_2_weight: Tensor[(32, 144, 1, 1), float32], %v0_4_conv_2_bias: Tensor[(32), float32], %v0_5_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_5_conv_0_0_bias: Tensor[(192), float32], %v0_5_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_5_conv_1_0_bias: Tensor[(192), float32], %v0_5_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_5_conv_2_bias: Tensor[(32), float32], %v0_6_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_6_conv_0_0_bias: Tensor[(192), float32], %v0_6_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_6_conv_1_0_bias: Tensor[(192), float32], %v0_6_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_6_conv_2_bias: Tensor[(32), float32], %v0_7_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_7_conv_0_0_bias: Tensor[(192), float32], %v0_7_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_7_conv_1_0_bias: Tensor[(192), float32], %v0_7_conv_2_weight: Tensor[(64, 192, 1, 1), float32], %v0_7_conv_2_bias: Tensor[(64), float32], %v0_8_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_8_conv_0_0_bias: Tensor[(384), float32], %v0_8_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_8_conv_1_0_bias: Tensor[(384), float32], %v0_8_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_8_conv_2_bias: Tensor[(64), float32], %v0_9_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_9_conv_0_0_bias: Tensor[(384), float32], %v0_9_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_9_conv_1_0_bias: Tensor[(384), float32], %v0_9_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_9_conv_2_bias: Tensor[(64), float32], %v0_10_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_10_conv_0_0_bias: Tensor[(384), float32], %v0_10_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_10_conv_1_0_bias: Tensor[(384), float32], %v0_10_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_10_conv_2_bias: Tensor[(64), float32], %v0_11_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_11_conv_0_0_bias: Tensor[(384), float32], %v0_11_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_11_conv_1_0_bias: Tensor[(384), float32], %v0_11_conv_2_weight: Tensor[(96, 384, 1, 1), float32], %v0_11_conv_2_bias: Tensor[(96), float32], %v0_12_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_12_conv_0_0_bias: Tensor[(576), float32], %v0_12_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_12_conv_1_0_bias: Tensor[(576), float32], %v0_12_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_12_conv_2_bias: Tensor[(96), float32], %v0_13_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_13_conv_0_0_bias: Tensor[(576), float32], %v0_13_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_13_conv_1_0_bias: Tensor[(576), float32], %v0_13_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_13_conv_2_bias: Tensor[(96), float32], %v0_14_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_14_conv_0_0_bias: Tensor[(576), float32], %v0_14_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_14_conv_1_0_bias: Tensor[(576), float32], %v0_14_conv_2_weight: Tensor[(160, 576, 1, 1), float32], %v0_14_conv_2_bias: Tensor[(160), float32], %v0_15_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_15_conv_0_0_bias: Tensor[(960), float32], %v0_15_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_15_conv_1_0_bias: Tensor[(960), float32], %v0_15_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_15_conv_2_bias: Tensor[(160), float32], %v0_16_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_16_conv_0_0_bias: Tensor[(960), float32], %v0_16_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_16_conv_1_0_bias: Tensor[(960), float32], %v0_16_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_16_conv_2_bias: Tensor[(160), float32], %v0_17_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_17_conv_0_0_bias: Tensor[(960), float32], %v0_17_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_17_conv_1_0_bias: Tensor[(960), float32], %v0_17_conv_2_weight: Tensor[(320, 960, 1, 1), float32], %v0_17_conv_2_bias: Tensor[(320), float32], %v0_18_0_weight: Tensor[(1280, 320, 1, 1), float32], %v0_18_0_bias: Tensor[(1280), float32], %v2_1_weight: Tensor[(10, 1280), float32], %v2_1_bias: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 1280), float32], Tensor[(1280), float32], Tensor[(320), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(160), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(160), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(160), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(144), float32], Tensor[(144), float32], Tensor[(24), float32], Tensor[(144), float32], Tensor[(144), float32], Tensor[(24), float32], Tensor[(96), float32], Tensor[(96), float32], Tensor[(16), float32], Tensor[(32), float32], Tensor[(32), float32]) {
  %0 = nn.conv2d(%input, %v0_0_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %1 = nn.bias_add(%0, %v0_0_0_bias) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %2 = clip(%1, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %3 = nn.conv2d(%2, %v0_1_conv_0_0_weight, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %4 = nn.bias_add(%3, %v0_1_conv_0_0_bias) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %5 = clip(%4, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %6 = nn.conv2d(%5, %v0_1_conv_1_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %7 = nn.bias_add(%6, %v0_1_conv_1_bias) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %8 = nn.conv2d(%7, %v0_2_conv_0_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %9 = nn.bias_add(%8, %v0_2_conv_0_0_bias) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %10 = clip(%9, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %11 = nn.conv2d(%10, %v0_2_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %12 = nn.bias_add(%11, %v0_2_conv_1_0_bias) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %13 = clip(%12, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %14 = nn.conv2d(%13, %v0_2_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %15 = nn.bias_add(%14, %v0_2_conv_2_bias) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %16 = nn.conv2d(%15, %v0_3_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %17 = nn.bias_add(%16, %v0_3_conv_0_0_bias) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %18 = clip(%17, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %19 = nn.conv2d(%18, %v0_3_conv_1_0_weight, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %20 = nn.bias_add(%19, %v0_3_conv_1_0_bias) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %21 = clip(%20, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %22 = nn.conv2d(%21, %v0_3_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %23 = nn.bias_add(%22, %v0_3_conv_2_bias) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %24 = add(%15, %23) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %25 = nn.conv2d(%24, %v0_4_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %26 = nn.bias_add(%25, %v0_4_conv_0_0_bias) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %27 = clip(%26, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %28 = nn.conv2d(%27, %v0_4_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %29 = nn.bias_add(%28, %v0_4_conv_1_0_bias) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %31 = nn.conv2d(%30, %v0_4_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %32 = nn.bias_add(%31, %v0_4_conv_2_bias) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %33 = nn.conv2d(%32, %v0_5_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %34 = nn.bias_add(%33, %v0_5_conv_0_0_bias) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %35 = clip(%34, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %36 = nn.conv2d(%35, %v0_5_conv_1_0_weight, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %37 = nn.bias_add(%36, %v0_5_conv_1_0_bias) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %38 = clip(%37, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %39 = nn.conv2d(%38, %v0_5_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %40 = nn.bias_add(%39, %v0_5_conv_2_bias) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %41 = add(%32, %40) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %42 = nn.conv2d(%41, %v0_6_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %43 = nn.bias_add(%42, %v0_6_conv_0_0_bias) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %44 = clip(%43, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %45 = nn.conv2d(%44, %v0_6_conv_1_0_weight, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %46 = nn.bias_add(%45, %v0_6_conv_1_0_bias) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %47 = clip(%46, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %48 = nn.conv2d(%47, %v0_6_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %49 = nn.bias_add(%48, %v0_6_conv_2_bias) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %50 = add(%41, %49) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %51 = nn.conv2d(%50, %v0_7_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %52 = nn.bias_add(%51, %v0_7_conv_0_0_bias) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %54 = nn.conv2d(%53, %v0_7_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %55 = nn.bias_add(%54, %v0_7_conv_1_0_bias) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %56 = clip(%55, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %57 = nn.conv2d(%56, %v0_7_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %58 = nn.bias_add(%57, %v0_7_conv_2_bias) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %59 = nn.conv2d(%58, %v0_8_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %60 = nn.bias_add(%59, %v0_8_conv_0_0_bias) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %61 = clip(%60, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %62 = nn.conv2d(%61, %v0_8_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %63 = nn.bias_add(%62, %v0_8_conv_1_0_bias) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %64 = clip(%63, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %65 = nn.conv2d(%64, %v0_8_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %66 = nn.bias_add(%65, %v0_8_conv_2_bias) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %67 = add(%58, %66) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %68 = nn.conv2d(%67, %v0_9_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %69 = nn.bias_add(%68, %v0_9_conv_0_0_bias) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %70 = clip(%69, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %71 = nn.conv2d(%70, %v0_9_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %72 = nn.bias_add(%71, %v0_9_conv_1_0_bias) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %73 = clip(%72, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %74 = nn.conv2d(%73, %v0_9_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %75 = nn.bias_add(%74, %v0_9_conv_2_bias) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %76 = add(%67, %75) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %77 = nn.conv2d(%76, %v0_10_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %78 = nn.bias_add(%77, %v0_10_conv_0_0_bias) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %79 = clip(%78, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %80 = nn.conv2d(%79, %v0_10_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %81 = nn.bias_add(%80, %v0_10_conv_1_0_bias) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %83 = nn.conv2d(%82, %v0_10_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %84 = nn.bias_add(%83, %v0_10_conv_2_bias) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %85 = add(%76, %84) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %86 = nn.conv2d(%85, %v0_11_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %87 = nn.bias_add(%86, %v0_11_conv_0_0_bias) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %89 = nn.conv2d(%88, %v0_11_conv_1_0_weight, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %90 = nn.bias_add(%89, %v0_11_conv_1_0_bias) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %91 = clip(%90, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %92 = nn.conv2d(%91, %v0_11_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %93 = nn.bias_add(%92, %v0_11_conv_2_bias) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %94 = nn.conv2d(%93, %v0_12_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %95 = nn.bias_add(%94, %v0_12_conv_0_0_bias) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %96 = clip(%95, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %97 = nn.conv2d(%96, %v0_12_conv_1_0_weight, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %98 = nn.bias_add(%97, %v0_12_conv_1_0_bias) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %99 = clip(%98, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %100 = nn.conv2d(%99, %v0_12_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %101 = nn.bias_add(%100, %v0_12_conv_2_bias) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %102 = add(%93, %101) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %103 = nn.conv2d(%102, %v0_13_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %104 = nn.bias_add(%103, %v0_13_conv_0_0_bias) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %105 = clip(%104, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %106 = nn.conv2d(%105, %v0_13_conv_1_0_weight, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %107 = nn.bias_add(%106, %v0_13_conv_1_0_bias) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %108 = clip(%107, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %109 = nn.conv2d(%108, %v0_13_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %110 = nn.bias_add(%109, %v0_13_conv_2_bias) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %111 = add(%102, %110) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %112 = nn.conv2d(%111, %v0_14_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %113 = nn.bias_add(%112, %v0_14_conv_0_0_bias) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %114 = clip(%113, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %115 = nn.conv2d(%114, %v0_14_conv_1_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %116 = nn.bias_add(%115, %v0_14_conv_1_0_bias) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %118 = nn.conv2d(%117, %v0_14_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %119 = nn.bias_add(%118, %v0_14_conv_2_bias) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %120 = nn.conv2d(%119, %v0_15_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %121 = nn.bias_add(%120, %v0_15_conv_0_0_bias) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %122 = clip(%121, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %123 = nn.conv2d(%122, %v0_15_conv_1_0_weight, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %124 = nn.bias_add(%123, %v0_15_conv_1_0_bias) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %125 = clip(%124, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %126 = nn.conv2d(%125, %v0_15_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %127 = nn.bias_add(%126, %v0_15_conv_2_bias) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %128 = add(%119, %127) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %129 = nn.conv2d(%128, %v0_16_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %130 = nn.bias_add(%129, %v0_16_conv_0_0_bias) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %131 = clip(%130, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %132 = nn.conv2d(%131, %v0_16_conv_1_0_weight, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %133 = nn.bias_add(%132, %v0_16_conv_1_0_bias) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %134 = clip(%133, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %135 = nn.conv2d(%134, %v0_16_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %136 = nn.bias_add(%135, %v0_16_conv_2_bias) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %137 = add(%128, %136) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %138 = nn.conv2d(%137, %v0_17_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %139 = nn.bias_add(%138, %v0_17_conv_0_0_bias) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %140 = clip(%139, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %141 = nn.conv2d(%140, %v0_17_conv_1_0_weight, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %142 = nn.bias_add(%141, %v0_17_conv_1_0_bias) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %143 = clip(%142, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %144 = nn.conv2d(%143, %v0_17_conv_2_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 7, 7), float32] */;
  %145 = nn.bias_add(%144, %v0_17_conv_2_bias) /* ty=Tensor[(1, 320, 7, 7), float32] */;
  %146 = nn.conv2d(%145, %v0_18_0_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %147 = nn.bias_add(%146, %v0_18_0_bias) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %148 = clip(%147, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %149 = mean(%148, axis=[-1]) /* ty=Tensor[(1, 1280, 7), float32] */;
  %150 = mean(%149, axis=[-1]) /* ty=Tensor[(1, 1280), float32] */;
  %151 = nn.dense(%150, %v2_1_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %152 = nn.bias_add(%151, %v2_1_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %153 = nn.log_softmax(%152) /* ty=Tensor[(1, 10), float32] */;
  %154 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %155 = negative(%154) /* ty=float32 */;
  %156 = multiply(%155, %label) /* ty=Tensor[(1, 10), float32] */;
  %157 = sum(%156, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %158 = exp(%153) /* ty=Tensor[(1, 10), float32] */;
  %159 = multiply(%157, %158) /* ty=Tensor[(1, 10), float32] */;
  %160 = subtract(%156, %159) /* ty=Tensor[(1, 10), float32] */;
  %161 = transpose(%160, axes=None) /* ty=Tensor[(10, 1), float32] */;
  %162 = broadcast_to(0f /* ty=float32 */, shape=[1, 1280, 7, 7]) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %163 = broadcast_to(6f /* ty=float32 */, shape=[1, 1280, 7, 7]) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %164 = nn.matmul(%160, %v2_1_weight, units=None) /* ty=Tensor[(1, 1280), float32] */;
  %165 = expand_dims(%164, axis=2) /* ty=Tensor[(1, 1280, 1), float32] */;
  %166 = multiply(%165, 0.142857f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1), float32] */;
  %167 = broadcast_to(%166, shape=[1, 1280, 7]) /* ty=Tensor[(1, 1280, 7), float32] */;
  %168 = expand_dims(%167, axis=3) /* ty=Tensor[(1, 1280, 7, 1), float32] */;
  %169 = multiply(%168, 0.142857f /* ty=float32 */) /* ty=Tensor[(1, 1280, 7, 1), float32] */;
  %170 = less(%163, %147) /* ty=Tensor[(1, 1280, 7, 7), bool] */;
  %171 = zeros(shape=[1, 1280, 7, 7], dtype="float32") /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %172 = broadcast_to(%169, shape=[1, 1280, 7, 7]) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %173 = less(%147, %162) /* ty=Tensor[(1, 1280, 7, 7), bool] */;
  %174 = where(%170, %171, %172) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %175 = where(%173, %171, %174) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %176 = nn.conv2d_transpose(%175, %v0_18_0_weight, channels=320, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 320, 7, 7), float32] */;
  %177 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %178 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %179 = less(%178, %142) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %180 = zeros(shape=[1, 960, 7, 7], dtype="float32") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %181 = nn.conv2d_transpose(%176, %v0_17_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %182 = less(%142, %177) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %183 = where(%179, %180, %181) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %184 = where(%182, %180, %183) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %185 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %186 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %187 = less(%186, %139) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %188 = zeros(shape=[1, 960, 7, 7], dtype="float32") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %189 = nn.conv2d_transpose(%184, %v0_17_conv_1_0_weight, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %190 = less(%139, %185) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %191 = where(%187, %188, %189) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %192 = where(%190, %188, %191) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %193 = nn.conv2d_transpose(%192, %v0_17_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %194 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %195 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %196 = less(%195, %133) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %197 = zeros(shape=[1, 960, 7, 7], dtype="float32") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %198 = nn.conv2d_transpose(%193, %v0_16_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %199 = less(%133, %194) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %200 = where(%196, %197, %198) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %201 = where(%199, %197, %200) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %202 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %203 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %204 = less(%203, %130) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %205 = zeros(shape=[1, 960, 7, 7], dtype="float32") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %206 = nn.conv2d_transpose(%201, %v0_16_conv_1_0_weight, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %207 = less(%130, %202) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %208 = where(%204, %205, %206) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %209 = where(%207, %205, %208) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %210 = nn.conv2d_transpose(%209, %v0_16_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %211 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %212 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %213 = less(%212, %124) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %214 = zeros(shape=[1, 960, 7, 7], dtype="float32") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %215 = nn.conv2d_transpose(%210, %v0_15_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %216 = less(%124, %211) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %217 = where(%213, %214, %215) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %218 = where(%216, %214, %217) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %219 = broadcast_to(0f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %220 = broadcast_to(6f /* ty=float32 */, shape=[1, 960, 7, 7]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %221 = less(%220, %121) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %222 = zeros(shape=[1, 960, 7, 7], dtype="float32") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %223 = nn.conv2d_transpose(%218, %v0_15_conv_1_0_weight, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %224 = less(%121, %219) /* ty=Tensor[(1, 960, 7, 7), bool] */;
  %225 = where(%221, %222, %223) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %226 = where(%224, %222, %225) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %227 = nn.conv2d_transpose(%226, %v0_15_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %228 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 7, 7]) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %229 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 7, 7]) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %230 = less(%229, %116) /* ty=Tensor[(1, 576, 7, 7), bool] */;
  %231 = zeros(shape=[1, 576, 7, 7], dtype="float32") /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %232 = nn.conv2d_transpose(%227, %v0_14_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %233 = less(%116, %228) /* ty=Tensor[(1, 576, 7, 7), bool] */;
  %234 = where(%230, %231, %232) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %235 = where(%233, %231, %234) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %236 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %237 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %238 = less(%237, %113) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %239 = zeros(shape=[1, 576, 14, 14], dtype="float32") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %240 = nn.conv2d_transpose(%235, %v0_14_conv_1_0_weight, channels=576, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %241 = less(%113, %236) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %242 = where(%238, %239, %240) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %243 = where(%241, %239, %242) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %244 = nn.conv2d_transpose(%243, %v0_14_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %245 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %246 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %247 = less(%246, %107) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %248 = zeros(shape=[1, 576, 14, 14], dtype="float32") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %249 = nn.conv2d_transpose(%244, %v0_13_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %250 = less(%107, %245) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %251 = where(%247, %248, %249) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %252 = where(%250, %248, %251) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %253 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %254 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %255 = less(%254, %104) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %256 = zeros(shape=[1, 576, 14, 14], dtype="float32") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %257 = nn.conv2d_transpose(%252, %v0_13_conv_1_0_weight, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %258 = less(%104, %253) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %259 = where(%255, %256, %257) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %260 = where(%258, %256, %259) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %261 = nn.conv2d_transpose(%260, %v0_13_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %262 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %263 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %264 = less(%263, %98) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %265 = zeros(shape=[1, 576, 14, 14], dtype="float32") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %266 = nn.conv2d_transpose(%261, %v0_12_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %267 = less(%98, %262) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %268 = where(%264, %265, %266) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %269 = where(%267, %265, %268) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %270 = broadcast_to(0f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %271 = broadcast_to(6f /* ty=float32 */, shape=[1, 576, 14, 14]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %272 = less(%271, %95) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %273 = zeros(shape=[1, 576, 14, 14], dtype="float32") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %274 = nn.conv2d_transpose(%269, %v0_12_conv_1_0_weight, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %275 = less(%95, %270) /* ty=Tensor[(1, 576, 14, 14), bool] */;
  %276 = where(%272, %273, %274) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %277 = where(%275, %273, %276) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %278 = nn.conv2d_transpose(%277, %v0_12_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %279 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %280 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %281 = less(%280, %90) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %282 = zeros(shape=[1, 384, 14, 14], dtype="float32") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %283 = nn.conv2d_transpose(%278, %v0_11_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %284 = less(%90, %279) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %285 = where(%281, %282, %283) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %286 = where(%284, %282, %285) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %287 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %288 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %289 = less(%288, %87) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %290 = zeros(shape=[1, 384, 14, 14], dtype="float32") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %291 = nn.conv2d_transpose(%286, %v0_11_conv_1_0_weight, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %292 = less(%87, %287) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %293 = where(%289, %290, %291) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %294 = where(%292, %290, %293) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %295 = nn.conv2d_transpose(%294, %v0_11_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %296 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %297 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %298 = less(%297, %81) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %299 = zeros(shape=[1, 384, 14, 14], dtype="float32") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %300 = nn.conv2d_transpose(%295, %v0_10_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %301 = less(%81, %296) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %302 = where(%298, %299, %300) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %303 = where(%301, %299, %302) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %304 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %305 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %306 = less(%305, %78) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %307 = zeros(shape=[1, 384, 14, 14], dtype="float32") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %308 = nn.conv2d_transpose(%303, %v0_10_conv_1_0_weight, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %309 = less(%78, %304) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %310 = where(%306, %307, %308) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %311 = where(%309, %307, %310) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %312 = nn.conv2d_transpose(%311, %v0_10_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %313 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %314 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %315 = less(%314, %72) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %316 = zeros(shape=[1, 384, 14, 14], dtype="float32") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %317 = nn.conv2d_transpose(%312, %v0_9_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %318 = less(%72, %313) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %319 = where(%315, %316, %317) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %320 = where(%318, %316, %319) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %321 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %322 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %323 = less(%322, %69) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %324 = zeros(shape=[1, 384, 14, 14], dtype="float32") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %325 = nn.conv2d_transpose(%320, %v0_9_conv_1_0_weight, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %326 = less(%69, %321) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %327 = where(%323, %324, %325) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %328 = where(%326, %324, %327) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %329 = nn.conv2d_transpose(%328, %v0_9_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %330 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %331 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %332 = less(%331, %63) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %333 = zeros(shape=[1, 384, 14, 14], dtype="float32") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %334 = nn.conv2d_transpose(%329, %v0_8_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %335 = less(%63, %330) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %336 = where(%332, %333, %334) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %337 = where(%335, %333, %336) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %338 = broadcast_to(0f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %339 = broadcast_to(6f /* ty=float32 */, shape=[1, 384, 14, 14]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %340 = less(%339, %60) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %341 = zeros(shape=[1, 384, 14, 14], dtype="float32") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %342 = nn.conv2d_transpose(%337, %v0_8_conv_1_0_weight, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %343 = less(%60, %338) /* ty=Tensor[(1, 384, 14, 14), bool] */;
  %344 = where(%340, %341, %342) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %345 = where(%343, %341, %344) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %346 = nn.conv2d_transpose(%345, %v0_8_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %347 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 14, 14]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %348 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 14, 14]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %349 = less(%348, %55) /* ty=Tensor[(1, 192, 14, 14), bool] */;
  %350 = zeros(shape=[1, 192, 14, 14], dtype="float32") /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %351 = nn.conv2d_transpose(%346, %v0_7_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %352 = less(%55, %347) /* ty=Tensor[(1, 192, 14, 14), bool] */;
  %353 = where(%349, %350, %351) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %354 = where(%352, %350, %353) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %355 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %356 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %357 = less(%356, %52) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %358 = zeros(shape=[1, 192, 28, 28], dtype="float32") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %359 = nn.conv2d_transpose(%354, %v0_7_conv_1_0_weight, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %360 = less(%52, %355) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %361 = where(%357, %358, %359) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %362 = where(%360, %358, %361) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %363 = nn.conv2d_transpose(%362, %v0_7_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %364 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %365 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %366 = less(%365, %46) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %367 = zeros(shape=[1, 192, 28, 28], dtype="float32") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %368 = nn.conv2d_transpose(%363, %v0_6_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %369 = less(%46, %364) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %370 = where(%366, %367, %368) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %371 = where(%369, %367, %370) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %372 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %373 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %374 = less(%373, %43) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %375 = zeros(shape=[1, 192, 28, 28], dtype="float32") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %376 = nn.conv2d_transpose(%371, %v0_6_conv_1_0_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %377 = less(%43, %372) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %378 = where(%374, %375, %376) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %379 = where(%377, %375, %378) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %380 = nn.conv2d_transpose(%379, %v0_6_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %381 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %382 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %383 = less(%382, %37) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %384 = zeros(shape=[1, 192, 28, 28], dtype="float32") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %385 = nn.conv2d_transpose(%380, %v0_5_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %386 = less(%37, %381) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %387 = where(%383, %384, %385) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %388 = where(%386, %384, %387) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %389 = broadcast_to(0f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %390 = broadcast_to(6f /* ty=float32 */, shape=[1, 192, 28, 28]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %391 = less(%390, %34) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %392 = zeros(shape=[1, 192, 28, 28], dtype="float32") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %393 = nn.conv2d_transpose(%388, %v0_5_conv_1_0_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %394 = less(%34, %389) /* ty=Tensor[(1, 192, 28, 28), bool] */;
  %395 = where(%391, %392, %393) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %396 = where(%394, %392, %395) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %397 = nn.conv2d_transpose(%396, %v0_5_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %398 = broadcast_to(0f /* ty=float32 */, shape=[1, 144, 28, 28]) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %399 = broadcast_to(6f /* ty=float32 */, shape=[1, 144, 28, 28]) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %400 = less(%399, %29) /* ty=Tensor[(1, 144, 28, 28), bool] */;
  %401 = zeros(shape=[1, 144, 28, 28], dtype="float32") /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %402 = nn.conv2d_transpose(%397, %v0_4_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %403 = less(%29, %398) /* ty=Tensor[(1, 144, 28, 28), bool] */;
  %404 = where(%400, %401, %402) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %405 = where(%403, %401, %404) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %406 = broadcast_to(0f /* ty=float32 */, shape=[1, 144, 56, 56]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %407 = broadcast_to(6f /* ty=float32 */, shape=[1, 144, 56, 56]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %408 = less(%407, %26) /* ty=Tensor[(1, 144, 56, 56), bool] */;
  %409 = zeros(shape=[1, 144, 56, 56], dtype="float32") /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %410 = nn.conv2d_transpose(%405, %v0_4_conv_1_0_weight, channels=144, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %411 = less(%26, %406) /* ty=Tensor[(1, 144, 56, 56), bool] */;
  %412 = where(%408, %409, %410) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %413 = where(%411, %409, %412) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %414 = nn.conv2d_transpose(%413, %v0_4_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %415 = broadcast_to(0f /* ty=float32 */, shape=[1, 144, 56, 56]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %416 = broadcast_to(6f /* ty=float32 */, shape=[1, 144, 56, 56]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %417 = less(%416, %20) /* ty=Tensor[(1, 144, 56, 56), bool] */;
  %418 = zeros(shape=[1, 144, 56, 56], dtype="float32") /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %419 = nn.conv2d_transpose(%414, %v0_3_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %420 = less(%20, %415) /* ty=Tensor[(1, 144, 56, 56), bool] */;
  %421 = where(%417, %418, %419) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %422 = where(%420, %418, %421) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %423 = broadcast_to(0f /* ty=float32 */, shape=[1, 144, 56, 56]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %424 = broadcast_to(6f /* ty=float32 */, shape=[1, 144, 56, 56]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %425 = less(%424, %17) /* ty=Tensor[(1, 144, 56, 56), bool] */;
  %426 = zeros(shape=[1, 144, 56, 56], dtype="float32") /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %427 = nn.conv2d_transpose(%422, %v0_3_conv_1_0_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %428 = less(%17, %423) /* ty=Tensor[(1, 144, 56, 56), bool] */;
  %429 = where(%425, %426, %427) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %430 = where(%428, %426, %429) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %431 = nn.conv2d_transpose(%430, %v0_3_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %432 = broadcast_to(0f /* ty=float32 */, shape=[1, 96, 56, 56]) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %433 = broadcast_to(6f /* ty=float32 */, shape=[1, 96, 56, 56]) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %434 = less(%433, %12) /* ty=Tensor[(1, 96, 56, 56), bool] */;
  %435 = zeros(shape=[1, 96, 56, 56], dtype="float32") /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %436 = nn.conv2d_transpose(%431, %v0_2_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %437 = less(%12, %432) /* ty=Tensor[(1, 96, 56, 56), bool] */;
  %438 = where(%434, %435, %436) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %439 = where(%437, %435, %438) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %440 = broadcast_to(0f /* ty=float32 */, shape=[1, 96, 112, 112]) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %441 = broadcast_to(6f /* ty=float32 */, shape=[1, 96, 112, 112]) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %442 = less(%441, %9) /* ty=Tensor[(1, 96, 112, 112), bool] */;
  %443 = zeros(shape=[1, 96, 112, 112], dtype="float32") /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %444 = nn.conv2d_transpose(%439, %v0_2_conv_1_0_weight, channels=96, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %445 = less(%9, %440) /* ty=Tensor[(1, 96, 112, 112), bool] */;
  %446 = where(%442, %443, %444) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %447 = where(%445, %443, %446) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %448 = nn.conv2d_transpose(%447, %v0_2_conv_0_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %449 = broadcast_to(0f /* ty=float32 */, shape=[1, 32, 112, 112]) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %450 = broadcast_to(6f /* ty=float32 */, shape=[1, 32, 112, 112]) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %451 = less(%450, %4) /* ty=Tensor[(1, 32, 112, 112), bool] */;
  %452 = zeros(shape=[1, 32, 112, 112], dtype="float32") /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %453 = nn.conv2d_transpose(%448, %v0_1_conv_1_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %454 = less(%4, %449) /* ty=Tensor[(1, 32, 112, 112), bool] */;
  %455 = where(%451, %452, %453) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %456 = where(%454, %452, %455) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %457 = broadcast_to(0f /* ty=float32 */, shape=[1, 32, 112, 112]) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %458 = broadcast_to(6f /* ty=float32 */, shape=[1, 32, 112, 112]) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %459 = less(%458, %1) /* ty=Tensor[(1, 32, 112, 112), bool] */;
  %460 = zeros(shape=[1, 32, 112, 112], dtype="float32") /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %461 = nn.conv2d_transpose(%456, %v0_1_conv_0_0_weight, channels=32, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=32, kernel_layout="IOHW") /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %462 = less(%1, %457) /* ty=Tensor[(1, 32, 112, 112), bool] */;
  %463 = where(%459, %460, %461) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %464 = where(%462, %460, %463) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %465 = nn.cross_entropy_with_logits(%153, %label) /* ty=float32 */;
  %466 = sum(%160, axis=[-1], exclude=True) /* ty=Tensor[(10), float32] */;
  %467 = nn.matmul(%161, %150, units=None) /* ty=Tensor[(10, 1280), float32] */;
  %468 = sum(%175, axis=[1], exclude=True) /* ty=Tensor[(1280), float32] */;
  %469 = sum(%176, axis=[1], exclude=True) /* ty=Tensor[(320), float32] */;
  %470 = sum(%184, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %471 = sum(%192, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %472 = sum(%193, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %473 = sum(%201, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %474 = sum(%209, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %475 = sum(%210, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %476 = sum(%218, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %477 = sum(%226, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %478 = sum(%227, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %479 = sum(%235, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %480 = sum(%243, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %481 = sum(%244, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %482 = sum(%252, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %483 = sum(%260, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %484 = sum(%261, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %485 = sum(%269, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %486 = sum(%277, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %487 = sum(%278, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %488 = sum(%286, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %489 = sum(%294, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %490 = sum(%295, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %491 = sum(%303, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %492 = sum(%311, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %493 = sum(%312, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %494 = sum(%320, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %495 = sum(%328, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %496 = sum(%329, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %497 = sum(%337, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %498 = sum(%345, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %499 = sum(%346, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %500 = sum(%354, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %501 = sum(%362, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %502 = sum(%363, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %503 = sum(%371, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %504 = sum(%379, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %505 = sum(%380, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %506 = sum(%388, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %507 = sum(%396, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %508 = sum(%397, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %509 = sum(%405, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %510 = sum(%413, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %511 = sum(%414, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %512 = sum(%422, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %513 = sum(%430, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %514 = sum(%431, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %515 = sum(%439, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %516 = sum(%447, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %517 = sum(%448, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %518 = sum(%456, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %519 = sum(%464, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  (%465, %466, %467, %468, %469, %470, %471, %472, %473, %474, %475, %476, %477, %478, %479, %480, %481, %482, %483, %484, %485, %486, %487, %488, %489, %490, %491, %492, %493, %494, %495, %496, %497, %498, %499, %500, %501, %502, %503, %504, %505, %506, %507, %508, %509, %510, %511, %512, %513, %514, %515, %516, %517, %518, %519)
}