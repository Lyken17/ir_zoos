fn (%input: Tensor[(1, 3, 128, 128), float32], %v0_0_0_weight: Tensor[(32, 3, 3, 3), float32], %v0_0_0_bias: Tensor[(32), float32], %v0_1_conv_0_0_weight: Tensor[(32, 1, 3, 3), float32], %v0_1_conv_0_0_bias: Tensor[(32), float32], %v0_1_conv_1_weight: Tensor[(16, 32, 1, 1), float32], %v0_1_conv_1_bias: Tensor[(16), float32], %v0_2_conv_0_0_weight: Tensor[(96, 16, 1, 1), float32], %v0_2_conv_0_0_bias: Tensor[(96), float32], %v0_2_conv_1_0_weight: Tensor[(96, 1, 3, 3), float32], %v0_2_conv_1_0_bias: Tensor[(96), float32], %v0_2_conv_2_weight: Tensor[(24, 96, 1, 1), float32], %v0_2_conv_2_bias: Tensor[(24), float32], %v0_3_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_3_conv_0_0_bias: Tensor[(144), float32], %v0_3_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_3_conv_1_0_bias: Tensor[(144), float32], %v0_3_conv_2_weight: Tensor[(24, 144, 1, 1), float32], %v0_3_conv_2_bias: Tensor[(24), float32], %v0_4_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_4_conv_0_0_bias: Tensor[(144), float32], %v0_4_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_4_conv_1_0_bias: Tensor[(144), float32], %v0_4_conv_2_weight: Tensor[(32, 144, 1, 1), float32], %v0_4_conv_2_bias: Tensor[(32), float32], %v0_5_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_5_conv_0_0_bias: Tensor[(192), float32], %v0_5_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_5_conv_1_0_bias: Tensor[(192), float32], %v0_5_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_5_conv_2_bias: Tensor[(32), float32], %v0_6_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_6_conv_0_0_bias: Tensor[(192), float32], %v0_6_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_6_conv_1_0_bias: Tensor[(192), float32], %v0_6_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_6_conv_2_bias: Tensor[(32), float32], %v0_7_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_7_conv_0_0_bias: Tensor[(192), float32], %v0_7_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_7_conv_1_0_bias: Tensor[(192), float32], %v0_7_conv_2_weight: Tensor[(64, 192, 1, 1), float32], %v0_7_conv_2_bias: Tensor[(64), float32], %v0_8_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_8_conv_0_0_bias: Tensor[(384), float32], %v0_8_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_8_conv_1_0_bias: Tensor[(384), float32], %v0_8_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_8_conv_2_bias: Tensor[(64), float32], %v0_9_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_9_conv_0_0_bias: Tensor[(384), float32], %v0_9_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_9_conv_1_0_bias: Tensor[(384), float32], %v0_9_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_9_conv_2_bias: Tensor[(64), float32], %v0_10_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_10_conv_0_0_bias: Tensor[(384), float32], %v0_10_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_10_conv_1_0_bias: Tensor[(384), float32], %v0_10_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_10_conv_2_bias: Tensor[(64), float32], %v0_11_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_11_conv_0_0_bias: Tensor[(384), float32], %v0_11_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_11_conv_1_0_bias: Tensor[(384), float32], %v0_11_conv_2_weight: Tensor[(96, 384, 1, 1), float32], %v0_11_conv_2_bias: Tensor[(96), float32], %v0_12_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_12_conv_0_0_bias: Tensor[(576), float32], %v0_12_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_12_conv_1_0_bias: Tensor[(576), float32], %v0_12_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_12_conv_2_bias: Tensor[(96), float32], %v0_13_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_13_conv_0_0_bias: Tensor[(576), float32], %v0_13_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_13_conv_1_0_bias: Tensor[(576), float32], %v0_13_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_13_conv_2_bias: Tensor[(96), float32], %v0_14_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_14_conv_0_0_bias: Tensor[(576), float32], %v0_14_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_14_conv_1_0_bias: Tensor[(576), float32], %v0_14_conv_2_weight: Tensor[(160, 576, 1, 1), float32], %v0_14_conv_2_bias: Tensor[(160), float32], %v0_15_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_15_conv_0_0_bias: Tensor[(960), float32], %v0_15_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_15_conv_1_0_bias: Tensor[(960), float32], %v0_15_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_15_conv_2_bias: Tensor[(160), float32], %v0_16_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_16_conv_0_0_bias: Tensor[(960), float32], %v0_16_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_16_conv_1_0_bias: Tensor[(960), float32], %v0_16_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_16_conv_2_bias: Tensor[(160), float32], %v0_17_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_17_conv_0_0_bias: Tensor[(960), float32], %v0_17_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_17_conv_1_0_bias: Tensor[(960), float32], %v0_17_conv_2_weight: Tensor[(320, 960, 1, 1), float32], %v0_17_conv_2_bias: Tensor[(320), float32], %v0_18_0_weight: Tensor[(1280, 320, 1, 1), float32], %v0_18_0_bias: Tensor[(1280), float32], %v3_1_weight: Tensor[(10, 1280), float32], %v3_1_bias: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(1280), float32], Tensor[(320), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(160), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(160), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(160), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(144), float32], Tensor[(144), float32], Tensor[(24), float32], Tensor[(144), float32], Tensor[(144), float32], Tensor[(24), float32], Tensor[(96), float32], Tensor[(96), float32], Tensor[(16), float32], Tensor[(32), float32], Tensor[(32), float32]) {
  %0 = nn.conv2d(%input, %v0_0_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %1 = nn.bias_add(%0, %v0_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %2 = clip(%1, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %3 = reshape(%v0_1_conv_0_0_weight, newshape=[32, 1, 3, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %4 = nn.conv2d(%2, %3, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %5 = nn.bias_add(%4, %v0_1_conv_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %6 = clip(%5, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %7 = nn.conv2d(%6, %v0_1_conv_1_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %8 = nn.bias_add(%7, %v0_1_conv_1_bias) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %9 = nn.conv2d(%8, %v0_2_conv_0_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %10 = nn.bias_add(%9, %v0_2_conv_0_0_bias) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %11 = clip(%10, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %12 = reshape(%v0_2_conv_1_0_weight, newshape=[96, 1, 3, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %13 = nn.conv2d(%11, %12, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %14 = nn.bias_add(%13, %v0_2_conv_1_0_bias) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %15 = clip(%14, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %16 = nn.conv2d(%15, %v0_2_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %17 = nn.bias_add(%16, %v0_2_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %18 = nn.conv2d(%17, %v0_3_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %19 = nn.bias_add(%18, %v0_3_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %20 = clip(%19, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %21 = reshape(%v0_3_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %22 = nn.conv2d(%20, %21, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %23 = nn.bias_add(%22, %v0_3_conv_1_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %24 = clip(%23, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %25 = nn.conv2d(%24, %v0_3_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %26 = nn.bias_add(%25, %v0_3_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %27 = add(%17, %26) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %28 = nn.conv2d(%27, %v0_4_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %29 = nn.bias_add(%28, %v0_4_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %31 = reshape(%v0_4_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %32 = nn.conv2d(%30, %31, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %33 = nn.bias_add(%32, %v0_4_conv_1_0_bias) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %34 = clip(%33, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %35 = nn.conv2d(%34, %v0_4_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %36 = nn.bias_add(%35, %v0_4_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %37 = nn.conv2d(%36, %v0_5_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %38 = nn.bias_add(%37, %v0_5_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %39 = clip(%38, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %40 = reshape(%v0_5_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %41 = nn.conv2d(%39, %40, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %42 = nn.bias_add(%41, %v0_5_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %43 = clip(%42, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %44 = nn.conv2d(%43, %v0_5_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %45 = nn.bias_add(%44, %v0_5_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %46 = add(%36, %45) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %47 = nn.conv2d(%46, %v0_6_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %48 = nn.bias_add(%47, %v0_6_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %49 = clip(%48, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %50 = reshape(%v0_6_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %51 = nn.conv2d(%49, %50, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %52 = nn.bias_add(%51, %v0_6_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %54 = nn.conv2d(%53, %v0_6_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %55 = nn.bias_add(%54, %v0_6_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %56 = add(%46, %55) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %57 = nn.conv2d(%56, %v0_7_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %58 = nn.bias_add(%57, %v0_7_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %59 = clip(%58, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %60 = reshape(%v0_7_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %61 = nn.conv2d(%59, %60, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %62 = nn.bias_add(%61, %v0_7_conv_1_0_bias) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %63 = clip(%62, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %64 = nn.conv2d(%63, %v0_7_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %65 = nn.bias_add(%64, %v0_7_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %66 = nn.conv2d(%65, %v0_8_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %67 = nn.bias_add(%66, %v0_8_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %68 = clip(%67, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %69 = reshape(%v0_8_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %70 = nn.conv2d(%68, %69, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %71 = nn.bias_add(%70, %v0_8_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %72 = clip(%71, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %73 = nn.conv2d(%72, %v0_8_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %74 = nn.bias_add(%73, %v0_8_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %75 = add(%65, %74) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %76 = nn.conv2d(%75, %v0_9_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %77 = nn.bias_add(%76, %v0_9_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %78 = clip(%77, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %79 = reshape(%v0_9_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %80 = nn.conv2d(%78, %79, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %81 = nn.bias_add(%80, %v0_9_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %83 = nn.conv2d(%82, %v0_9_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %84 = nn.bias_add(%83, %v0_9_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %85 = add(%75, %84) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %86 = nn.conv2d(%85, %v0_10_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %87 = nn.bias_add(%86, %v0_10_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %89 = reshape(%v0_10_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %90 = nn.conv2d(%88, %89, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %91 = nn.bias_add(%90, %v0_10_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %92 = clip(%91, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %93 = nn.conv2d(%92, %v0_10_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %94 = nn.bias_add(%93, %v0_10_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %95 = add(%85, %94) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %96 = nn.conv2d(%95, %v0_11_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %97 = nn.bias_add(%96, %v0_11_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %98 = clip(%97, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %99 = reshape(%v0_11_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %100 = nn.conv2d(%98, %99, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %101 = nn.bias_add(%100, %v0_11_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %102 = clip(%101, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %103 = nn.conv2d(%102, %v0_11_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %104 = nn.bias_add(%103, %v0_11_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %105 = nn.conv2d(%104, %v0_12_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %106 = nn.bias_add(%105, %v0_12_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %107 = clip(%106, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %108 = reshape(%v0_12_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %109 = nn.conv2d(%107, %108, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %110 = nn.bias_add(%109, %v0_12_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %111 = clip(%110, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %112 = nn.conv2d(%111, %v0_12_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %113 = nn.bias_add(%112, %v0_12_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %114 = add(%104, %113) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %115 = nn.conv2d(%114, %v0_13_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %116 = nn.bias_add(%115, %v0_13_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %118 = reshape(%v0_13_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %119 = nn.conv2d(%117, %118, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %120 = nn.bias_add(%119, %v0_13_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %121 = clip(%120, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %122 = nn.conv2d(%121, %v0_13_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %123 = nn.bias_add(%122, %v0_13_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %124 = add(%114, %123) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %125 = nn.conv2d(%124, %v0_14_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %126 = nn.bias_add(%125, %v0_14_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %127 = clip(%126, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %128 = reshape(%v0_14_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %129 = nn.conv2d(%127, %128, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %130 = nn.bias_add(%129, %v0_14_conv_1_0_bias) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %131 = clip(%130, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %132 = nn.conv2d(%131, %v0_14_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %133 = nn.bias_add(%132, %v0_14_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %134 = nn.conv2d(%133, %v0_15_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %135 = nn.bias_add(%134, %v0_15_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %136 = clip(%135, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %137 = reshape(%v0_15_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %138 = nn.conv2d(%136, %137, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %139 = nn.bias_add(%138, %v0_15_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %140 = clip(%139, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %141 = nn.conv2d(%140, %v0_15_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = nn.bias_add(%141, %v0_15_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %143 = add(%133, %142) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = nn.conv2d(%143, %v0_16_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %145 = nn.bias_add(%144, %v0_16_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %146 = clip(%145, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %147 = reshape(%v0_16_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %148 = nn.conv2d(%146, %147, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %149 = nn.bias_add(%148, %v0_16_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %150 = clip(%149, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %151 = nn.conv2d(%150, %v0_16_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %152 = nn.bias_add(%151, %v0_16_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %153 = add(%143, %152) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %154 = nn.conv2d(%153, %v0_17_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %155 = nn.bias_add(%154, %v0_17_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %156 = clip(%155, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %157 = reshape(%v0_17_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %158 = nn.conv2d(%156, %157, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %159 = nn.bias_add(%158, %v0_17_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %160 = clip(%159, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %161 = nn.conv2d(%160, %v0_17_conv_2_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %162 = nn.bias_add(%161, %v0_17_conv_2_bias) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %163 = nn.conv2d(%162, %v0_18_0_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %164 = nn.bias_add(%163, %v0_18_0_bias) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %165 = clip(%164, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %166 = mean(%165, axis=[-1]) /* ty=Tensor[(1, 1280, 4), float32] */;
  %167 = mean(%166, axis=[-1]) /* ty=Tensor[(1, 1280), float32] */;
  %168 = reshape(%167, newshape=[0, -1]) /* ty=Tensor[(1, 1280), float32] */;
  %169 = nn.dense(%168, %v3_1_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %170 = nn.bias_add(%169, %v3_1_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %171 = nn.log_softmax(%170) /* ty=Tensor[(1, 10), float32] */;
  %172 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %173 = negative(%172) /* ty=float32 */;
  %174 = multiply(%173, %label) /* ty=Tensor[(1, 10), float32] */;
  %175 = sum(%174, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %176 = exp(%171) /* ty=Tensor[(1, 10), float32] */;
  %177 = multiply(%175, %176) /* ty=Tensor[(1, 10), float32] */;
  %178 = subtract(%174, %177) /* ty=Tensor[(1, 10), float32] */;
  %179 = zeros(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %180 = multiply(%179, 0f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %181 = ones(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %182 = multiply(%181, 6f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %183 = nn.matmul(%178, %v3_1_weight, units=None) /* ty=Tensor[(1, 1280), float32] */;
  %184 = reshape(%183, newshape=[1, 1280]) /* ty=Tensor[(1, 1280), float32] */;
  %185 = expand_dims(%184, axis=2) /* ty=Tensor[(1, 1280, 1), float32] */;
  %186 = multiply(%185, 0.25f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1), float32] */;
  %187 = broadcast_to(%186, shape=[1, 1280, 4]) /* ty=Tensor[(1, 1280, 4), float32] */;
  %188 = expand_dims(%187, axis=3) /* ty=Tensor[(1, 1280, 4, 1), float32] */;
  %189 = multiply(%188, 0.25f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 1), float32] */;
  %190 = less(%182, %164) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %191 = zeros(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %192 = broadcast_to(%189, shape=[1, 1280, 4, 4]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %193 = less(%164, %180) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %194 = where(%190, %191, %192) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %195 = where(%193, %191, %194) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %196 = nn.conv2d_transpose(%195, %v0_18_0_weight, channels=320, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %197 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %198 = multiply(%197, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %199 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %200 = multiply(%199, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %201 = less(%200, %159) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %202 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %203 = nn.conv2d_transpose(%196, %v0_17_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %204 = less(%159, %198) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %205 = where(%201, %202, %203) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %206 = where(%204, %202, %205) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %207 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %208 = multiply(%207, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %209 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %210 = multiply(%209, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %211 = less(%210, %155) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %212 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %213 = nn.conv2d_transpose(%206, %157, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %214 = less(%155, %208) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %215 = where(%211, %212, %213) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %216 = where(%214, %212, %215) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %217 = nn.conv2d_transpose(%216, %v0_17_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %218 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %219 = multiply(%218, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %220 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %221 = multiply(%220, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %222 = less(%221, %149) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %223 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %224 = nn.conv2d_transpose(%217, %v0_16_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %225 = less(%149, %219) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %226 = where(%222, %223, %224) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %227 = where(%225, %223, %226) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %228 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %229 = multiply(%228, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %230 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %231 = multiply(%230, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %232 = less(%231, %145) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %233 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %234 = nn.conv2d_transpose(%227, %147, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %235 = less(%145, %229) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %236 = where(%232, %233, %234) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %237 = where(%235, %233, %236) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %238 = nn.conv2d_transpose(%237, %v0_16_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %239 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %240 = multiply(%239, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %241 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %242 = multiply(%241, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %243 = less(%242, %139) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %244 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %245 = nn.conv2d_transpose(%238, %v0_15_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %246 = less(%139, %240) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %247 = where(%243, %244, %245) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %248 = where(%246, %244, %247) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %249 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %250 = multiply(%249, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %251 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %252 = multiply(%251, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %253 = less(%252, %135) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %254 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %255 = nn.conv2d_transpose(%248, %137, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %256 = less(%135, %250) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %257 = where(%253, %254, %255) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %258 = where(%256, %254, %257) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %259 = nn.conv2d_transpose(%258, %v0_15_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %260 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %261 = multiply(%260, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %262 = ones(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %263 = multiply(%262, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %264 = less(%263, %130) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %265 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %266 = nn.conv2d_transpose(%259, %v0_14_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %267 = less(%130, %261) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %268 = where(%264, %265, %266) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %269 = where(%267, %265, %268) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %270 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %271 = multiply(%270, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %272 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %273 = multiply(%272, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %274 = less(%273, %126) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %275 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %276 = nn.conv2d_transpose(%269, %128, channels=576, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %277 = less(%126, %271) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %278 = where(%274, %275, %276) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %279 = where(%277, %275, %278) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %280 = nn.conv2d_transpose(%279, %v0_14_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %281 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %282 = multiply(%281, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %283 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %284 = multiply(%283, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %285 = less(%284, %120) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %286 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %287 = nn.conv2d_transpose(%280, %v0_13_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %288 = less(%120, %282) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %289 = where(%285, %286, %287) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %290 = where(%288, %286, %289) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %291 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %292 = multiply(%291, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %293 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %294 = multiply(%293, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %295 = less(%294, %116) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %296 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %297 = nn.conv2d_transpose(%290, %118, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %298 = less(%116, %292) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %299 = where(%295, %296, %297) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %300 = where(%298, %296, %299) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %301 = nn.conv2d_transpose(%300, %v0_13_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %302 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %303 = multiply(%302, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %304 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %305 = multiply(%304, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %306 = less(%305, %110) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %307 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %308 = nn.conv2d_transpose(%301, %v0_12_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %309 = less(%110, %303) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %310 = where(%306, %307, %308) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %311 = where(%309, %307, %310) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %312 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %313 = multiply(%312, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %314 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %315 = multiply(%314, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %316 = less(%315, %106) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %317 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %318 = nn.conv2d_transpose(%311, %108, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %319 = less(%106, %313) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %320 = where(%316, %317, %318) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %321 = where(%319, %317, %320) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %322 = nn.conv2d_transpose(%321, %v0_12_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %323 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %324 = multiply(%323, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %325 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %326 = multiply(%325, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %327 = less(%326, %101) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %328 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %329 = nn.conv2d_transpose(%322, %v0_11_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %330 = less(%101, %324) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %331 = where(%327, %328, %329) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %332 = where(%330, %328, %331) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %333 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %334 = multiply(%333, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %335 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %336 = multiply(%335, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %337 = less(%336, %97) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %338 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %339 = nn.conv2d_transpose(%332, %99, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %340 = less(%97, %334) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %341 = where(%337, %338, %339) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %342 = where(%340, %338, %341) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %343 = nn.conv2d_transpose(%342, %v0_11_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %344 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %345 = multiply(%344, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %346 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %347 = multiply(%346, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %348 = less(%347, %91) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %349 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %350 = nn.conv2d_transpose(%343, %v0_10_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %351 = less(%91, %345) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %352 = where(%348, %349, %350) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %353 = where(%351, %349, %352) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %354 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %355 = multiply(%354, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %356 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %357 = multiply(%356, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %358 = less(%357, %87) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %359 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %360 = nn.conv2d_transpose(%353, %89, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %361 = less(%87, %355) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %362 = where(%358, %359, %360) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %363 = where(%361, %359, %362) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %364 = nn.conv2d_transpose(%363, %v0_10_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %365 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %366 = multiply(%365, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %367 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %368 = multiply(%367, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %369 = less(%368, %81) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %370 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %371 = nn.conv2d_transpose(%364, %v0_9_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %372 = less(%81, %366) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %373 = where(%369, %370, %371) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %374 = where(%372, %370, %373) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %375 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %376 = multiply(%375, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %377 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %378 = multiply(%377, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %379 = less(%378, %77) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %380 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %381 = nn.conv2d_transpose(%374, %79, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %382 = less(%77, %376) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %383 = where(%379, %380, %381) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %384 = where(%382, %380, %383) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %385 = nn.conv2d_transpose(%384, %v0_9_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %386 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %387 = multiply(%386, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %388 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %389 = multiply(%388, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %390 = less(%389, %71) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %391 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %392 = nn.conv2d_transpose(%385, %v0_8_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %393 = less(%71, %387) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %394 = where(%390, %391, %392) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %395 = where(%393, %391, %394) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %396 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %397 = multiply(%396, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %398 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %399 = multiply(%398, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %400 = less(%399, %67) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %401 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %402 = nn.conv2d_transpose(%395, %69, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %403 = less(%67, %397) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %404 = where(%400, %401, %402) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %405 = where(%403, %401, %404) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %406 = nn.conv2d_transpose(%405, %v0_8_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %407 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %408 = multiply(%407, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %409 = ones(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %410 = multiply(%409, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %411 = less(%410, %62) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %412 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %413 = nn.conv2d_transpose(%406, %v0_7_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %414 = less(%62, %408) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %415 = where(%411, %412, %413) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %416 = where(%414, %412, %415) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %417 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %418 = multiply(%417, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %419 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %420 = multiply(%419, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %421 = less(%420, %58) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %422 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %423 = nn.conv2d_transpose(%416, %60, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %424 = less(%58, %418) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %425 = where(%421, %422, %423) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %426 = where(%424, %422, %425) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %427 = nn.conv2d_transpose(%426, %v0_7_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %428 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %429 = multiply(%428, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %430 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %431 = multiply(%430, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %432 = less(%431, %52) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %433 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %434 = nn.conv2d_transpose(%427, %v0_6_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %435 = less(%52, %429) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %436 = where(%432, %433, %434) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %437 = where(%435, %433, %436) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %438 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %439 = multiply(%438, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %440 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %441 = multiply(%440, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %442 = less(%441, %48) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %443 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %444 = nn.conv2d_transpose(%437, %50, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %445 = less(%48, %439) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %446 = where(%442, %443, %444) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %447 = where(%445, %443, %446) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %448 = nn.conv2d_transpose(%447, %v0_6_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %449 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %450 = multiply(%449, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %451 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %452 = multiply(%451, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %453 = less(%452, %42) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %454 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %455 = nn.conv2d_transpose(%448, %v0_5_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %456 = less(%42, %450) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %457 = where(%453, %454, %455) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %458 = where(%456, %454, %457) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %459 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %460 = multiply(%459, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %461 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %462 = multiply(%461, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %463 = less(%462, %38) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %464 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %465 = nn.conv2d_transpose(%458, %40, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %466 = less(%38, %460) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %467 = where(%463, %464, %465) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %468 = where(%466, %464, %467) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %469 = nn.conv2d_transpose(%468, %v0_5_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %470 = zeros(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %471 = multiply(%470, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %472 = ones(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %473 = multiply(%472, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %474 = less(%473, %33) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %475 = zeros(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %476 = nn.conv2d_transpose(%469, %v0_4_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %477 = less(%33, %471) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %478 = where(%474, %475, %476) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %479 = where(%477, %475, %478) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %480 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %481 = multiply(%480, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %482 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %483 = multiply(%482, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %484 = less(%483, %29) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %485 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %486 = nn.conv2d_transpose(%479, %31, channels=144, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %487 = less(%29, %481) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %488 = where(%484, %485, %486) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %489 = where(%487, %485, %488) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %490 = nn.conv2d_transpose(%489, %v0_4_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %491 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %492 = multiply(%491, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %493 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %494 = multiply(%493, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %495 = less(%494, %23) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %496 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %497 = nn.conv2d_transpose(%490, %v0_3_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %498 = less(%23, %492) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %499 = where(%495, %496, %497) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %500 = where(%498, %496, %499) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %501 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %502 = multiply(%501, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %503 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %504 = multiply(%503, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %505 = less(%504, %19) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %506 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %507 = nn.conv2d_transpose(%500, %21, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %508 = less(%19, %502) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %509 = where(%505, %506, %507) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %510 = where(%508, %506, %509) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %511 = nn.conv2d_transpose(%510, %v0_3_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %512 = zeros(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %513 = multiply(%512, 0f /* ty=float32 */) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %514 = ones(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %515 = multiply(%514, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %516 = less(%515, %14) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %517 = zeros(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %518 = nn.conv2d_transpose(%511, %v0_2_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %519 = less(%14, %513) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %520 = where(%516, %517, %518) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %521 = where(%519, %517, %520) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %522 = zeros(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %523 = multiply(%522, 0f /* ty=float32 */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %524 = ones(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %525 = multiply(%524, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %526 = less(%525, %10) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %527 = zeros(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %528 = nn.conv2d_transpose(%521, %12, channels=96, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %529 = less(%10, %523) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %530 = where(%526, %527, %528) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %531 = where(%529, %527, %530) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %532 = nn.conv2d_transpose(%531, %v0_2_conv_0_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %533 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %534 = multiply(%533, 0f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %535 = ones(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %536 = multiply(%535, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %537 = less(%536, %5) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %538 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %539 = nn.conv2d_transpose(%532, %v0_1_conv_1_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %540 = less(%5, %534) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %541 = where(%537, %538, %539) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %542 = where(%540, %538, %541) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %543 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %544 = multiply(%543, 0f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %545 = ones(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %546 = multiply(%545, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %547 = less(%546, %1) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %548 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %549 = nn.conv2d_transpose(%542, %3, channels=32, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=32, kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %550 = less(%1, %544) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %551 = where(%547, %548, %549) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %552 = where(%550, %548, %551) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %553 = nn.cross_entropy_with_logits(%171, %label) /* ty=float32 */;
  %554 = sum(%178, axis=[-1], exclude=True) /* ty=Tensor[(10), float32] */;
  %555 = sum(%195, axis=[1], exclude=True) /* ty=Tensor[(1280), float32] */;
  %556 = sum(%196, axis=[1], exclude=True) /* ty=Tensor[(320), float32] */;
  %557 = sum(%206, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %558 = sum(%216, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %559 = sum(%217, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %560 = sum(%227, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %561 = sum(%237, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %562 = sum(%238, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %563 = sum(%248, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %564 = sum(%258, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %565 = sum(%259, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %566 = sum(%269, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %567 = sum(%279, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %568 = sum(%280, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %569 = sum(%290, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %570 = sum(%300, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %571 = sum(%301, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %572 = sum(%311, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %573 = sum(%321, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %574 = sum(%322, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %575 = sum(%332, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %576 = sum(%342, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %577 = sum(%343, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %578 = sum(%353, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %579 = sum(%363, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %580 = sum(%364, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %581 = sum(%374, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %582 = sum(%384, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %583 = sum(%385, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %584 = sum(%395, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %585 = sum(%405, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %586 = sum(%406, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %587 = sum(%416, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %588 = sum(%426, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %589 = sum(%427, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %590 = sum(%437, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %591 = sum(%447, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %592 = sum(%448, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %593 = sum(%458, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %594 = sum(%468, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %595 = sum(%469, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %596 = sum(%479, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %597 = sum(%489, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %598 = sum(%490, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %599 = sum(%500, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %600 = sum(%510, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %601 = sum(%511, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %602 = sum(%521, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %603 = sum(%531, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %604 = sum(%532, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %605 = sum(%542, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %606 = sum(%552, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  (%553, %554, %555, %556, %557, %558, %559, %560, %561, %562, %563, %564, %565, %566, %567, %568, %569, %570, %571, %572, %573, %574, %575, %576, %577, %578, %579, %580, %581, %582, %583, %584, %585, %586, %587, %588, %589, %590, %591, %592, %593, %594, %595, %596, %597, %598, %599, %600, %601, %602, %603, %604, %605, %606)
}