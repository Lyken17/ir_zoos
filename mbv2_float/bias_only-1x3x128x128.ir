fn (%input: Tensor[(1, 3, 128, 128), float32], %v0_0_0_weight: Tensor[(32, 3, 3, 3), float32], %v0_0_0_bias: Tensor[(32), float32], %v0_1_conv_0_0_weight: Tensor[(32, 1, 3, 3), float32], %v0_1_conv_0_0_bias: Tensor[(32), float32], %v0_1_conv_1_weight: Tensor[(16, 32, 1, 1), float32], %v0_1_conv_1_bias: Tensor[(16), float32], %v0_2_conv_0_0_weight: Tensor[(96, 16, 1, 1), float32], %v0_2_conv_0_0_bias: Tensor[(96), float32], %v0_2_conv_1_0_weight: Tensor[(96, 1, 3, 3), float32], %v0_2_conv_1_0_bias: Tensor[(96), float32], %v0_2_conv_2_weight: Tensor[(24, 96, 1, 1), float32], %v0_2_conv_2_bias: Tensor[(24), float32], %v0_3_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_3_conv_0_0_bias: Tensor[(144), float32], %v0_3_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_3_conv_1_0_bias: Tensor[(144), float32], %v0_3_conv_2_weight: Tensor[(24, 144, 1, 1), float32], %v0_3_conv_2_bias: Tensor[(24), float32], %v0_4_conv_0_0_weight: Tensor[(144, 24, 1, 1), float32], %v0_4_conv_0_0_bias: Tensor[(144), float32], %v0_4_conv_1_0_weight: Tensor[(144, 1, 3, 3), float32], %v0_4_conv_1_0_bias: Tensor[(144), float32], %v0_4_conv_2_weight: Tensor[(32, 144, 1, 1), float32], %v0_4_conv_2_bias: Tensor[(32), float32], %v0_5_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_5_conv_0_0_bias: Tensor[(192), float32], %v0_5_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_5_conv_1_0_bias: Tensor[(192), float32], %v0_5_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_5_conv_2_bias: Tensor[(32), float32], %v0_6_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_6_conv_0_0_bias: Tensor[(192), float32], %v0_6_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_6_conv_1_0_bias: Tensor[(192), float32], %v0_6_conv_2_weight: Tensor[(32, 192, 1, 1), float32], %v0_6_conv_2_bias: Tensor[(32), float32], %v0_7_conv_0_0_weight: Tensor[(192, 32, 1, 1), float32], %v0_7_conv_0_0_bias: Tensor[(192), float32], %v0_7_conv_1_0_weight: Tensor[(192, 1, 3, 3), float32], %v0_7_conv_1_0_bias: Tensor[(192), float32], %v0_7_conv_2_weight: Tensor[(64, 192, 1, 1), float32], %v0_7_conv_2_bias: Tensor[(64), float32], %v0_8_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_8_conv_0_0_bias: Tensor[(384), float32], %v0_8_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_8_conv_1_0_bias: Tensor[(384), float32], %v0_8_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_8_conv_2_bias: Tensor[(64), float32], %v0_9_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_9_conv_0_0_bias: Tensor[(384), float32], %v0_9_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_9_conv_1_0_bias: Tensor[(384), float32], %v0_9_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_9_conv_2_bias: Tensor[(64), float32], %v0_10_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_10_conv_0_0_bias: Tensor[(384), float32], %v0_10_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_10_conv_1_0_bias: Tensor[(384), float32], %v0_10_conv_2_weight: Tensor[(64, 384, 1, 1), float32], %v0_10_conv_2_bias: Tensor[(64), float32], %v0_11_conv_0_0_weight: Tensor[(384, 64, 1, 1), float32], %v0_11_conv_0_0_bias: Tensor[(384), float32], %v0_11_conv_1_0_weight: Tensor[(384, 1, 3, 3), float32], %v0_11_conv_1_0_bias: Tensor[(384), float32], %v0_11_conv_2_weight: Tensor[(96, 384, 1, 1), float32], %v0_11_conv_2_bias: Tensor[(96), float32], %v0_12_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_12_conv_0_0_bias: Tensor[(576), float32], %v0_12_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_12_conv_1_0_bias: Tensor[(576), float32], %v0_12_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_12_conv_2_bias: Tensor[(96), float32], %v0_13_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_13_conv_0_0_bias: Tensor[(576), float32], %v0_13_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_13_conv_1_0_bias: Tensor[(576), float32], %v0_13_conv_2_weight: Tensor[(96, 576, 1, 1), float32], %v0_13_conv_2_bias: Tensor[(96), float32], %v0_14_conv_0_0_weight: Tensor[(576, 96, 1, 1), float32], %v0_14_conv_0_0_bias: Tensor[(576), float32], %v0_14_conv_1_0_weight: Tensor[(576, 1, 3, 3), float32], %v0_14_conv_1_0_bias: Tensor[(576), float32], %v0_14_conv_2_weight: Tensor[(160, 576, 1, 1), float32], %v0_14_conv_2_bias: Tensor[(160), float32], %v0_15_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_15_conv_0_0_bias: Tensor[(960), float32], %v0_15_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_15_conv_1_0_bias: Tensor[(960), float32], %v0_15_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_15_conv_2_bias: Tensor[(160), float32], %v0_16_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_16_conv_0_0_bias: Tensor[(960), float32], %v0_16_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_16_conv_1_0_bias: Tensor[(960), float32], %v0_16_conv_2_weight: Tensor[(160, 960, 1, 1), float32], %v0_16_conv_2_bias: Tensor[(160), float32], %v0_17_conv_0_0_weight: Tensor[(960, 160, 1, 1), float32], %v0_17_conv_0_0_bias: Tensor[(960), float32], %v0_17_conv_1_0_weight: Tensor[(960, 1, 3, 3), float32], %v0_17_conv_1_0_bias: Tensor[(960), float32], %v0_17_conv_2_weight: Tensor[(320, 960, 1, 1), float32], %v0_17_conv_2_bias: Tensor[(320), float32], %v0_18_0_weight: Tensor[(1280, 320, 1, 1), float32], %v0_18_0_bias: Tensor[(1280), float32], %v3_1_weight: Tensor[(10, 1280), float32], %v3_1_bias: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(1280), float32], Tensor[(320), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(160), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(160), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(160), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(64), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(144), float32], Tensor[(144), float32], Tensor[(24), float32], Tensor[(144), float32], Tensor[(144), float32], Tensor[(24), float32], Tensor[(96), float32], Tensor[(96), float32], Tensor[(16), float32], Tensor[(32), float32], Tensor[(32), float32]) {
  %0 = nn.conv2d(%input, %v0_0_0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %1 = nn.bias_add(%0, %v0_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %2 = clip(%1, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %3 = reshape(%v0_1_conv_0_0_weight, newshape=[32, 1, 3, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %4 = nn.conv2d(%2, %3, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %5 = nn.bias_add(%4, %v0_1_conv_0_0_bias) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %6 = clip(%5, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %7 = nn.conv2d(%6, %v0_1_conv_1_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %8 = nn.bias_add(%7, %v0_1_conv_1_bias) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %9 = nn.conv2d(%8, %v0_2_conv_0_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %10 = nn.bias_add(%9, %v0_2_conv_0_0_bias) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %11 = clip(%10, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %12 = reshape(%v0_2_conv_1_0_weight, newshape=[96, 1, 3, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %13 = nn.conv2d(%11, %12, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %14 = nn.bias_add(%13, %v0_2_conv_1_0_bias) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %15 = clip(%14, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %16 = nn.conv2d(%15, %v0_2_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %17 = nn.bias_add(%16, %v0_2_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %18 = nn.conv2d(%17, %v0_3_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %19 = nn.bias_add(%18, %v0_3_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %20 = clip(%19, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %21 = reshape(%v0_3_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %22 = nn.conv2d(%20, %21, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %23 = nn.bias_add(%22, %v0_3_conv_1_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %24 = clip(%23, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %25 = nn.conv2d(%24, %v0_3_conv_2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %26 = nn.bias_add(%25, %v0_3_conv_2_bias) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %27 = add(%17, %26) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %28 = nn.conv2d(%27, %v0_4_conv_0_0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %29 = nn.bias_add(%28, %v0_4_conv_0_0_bias) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %31 = reshape(%v0_4_conv_1_0_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %32 = nn.conv2d(%30, %31, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %33 = nn.bias_add(%32, %v0_4_conv_1_0_bias) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %34 = clip(%33, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %35 = nn.conv2d(%34, %v0_4_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %36 = nn.bias_add(%35, %v0_4_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %37 = nn.conv2d(%36, %v0_5_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %38 = nn.bias_add(%37, %v0_5_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %39 = clip(%38, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %40 = reshape(%v0_5_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %41 = nn.conv2d(%39, %40, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %42 = nn.bias_add(%41, %v0_5_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %43 = clip(%42, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %44 = nn.conv2d(%43, %v0_5_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %45 = nn.bias_add(%44, %v0_5_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %46 = add(%36, %45) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %47 = nn.conv2d(%46, %v0_6_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %48 = nn.bias_add(%47, %v0_6_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %49 = clip(%48, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %50 = reshape(%v0_6_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %51 = nn.conv2d(%49, %50, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %52 = nn.bias_add(%51, %v0_6_conv_1_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %54 = nn.conv2d(%53, %v0_6_conv_2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %55 = nn.bias_add(%54, %v0_6_conv_2_bias) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %56 = add(%46, %55) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %57 = nn.conv2d(%56, %v0_7_conv_0_0_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %58 = nn.bias_add(%57, %v0_7_conv_0_0_bias) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %59 = clip(%58, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %60 = reshape(%v0_7_conv_1_0_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %61 = nn.conv2d(%59, %60, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %62 = nn.bias_add(%61, %v0_7_conv_1_0_bias) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %63 = clip(%62, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %64 = nn.conv2d(%63, %v0_7_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %65 = nn.bias_add(%64, %v0_7_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %66 = nn.conv2d(%65, %v0_8_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %67 = nn.bias_add(%66, %v0_8_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %68 = clip(%67, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %69 = reshape(%v0_8_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %70 = nn.conv2d(%68, %69, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %71 = nn.bias_add(%70, %v0_8_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %72 = clip(%71, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %73 = nn.conv2d(%72, %v0_8_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %74 = nn.bias_add(%73, %v0_8_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %75 = add(%65, %74) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %76 = nn.conv2d(%75, %v0_9_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %77 = nn.bias_add(%76, %v0_9_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %78 = clip(%77, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %79 = reshape(%v0_9_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %80 = nn.conv2d(%78, %79, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %81 = nn.bias_add(%80, %v0_9_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %83 = nn.conv2d(%82, %v0_9_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %84 = nn.bias_add(%83, %v0_9_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %85 = add(%75, %84) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %86 = nn.conv2d(%85, %v0_10_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %87 = nn.bias_add(%86, %v0_10_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %89 = reshape(%v0_10_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %90 = nn.conv2d(%88, %89, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %91 = nn.bias_add(%90, %v0_10_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %92 = clip(%91, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %93 = nn.conv2d(%92, %v0_10_conv_2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %94 = nn.bias_add(%93, %v0_10_conv_2_bias) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %95 = add(%85, %94) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %96 = nn.conv2d(%95, %v0_11_conv_0_0_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %97 = nn.bias_add(%96, %v0_11_conv_0_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %98 = clip(%97, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %99 = reshape(%v0_11_conv_1_0_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %100 = nn.conv2d(%98, %99, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %101 = nn.bias_add(%100, %v0_11_conv_1_0_bias) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %102 = clip(%101, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %103 = nn.conv2d(%102, %v0_11_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %104 = nn.bias_add(%103, %v0_11_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %105 = nn.conv2d(%104, %v0_12_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %106 = nn.bias_add(%105, %v0_12_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %107 = clip(%106, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %108 = reshape(%v0_12_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %109 = nn.conv2d(%107, %108, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %110 = nn.bias_add(%109, %v0_12_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %111 = clip(%110, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %112 = nn.conv2d(%111, %v0_12_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %113 = nn.bias_add(%112, %v0_12_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %114 = add(%104, %113) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %115 = nn.conv2d(%114, %v0_13_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %116 = nn.bias_add(%115, %v0_13_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %118 = reshape(%v0_13_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %119 = nn.conv2d(%117, %118, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %120 = nn.bias_add(%119, %v0_13_conv_1_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %121 = clip(%120, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %122 = nn.conv2d(%121, %v0_13_conv_2_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %123 = nn.bias_add(%122, %v0_13_conv_2_bias) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %124 = add(%114, %123) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %125 = nn.conv2d(%124, %v0_14_conv_0_0_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %126 = nn.bias_add(%125, %v0_14_conv_0_0_bias) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %127 = clip(%126, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %128 = reshape(%v0_14_conv_1_0_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %129 = nn.conv2d(%127, %128, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %130 = nn.bias_add(%129, %v0_14_conv_1_0_bias) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %131 = clip(%130, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %132 = nn.conv2d(%131, %v0_14_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %133 = nn.bias_add(%132, %v0_14_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %134 = nn.conv2d(%133, %v0_15_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %135 = nn.bias_add(%134, %v0_15_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %136 = clip(%135, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %137 = reshape(%v0_15_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %138 = nn.conv2d(%136, %137, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %139 = nn.bias_add(%138, %v0_15_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %140 = clip(%139, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %141 = nn.conv2d(%140, %v0_15_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = nn.bias_add(%141, %v0_15_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %143 = add(%133, %142) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = nn.conv2d(%143, %v0_16_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %145 = nn.bias_add(%144, %v0_16_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %146 = clip(%145, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %147 = reshape(%v0_16_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %148 = nn.conv2d(%146, %147, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %149 = nn.bias_add(%148, %v0_16_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %150 = clip(%149, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %151 = nn.conv2d(%150, %v0_16_conv_2_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %152 = nn.bias_add(%151, %v0_16_conv_2_bias) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %153 = add(%143, %152) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %154 = nn.conv2d(%153, %v0_17_conv_0_0_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %155 = nn.bias_add(%154, %v0_17_conv_0_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %156 = clip(%155, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %157 = reshape(%v0_17_conv_1_0_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %158 = nn.conv2d(%156, %157, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %159 = nn.bias_add(%158, %v0_17_conv_1_0_bias) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %160 = clip(%159, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %161 = nn.conv2d(%160, %v0_17_conv_2_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %162 = nn.bias_add(%161, %v0_17_conv_2_bias) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %163 = nn.conv2d(%162, %v0_18_0_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %164 = nn.bias_add(%163, %v0_18_0_bias) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %165 = clip(%164, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %166 = nn.adaptive_avg_pool2d(%165, output_size=[1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %167 = reshape(%166, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %168 = squeeze(%167, axis=[2, 3]) /* ty=Tensor[(1, 1280), float32] */;
  %169 = nn.dense(%168, %v3_1_weight, units=None) /* ty=Tensor[(1, 10), float32] */;
  %170 = nn.bias_add(%169, %v3_1_bias, axis=-1) /* ty=Tensor[(1, 10), float32] */;
  %171 = nn.log_softmax(%170) /* ty=Tensor[(1, 10), float32] */;
  %172 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %173 = negative(%172) /* ty=float32 */;
  %174 = multiply(%173, %label) /* ty=Tensor[(1, 10), float32] */;
  %175 = sum(%174, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %176 = exp(%171) /* ty=Tensor[(1, 10), float32] */;
  %177 = multiply(%175, %176) /* ty=Tensor[(1, 10), float32] */;
  %178 = subtract(%174, %177) /* ty=Tensor[(1, 10), float32] */;
  %179 = zeros(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %180 = multiply(%179, 0f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %181 = ones(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %182 = multiply(%181, 6f /* ty=float32 */) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %183 = nn.matmul(%178, %v3_1_weight, units=None) /* ty=Tensor[(1, 1280), float32] */;
  %184 = reshape(%183, newshape=[1, 1280, 1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %185 = less(%182, %164) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %186 = zeros(shape=[1, 1280, 4, 4], dtype="float32") /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %187 = nn.avg_pool2d_grad(%184, %165, pool_size=[4, 4], dilation=[]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %188 = less(%164, %180) /* ty=Tensor[(1, 1280, 4, 4), bool] */;
  %189 = where(%185, %186, %187) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %190 = where(%188, %186, %189) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %191 = nn.conv2d_transpose(%190, %v0_18_0_weight, channels=320, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %192 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %193 = multiply(%192, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %194 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %195 = multiply(%194, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %196 = less(%195, %159) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %197 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %198 = nn.conv2d_transpose(%191, %v0_17_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %199 = less(%159, %193) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %200 = where(%196, %197, %198) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %201 = where(%199, %197, %200) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %202 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %203 = multiply(%202, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %204 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %205 = multiply(%204, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %206 = less(%205, %155) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %207 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %208 = nn.conv2d_transpose(%201, %157, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %209 = less(%155, %203) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %210 = where(%206, %207, %208) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %211 = where(%209, %207, %210) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %212 = nn.conv2d_transpose(%211, %v0_17_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %213 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %214 = multiply(%213, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %215 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %216 = multiply(%215, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %217 = less(%216, %149) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %218 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %219 = nn.conv2d_transpose(%212, %v0_16_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %220 = less(%149, %214) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %221 = where(%217, %218, %219) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %222 = where(%220, %218, %221) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %223 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %224 = multiply(%223, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %225 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %226 = multiply(%225, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %227 = less(%226, %145) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %228 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %229 = nn.conv2d_transpose(%222, %147, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %230 = less(%145, %224) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %231 = where(%227, %228, %229) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %232 = where(%230, %228, %231) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %233 = nn.conv2d_transpose(%232, %v0_16_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %234 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %235 = multiply(%234, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %236 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %237 = multiply(%236, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %238 = less(%237, %139) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %239 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %240 = nn.conv2d_transpose(%233, %v0_15_conv_2_weight, channels=960, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %241 = less(%139, %235) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %242 = where(%238, %239, %240) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %243 = where(%241, %239, %242) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %244 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %245 = multiply(%244, 0f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %246 = ones(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %247 = multiply(%246, 6f /* ty=float32 */) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %248 = less(%247, %135) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %249 = zeros(shape=[1, 960, 4, 4], dtype="float32") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %250 = nn.conv2d_transpose(%243, %137, channels=960, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=960, kernel_layout="IOHW") /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %251 = less(%135, %245) /* ty=Tensor[(1, 960, 4, 4), bool] */;
  %252 = where(%248, %249, %250) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %253 = where(%251, %249, %252) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %254 = nn.conv2d_transpose(%253, %v0_15_conv_0_0_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %255 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %256 = multiply(%255, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %257 = ones(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %258 = multiply(%257, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %259 = less(%258, %130) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %260 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %261 = nn.conv2d_transpose(%254, %v0_14_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %262 = less(%130, %256) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %263 = where(%259, %260, %261) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %264 = where(%262, %260, %263) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %265 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %266 = multiply(%265, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %267 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %268 = multiply(%267, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %269 = less(%268, %126) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %270 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %271 = nn.conv2d_transpose(%264, %128, channels=576, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %272 = less(%126, %266) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %273 = where(%269, %270, %271) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %274 = where(%272, %270, %273) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %275 = nn.conv2d_transpose(%274, %v0_14_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %276 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %277 = multiply(%276, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %278 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %279 = multiply(%278, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %280 = less(%279, %120) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %281 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %282 = nn.conv2d_transpose(%275, %v0_13_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %283 = less(%120, %277) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %284 = where(%280, %281, %282) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %285 = where(%283, %281, %284) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %286 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %287 = multiply(%286, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %288 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %289 = multiply(%288, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %290 = less(%289, %116) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %291 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %292 = nn.conv2d_transpose(%285, %118, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %293 = less(%116, %287) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %294 = where(%290, %291, %292) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %295 = where(%293, %291, %294) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %296 = nn.conv2d_transpose(%295, %v0_13_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %297 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %298 = multiply(%297, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %299 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %300 = multiply(%299, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %301 = less(%300, %110) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %302 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %303 = nn.conv2d_transpose(%296, %v0_12_conv_2_weight, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %304 = less(%110, %298) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %305 = where(%301, %302, %303) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %306 = where(%304, %302, %305) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %307 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %308 = multiply(%307, 0f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %309 = ones(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %310 = multiply(%309, 6f /* ty=float32 */) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %311 = less(%310, %106) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %312 = zeros(shape=[1, 576, 8, 8], dtype="float32") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %313 = nn.conv2d_transpose(%306, %108, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %314 = less(%106, %308) /* ty=Tensor[(1, 576, 8, 8), bool] */;
  %315 = where(%311, %312, %313) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %316 = where(%314, %312, %315) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %317 = nn.conv2d_transpose(%316, %v0_12_conv_0_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %318 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %319 = multiply(%318, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %320 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %321 = multiply(%320, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %322 = less(%321, %101) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %323 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %324 = nn.conv2d_transpose(%317, %v0_11_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %325 = less(%101, %319) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %326 = where(%322, %323, %324) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %327 = where(%325, %323, %326) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %328 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %329 = multiply(%328, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %330 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %331 = multiply(%330, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %332 = less(%331, %97) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %333 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %334 = nn.conv2d_transpose(%327, %99, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %335 = less(%97, %329) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %336 = where(%332, %333, %334) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %337 = where(%335, %333, %336) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %338 = nn.conv2d_transpose(%337, %v0_11_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %339 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %340 = multiply(%339, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %341 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %342 = multiply(%341, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %343 = less(%342, %91) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %344 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %345 = nn.conv2d_transpose(%338, %v0_10_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %346 = less(%91, %340) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %347 = where(%343, %344, %345) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %348 = where(%346, %344, %347) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %349 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %350 = multiply(%349, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %351 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %352 = multiply(%351, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %353 = less(%352, %87) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %354 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %355 = nn.conv2d_transpose(%348, %89, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %356 = less(%87, %350) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %357 = where(%353, %354, %355) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %358 = where(%356, %354, %357) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %359 = nn.conv2d_transpose(%358, %v0_10_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %360 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %361 = multiply(%360, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %362 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %363 = multiply(%362, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %364 = less(%363, %81) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %365 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %366 = nn.conv2d_transpose(%359, %v0_9_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %367 = less(%81, %361) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %368 = where(%364, %365, %366) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %369 = where(%367, %365, %368) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %370 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %371 = multiply(%370, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %372 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %373 = multiply(%372, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %374 = less(%373, %77) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %375 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %376 = nn.conv2d_transpose(%369, %79, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %377 = less(%77, %371) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %378 = where(%374, %375, %376) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %379 = where(%377, %375, %378) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %380 = nn.conv2d_transpose(%379, %v0_9_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %381 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %382 = multiply(%381, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %383 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %384 = multiply(%383, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %385 = less(%384, %71) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %386 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %387 = nn.conv2d_transpose(%380, %v0_8_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %388 = less(%71, %382) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %389 = where(%385, %386, %387) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %390 = where(%388, %386, %389) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %391 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %392 = multiply(%391, 0f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %393 = ones(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %394 = multiply(%393, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %395 = less(%394, %67) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %396 = zeros(shape=[1, 384, 8, 8], dtype="float32") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %397 = nn.conv2d_transpose(%390, %69, channels=384, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %398 = less(%67, %392) /* ty=Tensor[(1, 384, 8, 8), bool] */;
  %399 = where(%395, %396, %397) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %400 = where(%398, %396, %399) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %401 = nn.conv2d_transpose(%400, %v0_8_conv_0_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %402 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %403 = multiply(%402, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %404 = ones(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %405 = multiply(%404, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %406 = less(%405, %62) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %407 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %408 = nn.conv2d_transpose(%401, %v0_7_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %409 = less(%62, %403) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %410 = where(%406, %407, %408) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %411 = where(%409, %407, %410) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %412 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %413 = multiply(%412, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %414 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %415 = multiply(%414, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %416 = less(%415, %58) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %417 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %418 = nn.conv2d_transpose(%411, %60, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %419 = less(%58, %413) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %420 = where(%416, %417, %418) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %421 = where(%419, %417, %420) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %422 = nn.conv2d_transpose(%421, %v0_7_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %423 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %424 = multiply(%423, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %425 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %426 = multiply(%425, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %427 = less(%426, %52) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %428 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %429 = nn.conv2d_transpose(%422, %v0_6_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %430 = less(%52, %424) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %431 = where(%427, %428, %429) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %432 = where(%430, %428, %431) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %433 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %434 = multiply(%433, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %435 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %436 = multiply(%435, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %437 = less(%436, %48) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %438 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %439 = nn.conv2d_transpose(%432, %50, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %440 = less(%48, %434) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %441 = where(%437, %438, %439) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %442 = where(%440, %438, %441) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %443 = nn.conv2d_transpose(%442, %v0_6_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %444 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %445 = multiply(%444, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %446 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %447 = multiply(%446, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %448 = less(%447, %42) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %449 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %450 = nn.conv2d_transpose(%443, %v0_5_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %451 = less(%42, %445) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %452 = where(%448, %449, %450) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %453 = where(%451, %449, %452) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %454 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %455 = multiply(%454, 0f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %456 = ones(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %457 = multiply(%456, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %458 = less(%457, %38) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %459 = zeros(shape=[1, 192, 16, 16], dtype="float32") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %460 = nn.conv2d_transpose(%453, %40, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %461 = less(%38, %455) /* ty=Tensor[(1, 192, 16, 16), bool] */;
  %462 = where(%458, %459, %460) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %463 = where(%461, %459, %462) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %464 = nn.conv2d_transpose(%463, %v0_5_conv_0_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %465 = zeros(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %466 = multiply(%465, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %467 = ones(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %468 = multiply(%467, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %469 = less(%468, %33) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %470 = zeros(shape=[1, 144, 16, 16], dtype="float32") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %471 = nn.conv2d_transpose(%464, %v0_4_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %472 = less(%33, %466) /* ty=Tensor[(1, 144, 16, 16), bool] */;
  %473 = where(%469, %470, %471) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %474 = where(%472, %470, %473) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %475 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %476 = multiply(%475, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %477 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %478 = multiply(%477, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %479 = less(%478, %29) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %480 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %481 = nn.conv2d_transpose(%474, %31, channels=144, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %482 = less(%29, %476) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %483 = where(%479, %480, %481) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %484 = where(%482, %480, %483) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %485 = nn.conv2d_transpose(%484, %v0_4_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %486 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %487 = multiply(%486, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %488 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %489 = multiply(%488, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %490 = less(%489, %23) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %491 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %492 = nn.conv2d_transpose(%485, %v0_3_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %493 = less(%23, %487) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %494 = where(%490, %491, %492) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %495 = where(%493, %491, %494) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %496 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %497 = multiply(%496, 0f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %498 = ones(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %499 = multiply(%498, 6f /* ty=float32 */) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %500 = less(%499, %19) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %501 = zeros(shape=[1, 144, 32, 32], dtype="float32") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %502 = nn.conv2d_transpose(%495, %21, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %503 = less(%19, %497) /* ty=Tensor[(1, 144, 32, 32), bool] */;
  %504 = where(%500, %501, %502) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %505 = where(%503, %501, %504) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %506 = nn.conv2d_transpose(%505, %v0_3_conv_0_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %507 = zeros(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %508 = multiply(%507, 0f /* ty=float32 */) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %509 = ones(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %510 = multiply(%509, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %511 = less(%510, %14) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %512 = zeros(shape=[1, 96, 32, 32], dtype="float32") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %513 = nn.conv2d_transpose(%506, %v0_2_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %514 = less(%14, %508) /* ty=Tensor[(1, 96, 32, 32), bool] */;
  %515 = where(%511, %512, %513) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %516 = where(%514, %512, %515) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %517 = zeros(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %518 = multiply(%517, 0f /* ty=float32 */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %519 = ones(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %520 = multiply(%519, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %521 = less(%520, %10) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %522 = zeros(shape=[1, 96, 64, 64], dtype="float32") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %523 = nn.conv2d_transpose(%516, %12, channels=96, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %524 = less(%10, %518) /* ty=Tensor[(1, 96, 64, 64), bool] */;
  %525 = where(%521, %522, %523) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %526 = where(%524, %522, %525) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %527 = nn.conv2d_transpose(%526, %v0_2_conv_0_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %528 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %529 = multiply(%528, 0f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %530 = ones(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %531 = multiply(%530, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %532 = less(%531, %5) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %533 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %534 = nn.conv2d_transpose(%527, %v0_1_conv_1_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %535 = less(%5, %529) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %536 = where(%532, %533, %534) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %537 = where(%535, %533, %536) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %538 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %539 = multiply(%538, 0f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %540 = ones(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %541 = multiply(%540, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %542 = less(%541, %1) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %543 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %544 = nn.conv2d_transpose(%537, %3, channels=32, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=32, kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %545 = less(%1, %539) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %546 = where(%542, %543, %544) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %547 = where(%545, %543, %546) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %548 = nn.cross_entropy_with_logits(%171, %label) /* ty=float32 */;
  %549 = sum(%178, axis=[-1], exclude=True) /* ty=Tensor[(10), float32] */;
  %550 = sum(%190, axis=[1], exclude=True) /* ty=Tensor[(1280), float32] */;
  %551 = sum(%191, axis=[1], exclude=True) /* ty=Tensor[(320), float32] */;
  %552 = sum(%201, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %553 = sum(%211, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %554 = sum(%212, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %555 = sum(%222, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %556 = sum(%232, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %557 = sum(%233, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %558 = sum(%243, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %559 = sum(%253, axis=[1], exclude=True) /* ty=Tensor[(960), float32] */;
  %560 = sum(%254, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %561 = sum(%264, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %562 = sum(%274, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %563 = sum(%275, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %564 = sum(%285, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %565 = sum(%295, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %566 = sum(%296, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %567 = sum(%306, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %568 = sum(%316, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %569 = sum(%317, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %570 = sum(%327, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %571 = sum(%337, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %572 = sum(%338, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %573 = sum(%348, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %574 = sum(%358, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %575 = sum(%359, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %576 = sum(%369, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %577 = sum(%379, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %578 = sum(%380, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %579 = sum(%390, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %580 = sum(%400, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %581 = sum(%401, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %582 = sum(%411, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %583 = sum(%421, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %584 = sum(%422, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %585 = sum(%432, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %586 = sum(%442, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %587 = sum(%443, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %588 = sum(%453, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %589 = sum(%463, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %590 = sum(%464, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %591 = sum(%474, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %592 = sum(%484, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %593 = sum(%485, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %594 = sum(%495, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %595 = sum(%505, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %596 = sum(%506, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %597 = sum(%516, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %598 = sum(%526, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %599 = sum(%527, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %600 = sum(%537, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %601 = sum(%547, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  (%548, %549, %550, %551, %552, %553, %554, %555, %556, %557, %558, %559, %560, %561, %562, %563, %564, %565, %566, %567, %568, %569, %570, %571, %572, %573, %574, %575, %576, %577, %578, %579, %580, %581, %582, %583, %584, %585, %586, %587, %588, %589, %590, %591, %592, %593, %594, %595, %596, %597, %598, %599, %600, %601)
}